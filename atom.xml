<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://maomaoxie.github.io</id>
    <title>Mawchu 貓奴前端的天空</title>
    <link href="http://maomaoxie.github.io" />
    <updated>2022-10-09T06:20:19.000Z</updated>
    <category term="Google Analytics" />
    <category term="GA" />
    <category term="GA4" />
    <category term="Google Tag Manager" />
    <category term="GTM" />
    <category term="javascript" />
    <category term="constructor" />
    <category term="instance" />
    <category term="methods" />
    <category term="backEnd" />
    <category term="node" />
    <category term="express" />
    <category term="router" />
    <category term="git" />
    <category term="github" />
    <category term="sourceTree" />
    <category term="hexo" />
    <category term="submodule" />
    <category term="api" />
    <category term="graphQL" />
    <category term="facebook" />
    <category term="rss" />
    <category term="http" />
    <category term="https" />
    <category term="request" />
    <category term="response" />
    <category term="httpHeader" />
    <category term="httpMethods" />
    <category term="status" />
    <category term="Javascript" />
    <category term="type" />
    <category term="laravel" />
    <category term="php" />
    <category term="linux" />
    <category term="blade" />
    <category term="wsl2" />
    <category term="layout" />
    <category term="migration" />
    <category term="sql" />
    <category term="public" />
    <category term="static" />
    <category term="tailwind" />
    <category term="css" />
    <category term="less" />
    <category term="processors" />
    <category term="env" />
    <category term="process" />
    <category term="dotenv" />
    <category term="webService" />
    <category term="restfulApi" />
    <category term="shortCircuit" />
    <category term="optionalChaining" />
    <category term="tricks" />
    <category term="vue" />
    <category term="vue3" />
    <category term="compositionAPI" />
    <category term="vite" />
    <category term="typescript" />
    <category term="vuetify" />
    <category term="html" />
    <category term="WebSocket" />
    <category term="WebHook" />
    <category term="wordpress" />
    <category term="dns" />
    <category term="cdn" />
    <entry>
        <id>http://maomaoxie.github.io/2022/10/09/google-analytics-knowhow/</id>
        <title>關於 Google Analytics GA 你應該知道的事</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/10/09/google-analytics-knowhow/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Google Analytics 也就是 GA ，即將在 2023 年 7 月 1 日起不再提供&lt;strong&gt;通用版本（Universal Analytics）&lt;/strong&gt;&lt;br&gt;的資料分析了，全面升級至 GA4 是每個網站與應用程式必須面對的問題。&lt;/p&gt;
&lt;p&gt;而訪客區分為新訪客與舊訪客，以及舊訪客的回訪率等資料。那麼 Google 要如何去區分呢？來了解一下：&lt;/p&gt;
&lt;h1 id=&#34;GA-如何區分與追蹤同一瀏覽人次&#34;&gt;&lt;a href=&#34;#GA-如何區分與追蹤同一瀏覽人次&#34; class=&#34;headerlink&#34; title=&#34;GA 如何區分與追蹤同一瀏覽人次&#34;&gt;&lt;/a&gt;GA 如何區分與追蹤同一瀏覽人次&lt;/h1&gt;&lt;h3 id=&#34;client-ID&#34;&gt;&lt;a href=&#34;#client-ID&#34; class=&#34;headerlink&#34; title=&#34;client ID&#34;&gt;&lt;/a&gt;client ID&lt;/h3&gt;&lt;p&gt;該數據是 GA 用來判定此瀏覽器使用者是否為重複瀏覽的人次，紀錄方式透過 Cookie 裡的 _ga 查看內容的話，&lt;br&gt;會有一段追蹤碼記錄此用戶的 client ID，一旦清除 GA 偵測不到就會判定為新的瀏覽使用者。&lt;/p&gt;
&lt;img src=&#34;/images/google-analytics-knowhow/1.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;google-analytics-knowhow&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;由於 GA 判斷新訪客、舊訪客是使用「用戶裝置瀏覽器」來做區別，因此同一個用戶跨裝置訪問網站亦會被計入成兩個用戶，為了精準了解新訪客和舊訪客，事實上引入 User ID 作為統計方式會最為準確，而這一部份我待後續文章分享。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;author&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://medium.com/peerone-technology-%E7%9A%AE%E5%81%B6%E7%8E%A9%E4%BA%92%E5%8B%95%E7%A7%91%E6%8A%80/%E4%B8%80%E7%AA%BA-ga-pageview-%E7%9A%84%E8%BF%BD%E8%B9%A4%E5%8A%9B%E9%87%8F-ga-%E7%B3%BB%E5%88%97-3-afbb42dbb8b5&#34;&gt;一窺 GA PageView 的追蹤力量- GA 系列 (3)&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;GA 參數（這裡指的是事件 event 參數）旨在追蹤與分析使用者在你的網站或 app 上所有的互動行為，&lt;br&gt;提供蒐集來的、具商業行為參考價值的數據。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Parameters provide additional information about the ways users interact with your website. &lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;google analytics&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://developers.google.com/analytics/devguides/collection/ga4/event-parameters?client_type=gtm&#34;&gt;Set up event parameters&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;以下初步揭開 GA 的基礎輪廓：&lt;/p&gt;
&lt;h1 id=&#34;使用者的著陸網頁（Landing-Page）&#34;&gt;&lt;a href=&#34;#使用者的著陸網頁（Landing-Page）&#34; class=&#34;headerlink&#34; title=&#34;使用者的著陸網頁（Landing Page）&#34;&gt;&lt;/a&gt;使用者的著陸網頁（Landing Page）&lt;/h1&gt;&lt;p&gt;訪客來到網站的第一個頁面，是整個工作階段（Session）的起始點並且開啟一個工作階段的流程，&lt;/p&gt;
&lt;h1 id=&#34;基本追蹤事件&#34;&gt;&lt;a href=&#34;#基本追蹤事件&#34; class=&#34;headerlink&#34; title=&#34;基本追蹤事件&#34;&gt;&lt;/a&gt;基本追蹤事件&lt;/h1&gt;&lt;p&gt;GA 有&lt;strong&gt;基本追蹤事件&lt;/strong&gt;提供開通帳號的使用者，一窺網站或應用程式埋好 GA 追蹤碼之後的&lt;strong&gt;事件（event）&lt;/strong&gt;概覽數據，&lt;br&gt;這篇先來簡單介紹 GA 常見的、自動蒐集的數據：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://support.google.com/analytics/answer/9234069#user_engagement&#34;&gt;官方說明文件&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;網頁瀏覽（page-view）&#34;&gt;&lt;a href=&#34;#網頁瀏覽（page-view）&#34; class=&#34;headerlink&#34; title=&#34;網頁瀏覽（page_view）&#34;&gt;&lt;/a&gt;網頁瀏覽（page_view）&lt;/h3&gt;&lt;p&gt;在指定的時間區段內，所有使用者在網站或應用程式的網頁瀏覽（造訪）量；&lt;br&gt;其中使用者的分母根據 Client ID 計次，來得知網站有多少不重複使用者。&lt;/p&gt;
&lt;img src=&#34;/images/google-analytics-knowhow/2.png&#34; class=&#34;&#34; width=&#34;600&#34; height=&#34;200&#34; title=&#34;google-analytics-knowhow&#34;&gt;


&lt;h3 id=&#34;締結互動（user-engagement）&#34;&gt;&lt;a href=&#34;#締結互動（user-engagement）&#34; class=&#34;headerlink&#34; title=&#34;締結互動（user_engagement）&#34;&gt;&lt;/a&gt;締結互動（user_engagement）&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;The User engagement metric shows the time that your app screen was in the foreground or your web page was in focus. When your site or app is running but no page or screen is displayed, Analytics doesn’t collect the metric. The metric can help you understand when users actively use your website or app.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;google link What is user engagement on Google Analytics?&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;不負責任翻譯：&lt;br&gt;The User engagement 計量表示當你的應用程式或網站呈現在使用者畫面前景上並且被使用者聚焦，&lt;br&gt;與網站締結了互動行為，若應用程式或網站尚未載入完成或呈現出來，GA 不會蒐集該項指標。&lt;br&gt;這個計量可以幫助你了解目前應用程式或網站花了多少時間獲得使用者的聚焦，以及即時有多少活躍的使用者。&lt;/p&gt;
&lt;h5 id=&#34;互動活躍時間（engagement-time-msec）&#34;&gt;&lt;a href=&#34;#互動活躍時間（engagement-time-msec）&#34; class=&#34;headerlink&#34; title=&#34;互動活躍時間（engagement_time_msec）&#34;&gt;&lt;/a&gt;互動活躍時間（engagement_time_msec）&lt;/h5&gt;&lt;p&gt;計算使用者在與網站或應用程式締結互動之後開始計算，在網站上活躍的時間毫秒（msec）。&lt;/p&gt;
&lt;h3 id=&#34;campaign（活動分類）&#34;&gt;&lt;a href=&#34;#campaign（活動分類）&#34; class=&#34;headerlink&#34; title=&#34;campaign（活動分類）&#34;&gt;&lt;/a&gt;campaign（活動分類）&lt;/h3&gt;&lt;p&gt;可以在 GA 預設的 &lt;strong&gt;Click 事件&lt;/strong&gt;裡查閱的參數，若是透過外部廣告（例如 Google Ads）等方式進入你的網站或應用程式，&lt;br&gt;campaign　參數就會被記錄，通常會顯示（referral）或（organic），有三大分類，&lt;br&gt;有時會帶括號有時不會（不知為啥知道的人請解惑一下XD）。&lt;/p&gt;
&lt;h5 id=&#34;organic&#34;&gt;&lt;a href=&#34;#organic&#34; class=&#34;headerlink&#34; title=&#34;(organic)&#34;&gt;&lt;/a&gt;(organic)&lt;/h5&gt;&lt;p&gt;透過搜尋而來的自然流量（主動）。&lt;/p&gt;
&lt;h5 id=&#34;referral&#34;&gt;&lt;a href=&#34;#referral&#34; class=&#34;headerlink&#34; title=&#34;(referral)&#34;&gt;&lt;/a&gt;(referral)&lt;/h5&gt;&lt;p&gt;透過外部媒體網站進來（被動）瀏覽的使用者，也就是行銷常講的外連（外部連結）。&lt;/p&gt;
&lt;h5 id=&#34;none&#34;&gt;&lt;a href=&#34;#none&#34; class=&#34;headerlink&#34; title=&#34;(none)&#34;&gt;&lt;/a&gt;(none)&lt;/h5&gt;&lt;p&gt;直接進入網站的使用者，例如在 url 輸入網址。&lt;/p&gt;
&lt;h3 id=&#34;medium（媒介分類）&#34;&gt;&lt;a href=&#34;#medium（媒介分類）&#34; class=&#34;headerlink&#34; title=&#34;medium（媒介分類）&#34;&gt;&lt;/a&gt;medium（媒介分類）&lt;/h3&gt;&lt;p&gt;使用者透過甚麼媒介方式進來你的網站，類別同上：&lt;/p&gt;
&lt;h3 id=&#34;source（媒介-origin）&#34;&gt;&lt;a href=&#34;#source（媒介-origin）&#34; class=&#34;headerlink&#34; title=&#34;source（媒介 origin）&#34;&gt;&lt;/a&gt;source（媒介 origin）&lt;/h3&gt;&lt;p&gt;透過外部廣告進來的 url，例如透過 Google 搜尋進來的就會顯示 &lt;code&gt;https://www.google.com/&lt;/code&gt;；&lt;br&gt;透過外部網站進來的就會顯示外部網站的 Origin URL。&lt;/p&gt;
&lt;img src=&#34;/images/google-analytics-knowhow/5.png&#34; class=&#34;&#34; width=&#34;500&#34; height=&#34;200&#34; title=&#34;google-analytics-knowhow&#34;&gt;

&lt;h3 id=&#34;事件參數&#34;&gt;&lt;a href=&#34;#事件參數&#34; class=&#34;headerlink&#34; title=&#34;事件參數&#34;&gt;&lt;/a&gt;事件參數&lt;/h3&gt;&lt;p&gt;每個事件都有詳細參數可以閱覽，有機個是預設的（照順序），實際查看發現與官方文件的說明項目有出入。&lt;/p&gt;
&lt;h1 id=&#34;GA-如何計算一個互動的單位&#34;&gt;&lt;a href=&#34;#GA-如何計算一個互動的單位&#34; class=&#34;headerlink&#34; title=&#34;GA 如何計算一個互動的單位&#34;&gt;&lt;/a&gt;GA 如何計算一個互動的單位&lt;/h1&gt;&lt;h3 id=&#34;工作階段（Session-Start）&#34;&gt;&lt;a href=&#34;#工作階段（Session-Start）&#34; class=&#34;headerlink&#34; title=&#34;工作階段（Session Start）&#34;&gt;&lt;/a&gt;工作階段（Session Start）&lt;/h3&gt;&lt;p&gt;GA 的工作階段以 30 分鐘為一個單位，若這段期間使用者並未對網站進行任何互動（例如起來去廁所），&lt;br&gt;當前的工作階段就會結束。每個單位的工作流程可以包含多個互動事件（Event）或是從事商業行為，例如社交互動（Social Interaction）、電子商戶交易行為（Transaction），直到一個單位的工作階段結束（離開網站或是閒置超過 30 分鐘）。&lt;/p&gt;
&lt;h5 id=&#34;工作階段強制切割&#34;&gt;&lt;a href=&#34;#工作階段強制切割&#34; class=&#34;headerlink&#34; title=&#34;工作階段強制切割&#34;&gt;&lt;/a&gt;工作階段強制切割&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;只要時間來到&lt;strong&gt;隔日凌晨 00:00:00 時分&lt;/strong&gt;，無論當前的工作階段是否有持續進行互動，都會被強制切割成另一個新的工作階段。&lt;/li&gt;
&lt;li&gt;當使用者更換了網站的來源媒介（medium 例如從廣告點進來、重新搜尋網站進入），都會被強制切割成另一個新的工作階段，無論使用者是否有停止當前的工作階段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;到達頁面（UA-通用版稱呼）&#34;&gt;&lt;a href=&#34;#到達頁面（UA-通用版稱呼）&#34; class=&#34;headerlink&#34; title=&#34;到達頁面（UA 通用版稱呼）&#34;&gt;&lt;/a&gt;到達頁面（UA 通用版稱呼）&lt;/h3&gt;&lt;p&gt;每一個工作階段開始的第一個頁面。&lt;/p&gt;
&lt;h3 id=&#34;離開率&#34;&gt;&lt;a href=&#34;#離開率&#34; class=&#34;headerlink&#34; title=&#34;離開率&#34;&gt;&lt;/a&gt;離開率&lt;/h3&gt;&lt;p&gt;一個工作階段中「最後一個」瀏覽的網頁，在所有網頁瀏覽量的占比。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br&gt;&lt;a href=&#34;https://awoo.ai/zh-hant/blog/google-analytics-session/&#34;&gt;正確理解Google Analytics「工作階段」定義、計算、重要性&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="Google Analytics" />
        <category term="GA" />
        <category term="GA4" />
        <category term="Google Tag Manager" />
        <category term="GTM" />
        <updated>2022-10-09T06:20:19.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/28/restful-api-python/</id>
        <title>restful-api-python</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/28/restful-api-python/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&#34;安裝-python&#34;&gt;&lt;a href=&#34;#安裝-python&#34; class=&#34;headerlink&#34; title=&#34;安裝 python&#34;&gt;&lt;/a&gt;安裝 python&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;python 官方網站下載點&lt;/a&gt;&lt;br&gt;選擇 downloads 並且記得勾選 Add Python to PATH，就可以在終端機輸入&lt;code&gt;python3&lt;/code&gt;，並且使用囉！&lt;/p&gt;
&lt;h1 id=&#34;public-APIs&#34;&gt;&lt;a href=&#34;#public-APIs&#34; class=&#34;headerlink&#34; title=&#34;public APIs&#34;&gt;&lt;/a&gt;public APIs&lt;/h1&gt;&lt;p&gt;顧名思義就是開放 API（Open API），&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-08-28T07:29:29.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/20/zh-tw/gcp-project-switch/</id>
        <title>gcp-project-switch</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/20/zh-tw/gcp-project-switch/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在 GCP 上部屬不同專案時需要切換專案，根據專案 ID 來切換：&lt;/p&gt;
&lt;h1 id=&#34;查看專案-ID&#34;&gt;&lt;a href=&#34;#查看專案-ID&#34; class=&#34;headerlink&#34; title=&#34;查看專案 ID&#34;&gt;&lt;/a&gt;查看專案 ID&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;GCP&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;gcloud projects list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PROJECT_ID: XXX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NAME: baby-bill&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PROJECT_NUMBER: XXXXX&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;切換專案&#34;&gt;&lt;a href=&#34;#切換專案&#34; class=&#34;headerlink&#34; title=&#34;切換專案&#34;&gt;&lt;/a&gt;切換專案&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;GCP&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;gcloud config set project `PROJECT ID`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-08-20T10:52:22.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/20/typescript-why-use-it/</id>
        <title>typescript-why-use-it</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/20/typescript-why-use-it/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&#34;Typescript-is-a-superset-of-Javascript&#34;&gt;&lt;a href=&#34;#Typescript-is-a-superset-of-Javascript&#34; class=&#34;headerlink&#34; title=&#34;Typescript is a superset of Javascript&#34;&gt;&lt;/a&gt;Typescript is a superset of Javascript&lt;/h1&gt;&lt;p&gt;Typescript 提升的重點就是：優化了你的原生 Javascript 型別提示。&lt;br&gt;Typescript 是根基在 Javascript 語言之上的一個超集，他提供更強大的特點並且優化了 Javascript 的缺陷，使其運作與開發上有更大程度的提升，但 Typescript 不能在瀏覽器引擎上運作。&lt;br&gt;Typescript 是 Javascript 的升級版本，最終仍會編譯成 Javascript 提供瀏覽器運作，只是相當程度上增添了許多特性與優點，例如：&lt;/p&gt;
&lt;h4 id=&#34;在開發早期發現錯誤提示，能早點修復。&#34;&gt;&lt;a href=&#34;#在開發早期發現錯誤提示，能早點修復。&#34; class=&#34;headerlink&#34; title=&#34;在開發早期發現錯誤提示，能早點修復。&#34;&gt;&lt;/a&gt;在開發早期發現錯誤提示，能早點修復。&lt;/h4&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;addNumbers&lt;/span&gt; (num1, num2) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; num1 + num2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(addNumbers (&lt;span class=&#34;hljs-string&#34;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;2&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以上的代碼期望的結果是 &lt;code&gt;1+2 = 3&lt;/code&gt;，但是 JavaScript 本身的隱性型別轉換造成截然不同的結果，得到了 &lt;code&gt;23&lt;/code&gt;。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-08-20T06:42:17.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/20/seo-know-how/</id>
        <title>seo-know-how</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/20/seo-know-how/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;SEO 分為網站結構 &amp;amp; 內容&lt;br&gt;網站競品 新聞類型 SEO 結構不能輸別人&lt;/p&gt;
&lt;p&gt;搜尋引擎&lt;/p&gt;
&lt;h1 id=&#34;網站連結&#34;&gt;&lt;a href=&#34;#網站連結&#34; class=&#34;headerlink&#34; title=&#34;網站連結&#34;&gt;&lt;/a&gt;網站連結&lt;/h1&gt;&lt;h3 id=&#34;任何頁面必須可以內連&#34;&gt;&lt;a href=&#34;#任何頁面必須可以內連&#34; class=&#34;headerlink&#34; title=&#34;任何頁面必須可以內連&#34;&gt;&lt;/a&gt;任何頁面必須可以內連&lt;/h3&gt;&lt;p&gt;孤兒頁面對收錄到 SEO 非常扣分&lt;/p&gt;
&lt;h4 id=&#34;蜘蛛網結構&#34;&gt;&lt;a href=&#34;#蜘蛛網結構&#34; class=&#34;headerlink&#34; title=&#34;蜘蛛網結構&#34;&gt;&lt;/a&gt;蜘蛛網結構&lt;/h4&gt;&lt;p&gt;網站內部蜘蛛網結構的互連非常重要，越多就越能被 Google 搜尋到，會比提交來的重要&lt;/p&gt;
&lt;h3 id=&#34;權重高的網站外連&#34;&gt;&lt;a href=&#34;#權重高的網站外連&#34; class=&#34;headerlink&#34; title=&#34;權重高的網站外連&#34;&gt;&lt;/a&gt;權重高的網站外連&lt;/h3&gt;&lt;p&gt;由權重高的網站，例如新聞網站有連結過來就能大大提高收錄機會&lt;/p&gt;
&lt;h1 id=&#34;網站結構&#34;&gt;&lt;a href=&#34;#網站結構&#34; class=&#34;headerlink&#34; title=&#34;網站結構&#34;&gt;&lt;/a&gt;網站結構&lt;/h1&gt;&lt;h3 id=&#34;sitemap&#34;&gt;&lt;a href=&#34;#sitemap&#34; class=&#34;headerlink&#34; title=&#34;sitemap&#34;&gt;&lt;/a&gt;sitemap&lt;/h3&gt;&lt;p&gt;加入檢索隊列(Crawl Queue)的行為可以透過提交網站結構的 sitemap 至 google search console，而且不能造假也沒有無效的網頁連結（ex. 404、500 等）&lt;br&gt;sitemap是有上限的&lt;/p&gt;
&lt;h3 id=&#34;robots-txt&#34;&gt;&lt;a href=&#34;#robots-txt&#34; class=&#34;headerlink&#34; title=&#34;robots.txt&#34;&gt;&lt;/a&gt;robots.txt&lt;/h3&gt;&lt;p&gt;開發階段不想曝光的網頁可以設定 robots.txt 不被收錄，但並非百分百有效&lt;br&gt;最好是設定密碼登入去擋內容，或是不要上線&lt;/p&gt;
&lt;h1 id=&#34;domain-knowledge&#34;&gt;&lt;a href=&#34;#domain-knowledge&#34; class=&#34;headerlink&#34; title=&#34;domain knowledge&#34;&gt;&lt;/a&gt;domain knowledge&lt;/h1&gt;&lt;p&gt;領域專長&lt;br&gt;產業的核心知識 了解TA需求&lt;/p&gt;
&lt;h1 id=&#34;breadcrumb&#34;&gt;&lt;a href=&#34;#breadcrumb&#34; class=&#34;headerlink&#34; title=&#34;breadcrumb&#34;&gt;&lt;/a&gt;breadcrumb&lt;/h1&gt;&lt;p&gt;網站麵包屑&lt;/p&gt;
&lt;h1 id=&#34;you-may-like&#34;&gt;&lt;a href=&#34;#you-may-like&#34; class=&#34;headerlink&#34; title=&#34;you may like&#34;&gt;&lt;/a&gt;you may like&lt;/h1&gt;&lt;p&gt;你可能會喜歡的相關文章&lt;/p&gt;
&lt;p&gt;文章序號丟API 運算連結之間的關係(AI 資料工程師)&lt;/p&gt;
&lt;h1 id=&#34;js-做的連結不會收錄&#34;&gt;&lt;a href=&#34;#js-做的連結不會收錄&#34; class=&#34;headerlink&#34; title=&#34;js 做的連結不會收錄&#34;&gt;&lt;/a&gt;js 做的連結不會收錄&lt;/h1&gt;&lt;p&gt;可以追蹤：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;a href=&#34;https://example.com&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;a href=&#34;/relative/path/file&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;無法追蹤：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;a routerLink=&#34;some/path&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;span href=&#34;https://example.com&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;a onclick=&#34;goto(&#39;https://example.com&#39;)&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h1 id=&#34;網站更新頻率要勤&#34;&gt;&lt;a href=&#34;#網站更新頻率要勤&#34; class=&#34;headerlink&#34; title=&#34;網站更新頻率要勤&#34;&gt;&lt;/a&gt;網站更新頻率要勤&lt;/h1&gt;&lt;p&gt;經常更新的網站才會被 google 將排名提前&lt;/p&gt;
&lt;h1 id=&#34;UI-amp-UX-要好&#34;&gt;&lt;a href=&#34;#UI-amp-UX-要好&#34; class=&#34;headerlink&#34; title=&#34;UI &amp;amp; UX 要好&#34;&gt;&lt;/a&gt;UI &amp;amp; UX 要好&lt;/h1&gt;&lt;p&gt;網站體驗好 SEO 就會好，SEO 好廣告投入就可以降低&lt;/p&gt;
&lt;h1 id=&#34;更新時間&#34;&gt;&lt;a href=&#34;#更新時間&#34; class=&#34;headerlink&#34; title=&#34;更新時間&#34;&gt;&lt;/a&gt;更新時間&lt;/h1&gt;&lt;p&gt;網站的 sitemap 會註明網站更新時間，對 google 的 SEO 排名也有影響&lt;/p&gt;
&lt;h1 id=&#34;網站的-canonical-標準網址&#34;&gt;&lt;a href=&#34;#網站的-canonical-標準網址&#34; class=&#34;headerlink&#34; title=&#34;網站的 canonical 標準網址&#34;&gt;&lt;/a&gt;網站的 canonical 標準網址&lt;/h1&gt;&lt;p&gt;主網址會被 google 拿來計算收錄的頁面數量&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;link rel=&#34;canonical&#34; href=&#34;&#34; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;網頁未加入索引&#34;&gt;&lt;a href=&#34;#網頁未加入索引&#34; class=&#34;headerlink&#34; title=&#34;網頁未加入索引&#34;&gt;&lt;/a&gt;網頁未加入索引&lt;/h3&gt;&lt;p&gt;不同網址但內容一樣會扣分，記得設定 canonical&lt;/p&gt;
&lt;h1 id=&#34;基本要設定的&#34;&gt;&lt;a href=&#34;#基本要設定的&#34; class=&#34;headerlink&#34; title=&#34;基本要設定的&#34;&gt;&lt;/a&gt;基本要設定的&lt;/h1&gt;&lt;title&gt;網頁標題&lt;/title&gt;
&lt;meta name=&#34;description&#34; content=&#34;&#34;&gt;
// 設定網站縮圖
&lt;link rel=&#34;image_src&#34; href=&#34;&#34;&gt;

&lt;p&gt;可以設定的&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;meta content=&#34;&#34; name=&#34;copyright&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;meta content=&#34;&#34; name=&#34;author&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;要小心的&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;meta name=&#34;keywords&#34; content=&#34;關鍵字1, 關鍵字2&#34; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;社群媒體&#34;&gt;&lt;a href=&#34;#社群媒體&#34; class=&#34;headerlink&#34; title=&#34;社群媒體&#34;&gt;&lt;/a&gt;社群媒體&lt;/h1&gt;&lt;p&gt;可以透過&lt;a href=&#34;https://metatags.io/&#34;&gt;metatags&lt;/a&gt;協助產生網站的縮圖&lt;/p&gt;
&lt;h1 id=&#34;移除外部連結的權重&#34;&gt;&lt;a href=&#34;#移除外部連結的權重&#34; class=&#34;headerlink&#34; title=&#34;移除外部連結的權重&#34;&gt;&lt;/a&gt;移除外部連結的權重&lt;/h1&gt;&lt;p&gt;其目的在於告訴搜尋引擎不要索引抓取這個連結，同時也不要給予他權重。&lt;br&gt;Nofollow 反向連結是只將 &lt;code&gt;&amp;lt;a href=&#34;https://example.com.tw&#34;&amp;gt;Example&amp;lt;/a&amp;gt;&lt;/code&gt; 加入 &lt;code&gt;rel=&#34;nofollow&#34;&lt;/code&gt; 標籤&lt;br&gt;&lt;a href=&#34;https://example.com.tw&#34; ref=&#34;nofollow&#34;&gt;Example&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;使用者體驗&#34;&gt;&lt;a href=&#34;#使用者體驗&#34; class=&#34;headerlink&#34; title=&#34;使用者體驗&#34;&gt;&lt;/a&gt;使用者體驗&lt;/h1&gt;&lt;p&gt;內容要與主題相符&lt;/p&gt;
&lt;h1 id=&#34;https&#34;&gt;&lt;a href=&#34;#https&#34; class=&#34;headerlink&#34; title=&#34;https&#34;&gt;&lt;/a&gt;https&lt;/h1&gt;&lt;p&gt;cloudflare 有提供免費的 https &lt;/p&gt;
&lt;h1 id=&#34;AWD-AMP-PWA&#34;&gt;&lt;a href=&#34;#AWD-AMP-PWA&#34; class=&#34;headerlink&#34; title=&#34;AWD AMP PWA&#34;&gt;&lt;/a&gt;AWD AMP PWA&lt;/h1&gt;&lt;p&gt;提升行動裝置的網站架構亦可以提升網站體驗與速度&lt;/p&gt;
&lt;h1 id=&#34;網站核心體驗三大指標&#34;&gt;&lt;a href=&#34;#網站核心體驗三大指標&#34; class=&#34;headerlink&#34; title=&#34;網站核心體驗三大指標&#34;&gt;&lt;/a&gt;網站核心體驗三大指標&lt;/h1&gt;&lt;h3 id=&#34;LCP&#34;&gt;&lt;a href=&#34;#LCP&#34; class=&#34;headerlink&#34; title=&#34;LCP&#34;&gt;&lt;/a&gt;LCP&lt;/h3&gt;&lt;p&gt;最大內容繪製，2.5 秒可以渲染完畢&lt;/p&gt;
&lt;h3 id=&#34;FID&#34;&gt;&lt;a href=&#34;#FID&#34; class=&#34;headerlink&#34; title=&#34;FID&#34;&gt;&lt;/a&gt;FID&lt;/h3&gt;&lt;p&gt;首次輸入的延遲時間，頁面互動的反應時間&lt;/p&gt;
&lt;h3 id=&#34;CLS&#34;&gt;&lt;a href=&#34;#CLS&#34; class=&#34;headerlink&#34; title=&#34;CLS&#34;&gt;&lt;/a&gt;CLS&lt;/h3&gt;&lt;p&gt;累積版面配置轉移，還未讀取到的資料先將空間撐開（lazyload），避免使用者捲到的位置空間還未撐開，例如以下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;img width=&#34;200&#34; height=&#34;300&#34; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;SEO-v-s-廣告&#34;&gt;&lt;a href=&#34;#SEO-v-s-廣告&#34; class=&#34;headerlink&#34; title=&#34;SEO v.s 廣告&#34;&gt;&lt;/a&gt;SEO v.s 廣告&lt;/h1&gt;&lt;p&gt;在網站內放置廣告版位會對 SEO 扣分，但收入又需要靠廣告，是一種互相牴觸的生態&lt;/p&gt;
&lt;h1 id=&#34;title&#34;&gt;&lt;a href=&#34;#title&#34; class=&#34;headerlink&#34; title=&#34;title&#34;&gt;&lt;/a&gt;title&lt;/h1&gt;&lt;p&gt;網頁的 title 都要放置網站名稱，例如：&lt;br&gt;網頁的內容概要、網站名稱&lt;/p&gt;
&lt;h1 id=&#34;熱門關鍵字&#34;&gt;&lt;a href=&#34;#熱門關鍵字&#34; class=&#34;headerlink&#34; title=&#34;熱門關鍵字&#34;&gt;&lt;/a&gt;熱門關鍵字&lt;/h1&gt;&lt;p&gt;倘若 SEO 好熱門關鍵字也可以提升排名&lt;/p&gt;
&lt;h1 id=&#34;SVG-圖片格式&#34;&gt;&lt;a href=&#34;#SVG-圖片格式&#34; class=&#34;headerlink&#34; title=&#34;SVG 圖片格式&#34;&gt;&lt;/a&gt;SVG 圖片格式&lt;/h1&gt;&lt;p&gt;img 有 alt 可以幫助搜尋引擎了解圖片內容，SVG 則可以加上 title 以及 describe 等同於 img 的 alt，結構如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;svg height=&#34;100&#34; width=&#34;100&#34; aria-labelledby=&#34;svgTitle svgDesc&#34; role=&#34;img&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;title id=&#34;svgTitle&#34;&amp;gt;Circle&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;desc id=&#34;svgDesc&#34;&amp;gt;This is a red circle&amp;lt;/desc&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;circle cx=&#34;50&#34; cy=&#34;50&#34; r=&#34;40&#34; stroke=&#34;black&#34; stroke-width=&#34;3&#34; fill=&#34;red&#34; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/svg&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;SERP-結構化資料&#34;&gt;&lt;a href=&#34;#SERP-結構化資料&#34; class=&#34;headerlink&#34; title=&#34;SERP 結構化資料&#34;&gt;&lt;/a&gt;SERP 結構化資料&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data?hl=zh-tw&#34;&gt;參考資料&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;JSON-LD&#34;&gt;&lt;a href=&#34;#JSON-LD&#34; class=&#34;headerlink&#34; title=&#34;JSON-LD&#34;&gt;&lt;/a&gt;JSON-LD&lt;/h3&gt;&lt;p&gt;結構化資料的格式，例如 Google 提供的範例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;title&amp;gt;Apple Pie by Grandma&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;script type=&#34;application/ld+json&#34;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;@context&#34;: &#34;https://schema.org/&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;@type&#34;: &#34;Recipe&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;name&#34;: &#34;Apple Pie by Grandma&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;author&#34;: &#34;Elaine Smith&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;image&#34;: &#34;http://images.edge-generalmills.com/56459281-6fe6-4d9d-984f-385c9488d824.jpg&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;description&#34;: &#34;A classic apple pie.&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;aggregateRating&#34;: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;@type&#34;: &#34;AggregateRating&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;ratingValue&#34;: &#34;4.8&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;reviewCount&#34;: &#34;7462&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;bestRating&#34;: &#34;5&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;worstRating&#34;: &#34;1&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;prepTime&#34;: &#34;PT30M&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;totalTime&#34;: &#34;PT1H30M&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;recipeYield&#34;: &#34;8&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;nutrition&#34;: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;@type&#34;: &#34;NutritionInformation&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;calories&#34;: &#34;512 calories&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &#34;recipeIngredient&#34;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;1 box refrigerated pie crusts, softened as directed on box&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &#34;6 cups thinly sliced, peeled apples (6 medium)&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;顯示的內容：&lt;/p&gt;
&lt;img src=&#34;/images/seo-know-how/3.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;seo-know-how&#34;&gt;

&lt;p&gt;驗證是否有誤：&lt;br&gt;&lt;a href=&#34;https://search.google.com/test/rich-results&#34;&gt;驗證連結&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;參考網站：&lt;br&gt;&lt;a href=&#34;https://tools.wingzero.tw/article/sn/1187&#34;&gt;紅色死神 DETOOLS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-08-20T02:26:25.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/09/zh-tw/http-methods-idempotent/</id>
        <title>RESTful API 方法觀念介紹 - idempotent</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/09/zh-tw/http-methods-idempotent/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;RESTful API 呼叫的方法中，離不開四個主軸 CRUD，CREATE、READ/RETREIVE、UPDATE 還有 DELETE。&lt;br&gt;而其中就有分是否為 &lt;strong&gt;Idempotent 的方法&lt;/strong&gt;，甚麼意思呢？&lt;/p&gt;
&lt;h1 id=&#34;甚麼是Idempotent（冪等）&#34;&gt;&lt;a href=&#34;#甚麼是Idempotent（冪等）&#34; class=&#34;headerlink&#34; title=&#34;甚麼是Idempotent（冪等）&#34;&gt;&lt;/a&gt;甚麼是Idempotent（冪等）&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;A request method is considered “idempotent” if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看為只覺得在母鯊大，沒關係我們繼續看下去：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Of the request methods defined by this specification, PUT, DELETE, and safe request methods are idempotent.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Lauviah0622&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://lance.coderbridge.io/2021/06/06/what-is-safe-method-and-indempotent-methods/&#34;&gt;[極短篇] HTTP 的 Safe method 還有 Idempotent method&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;dempotent（冪等）的方法不管你做一次、兩次乃至一百次，對於伺服器端資料的結果都一樣，是安全而沒有副作用的，可以安心服用；&lt;br&gt;相反的非 Idempotent 的方法則是需要謹慎考慮的、會改動伺服器資料庫的、有副作用的，也就是非安全請求。&lt;/p&gt;
&lt;p&gt;我們來看看更精簡好懂的解釋：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Idempotent operations produce the same result even when the operation is repeated many times. The result of the 2nd, 3rd, and 1,000th repeat of the operation will return exactly the same result as the 1st time.&lt;br&gt;冪等運算是指無論操作多少次結果都會與第一次相同。&lt;/p&gt;
&lt;p&gt;For example, simple mathematical examples of idempotency include:&lt;/p&gt;
&lt;p&gt;x + 0;&lt;br&gt;x = 5;&lt;/p&gt;
&lt;p&gt;In the first example, adding zero will never change the result, regardless of how many times you do it. In the second, x is always 5. Again, this is the case, regardless of how many times you perform the operation. Both of these examples describe an operation that is idempotent.&lt;/p&gt;
&lt;p&gt;以上兩個例子都說明了這兩個表達是無論執行幾次都會是相同結果，這就是 Idempotent（冪等）。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;James E.&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://blog.dreamfactory.com/what-is-idempotency/&#34;&gt;what-is-idempotency&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;h1 id=&#34;冪等不等於安全請求&#34;&gt;&lt;a href=&#34;#冪等不等於安全請求&#34; class=&#34;headerlink&#34; title=&#34;冪等不等於安全請求&#34;&gt;&lt;/a&gt;冪等不等於安全請求&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;The concepts of ‘idempotent methods’ and ‘safe methods’ are often confused. A safe method does not change the value that is returned, it reads – but it never writes.&lt;br&gt;Therefore, all safe methods are idempotent, but not all idempotent methods are safe.&lt;/p&gt;
&lt;p&gt;HTTP methods include:&lt;br&gt;POST – Creates a new resource. POST is not idempotent and it is not safe.&lt;br&gt;GET – Retrieves a resource. GET is idempotent and it is safe.&lt;br&gt;HEAD – Retrieves a resource (without response body). HEAD is idempotent and it is safe&lt;br&gt;PUT – Updates/replaces a resource. PUT is idempotent but it is not safe&lt;br&gt;PATCH – Partially updates a resource. PATCH is not idempotent and it is not safe.&lt;br&gt;DELETE – Deletes a resource. DELETE is idempotent but it is not safe.&lt;br&gt;TRACE – Performs a loop-back test. TRACE is idempotent but it is not safe.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;James E.&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://blog.dreamfactory.com/what-is-idempotency/&#34;&gt;what-is-idempotency&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;安全請求只會讀取，所以都是冪等的，但冪等方法不一定都是安全請求。&lt;/p&gt;
&lt;p&gt;學術的部份我們就此打住，了解一下冪等之於 RESTful API 的意義。&lt;/p&gt;
&lt;h1 id=&#34;idempotent-methods-冪等的方法&#34;&gt;&lt;a href=&#34;#idempotent-methods-冪等的方法&#34; class=&#34;headerlink&#34; title=&#34;idempotent methods 冪等的方法&#34;&gt;&lt;/a&gt;idempotent methods 冪等的方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;HEAD（只讀取資料頭而忽略身體）&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;li&gt;OPTIONS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上方式無論發幾次 request，結果都等同於一次。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;通常 DELETE 會帶上 id，所以刪除 1 次和刪除 100 次是一樣的，server 那邊找不到 id 操作就會被忽略。&lt;br&gt;而 PUT 也一樣，PUT 代表替代的 http 操作，你發了 1 次 request 已經取代了內容後，那即使再發 100 次也只是替代一樣的內容。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Lauviah0622&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://lance.coderbridge.io/2021/06/06/what-is-safe-method-and-indempotent-methods/&#34;&gt;[極短篇] HTTP 的 Safe method 還有 Idempotent method&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;h1 id=&#34;Not-idempotent-methods-非冪等的方法&#34;&gt;&lt;a href=&#34;#Not-idempotent-methods-非冪等的方法&#34; class=&#34;headerlink&#34; title=&#34;Not idempotent methods 非冪等的方法&#34;&gt;&lt;/a&gt;Not idempotent methods 非冪等的方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;DISPATCH&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上方法每執行一次就會造成資料變動，但並非每種使用方式都是非冪等，端看 request 的目的是在「修改」還是「增加」，修改可能並不會更改內存量（memory），但是增加就不同了，它也是修改但是擴大了內存量（變多了）：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;PATCH 在語意上代表著修改資料，換句話說可能這樣：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATCH http://blog.com/post?id=1 body {     title: &#39;new title&#39; } &lt;/code&gt;&lt;br&gt;發了 100 次和 1 次標題都是同樣的 new title。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATCH http:shop.com/item/add?id=1 body {     number: 10 }&lt;/code&gt;&lt;br&gt;requst 代表的是增加 10 個 item 的數量。這種情況下也符合語意（修改資料），但就不符合 Idempotent 了，100 次會新增 1000 個。那 POST 就不用提，一次和 100 次肯定是不一樣的。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Lauviah0622&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://lance.coderbridge.io/2021/06/06/what-is-safe-method-and-indempotent-methods/&#34;&gt;[極短篇] HTTP 的 Safe method 還有 Idempotent method&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;h1 id=&#34;結語&#34;&gt;&lt;a href=&#34;#結語&#34; class=&#34;headerlink&#34; title=&#34;結語&#34;&gt;&lt;/a&gt;結語&lt;/h1&gt;&lt;p&gt;讓我最意外的是 DELETE 居然是冪等方法，原因在於無論 request 幾次都只刪同一筆資料（認 id）這個觀念，與以前認為 DELETE 應該會每次刪除不同資料的想法大相逕庭。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-08-09T07:14:24.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/09/zh-tw/vuetify-slot-vhtml/</id>
        <title>如何在 vuetify 元件中渲染 v-html</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/09/zh-tw/vuetify-slot-vhtml/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/vuetify-slot-vhtml/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;vuetify-slot-vhtml&#34;&gt;
&lt;p&gt;使用 vuetify 元件時常有的狀況劇就是 - 標題的 UI 設計需要客製化，例如放上 fontawesome 的 icon，但你的元件是 vuetify 父元件（v-select），客製的對象是迴圈後的子元件（選單下的選項 v-selection），這時候要如何成功渲染 fontawesome 的 icon ?&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;vuetify&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;v-select&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :items=&lt;span class=&#34;hljs-string&#34;&gt;&#34;items&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    label=&lt;span class=&#34;hljs-string&#34;&gt;&#34;Standard&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;&amp;lt;/v-select&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;使用-lt-i-gt-lt-i-gt-標籤&#34;&gt;&lt;a href=&#34;#使用-lt-i-gt-lt-i-gt-標籤&#34; class=&#34;headerlink&#34; title=&#34;使用 &lt;i&gt;&lt;/i&gt; 標籤&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt; 標籤&lt;/h1&gt;&lt;p&gt;目前可以知道的小撇步就是 fontawesome 的 icon 要使用 vue v-html 渲染，必須使用 &lt;code&gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt; 標籤才能成功，不能放入 vuetify  &lt;code&gt;&amp;lt;v-icon&amp;gt;&amp;lt;/v-icon&amp;gt;&lt;/code&gt;，無法正確編譯成 html。&lt;/p&gt;
&lt;h1 id=&#34;在父元件內使用-v-slot&#34;&gt;&lt;a href=&#34;#在父元件內使用-v-slot&#34; class=&#34;headerlink&#34; title=&#34;在父元件內使用 v-slot&#34;&gt;&lt;/a&gt;在父元件內使用 v-slot&lt;/h1&gt;&lt;p&gt;可以知道目前的元件結構會是這樣的：&lt;br&gt;v-select（父）&lt;br&gt;        ｜&lt;br&gt;    v-selection（子）&lt;/p&gt;
&lt;p&gt;選項是這樣：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    { &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&#34;0&#34;&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;text&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;lt;i class=&#34;&lt;/span&gt;fab fa-apple&lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;gt;&amp;lt;/i&amp;gt; apple&#34;&lt;/span&gt; },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    { &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&#34;1&#34;&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;text&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;lt;i class=&#34;&lt;/span&gt;fab fa-google-drive&lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;gt;&amp;lt;/i&amp;gt; google&#34;&lt;/span&gt; },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;vuetify 父元件（v-select）透過 props items 選項的陣列可以使用 v-slot 轉換成 html 模板傳入：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Override the item and selection slots, and use v-html.&lt;br&gt;參考網址：&lt;a href=&#34;https://stackoverflow.com/questions/56665185/show-raw-html-in-vuetify-v-select&#34;&gt;https://stackoverflow.com/questions/56665185/show-raw-html-in-vuetify-v-select&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;vue-2-版本&#34;&gt;&lt;a href=&#34;#vue-2-版本&#34; class=&#34;headerlink&#34; title=&#34;vue 2 版本&#34;&gt;&lt;/a&gt;vue 2 版本&lt;/h3&gt;&lt;p&gt;由於子元件會有 default 選項，要使用插槽針對 &lt;strong&gt;selection&lt;/strong&gt; 修改；&lt;br&gt;而下拉選項要使用插槽針對 &lt;strong&gt;item&lt;/strong&gt; 修改。&lt;/p&gt;
&lt;h5 id=&#34;寫法-1&#34;&gt;&lt;a href=&#34;#寫法-1&#34; class=&#34;headerlink&#34; title=&#34;寫法 1&#34;&gt;&lt;/a&gt;寫法 1&lt;/h5&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;slot 範例 1&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;v-select :items=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-slot:item&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;{item}&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-html&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item.text&#39;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-slot:selection&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;{item}&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-html&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item.text&#39;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/v-select&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&#34;寫法-2&#34;&gt;&lt;a href=&#34;#寫法-2&#34; class=&#34;headerlink&#34; title=&#34;寫法 2&#34;&gt;&lt;/a&gt;寫法 2&lt;/h5&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;slot 範例 1&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;v-select :items=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-slot:item&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;{item}&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-html&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item.text&#39;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-slot:selection&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;{item}&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-html&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item.text&#39;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/v-select&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;簡潔版本&#34;&gt;&lt;a href=&#34;#簡潔版本&#34; class=&#34;headerlink&#34; title=&#34;簡潔版本&#34;&gt;&lt;/a&gt;簡潔版本&lt;/h3&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;slot 範例 2&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;v-select :items=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;slot&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item&#39;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;slot-scope&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;{item}&#39;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-html&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item.text&#39;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/v-select&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;vue-3-版本&#34;&gt;&lt;a href=&#34;#vue-3-版本&#34; class=&#34;headerlink&#34; title=&#34;vue 3 版本&#34;&gt;&lt;/a&gt;vue 3 版本&lt;/h3&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;slot 範例 3&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template #item=&lt;span class=&#34;hljs-string&#34;&gt;&#39;{item}&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-html&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#39;item.text&#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;vuetify-api-說明&#34;&gt;&lt;a href=&#34;#vuetify-api-說明&#34; class=&#34;headerlink&#34; title=&#34;vuetify api 說明&#34;&gt;&lt;/a&gt;vuetify api 說明&lt;/h1&gt;&lt;p&gt;在每個元件的 api 文件下方都有提供現成的插槽可以使用：&lt;/p&gt;
&lt;img src=&#34;/images/vuetify-slot-vhtml/1.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;vuetify-slot-vhtml&#34;&gt;&lt;/body&gt;&lt;/html&gt;</content>
        <category term="vue" />
        <category term="vuetify" />
        <category term="html" />
        <updated>2022-08-09T04:09:43.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/07/zh-tw/git-remove-submodule/</id>
        <title>git 移除 submodule</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/07/zh-tw/git-remove-submodule/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/git-remove-submodule/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;git-remove-submodule&#34;&gt;
&lt;h1 id=&#34;git-submodule&#34;&gt;&lt;a href=&#34;#git-submodule&#34; class=&#34;headerlink&#34; title=&#34;git submodule&#34;&gt;&lt;/a&gt;git submodule&lt;/h1&gt;&lt;p&gt;在部屬 hexo 部落格到雲端 github 時，發現主題下的 minos git status 呈現 untracked 的狀態，搜尋後才知道該主題是 clone 遠端下來的，自動會變成一個子模塊（submodule），對於習慣專案開發的我來說在客製化後不能同步實在很不方便，還是喜歡一整包放在同一個 repository 方便管理。&lt;/p&gt;
&lt;img src=&#34;/images/git-remove-submodule/1.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;git-remove-submodule&#34;&gt;

&lt;p&gt;以下記錄自己如何將修改後的 minos 資料夾：&lt;/p&gt;
&lt;h3 id=&#34;移除-git-子模塊快取&#34;&gt;&lt;a href=&#34;#移除-git-子模塊快取&#34; class=&#34;headerlink&#34; title=&#34;移除 git 子模塊快取&#34;&gt;&lt;/a&gt;移除 git 子模塊快取&lt;/h3&gt;&lt;p&gt;以下的指令可以清除子模塊的 git 紀錄：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;git cmd&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git rm --cached -f ./themes/minos&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;重新加入索引&#34;&gt;&lt;a href=&#34;#重新加入索引&#34; class=&#34;headerlink&#34; title=&#34;重新加入索引&#34;&gt;&lt;/a&gt;重新加入索引&lt;/h3&gt;&lt;p&gt;將剛才取消子模塊的 git 重新排隊至專案包中，我比較懶惰直接整包加：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;git cmd&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;再檢視一遍 vs code 之後就會看到檔案被追蹤到了！&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="git" />
        <category term="hexo" />
        <category term="submodule" />
        <updated>2022-08-07T08:07:24.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/07/zh-tw/wordpress-get-started/</id>
        <title>開始我的第一個 wordpress 網站</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/07/zh-tw/wordpress-get-started/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&#34;第一步-產生-ip-位址&#34;&gt;&lt;a href=&#34;#第一步-產生-ip-位址&#34; class=&#34;headerlink&#34; title=&#34;第一步 - 產生 ip 位址&#34;&gt;&lt;/a&gt;第一步 - 產生 ip 位址&lt;/h1&gt;&lt;p&gt;首先要租賃一台伺服器提供 ip，可以考慮較優惠的主機廠商：遠振或 bluehost。&lt;br&gt;要注意的是，一個 domain 可以放置很多網站資料夾，並且設定sub-domian。&lt;/p&gt;
&lt;h1 id=&#34;第二步-DNS-註冊&#34;&gt;&lt;a href=&#34;#第二步-DNS-註冊&#34; class=&#34;headerlink&#34; title=&#34;第二步 - DNS 註冊&#34;&gt;&lt;/a&gt;第二步 - DNS 註冊&lt;/h1&gt;&lt;p&gt;ip 設定好之後就可以將網域指過來指定的 DNS 網域商：&lt;br&gt;中華電信提供的 .tw　較便宜，而 godaddy 則是 .com 較便宜。&lt;/p&gt;
&lt;h1 id=&#34;第三步-cdn-分散流量&#34;&gt;&lt;a href=&#34;#第三步-cdn-分散流量&#34; class=&#34;headerlink&#34; title=&#34;第三步 - cdn 分散流量&#34;&gt;&lt;/a&gt;第三步 - cdn 分散流量&lt;/h1&gt;&lt;p&gt;常用的 cdn 廠商像是 cloudflare，可以註冊一個離主機近的（例如東京）cdn 位址，其他供應商例如 sugarhost 很便宜但連線較慢。&lt;/p&gt;
&lt;h3 id=&#34;CDN-原理&#34;&gt;&lt;a href=&#34;#CDN-原理&#34; class=&#34;headerlink&#34; title=&#34;CDN 原理&#34;&gt;&lt;/a&gt;CDN 原理&lt;/h3&gt;&lt;p&gt;cdn 是把 DNS 轉向給 DNS 廠商（cloudflare），透過 DNS 指向將流量倒過去 cloudflare，在第一次 cache 過網站靜態資源後，第二次就可以直接提取cdn 伺服器上 cache　的資源以減少流量費用。&lt;/p&gt;
&lt;h3 id=&#34;設定細節&#34;&gt;&lt;a href=&#34;#設定細節&#34; class=&#34;headerlink&#34; title=&#34;設定細節&#34;&gt;&lt;/a&gt;設定細節&lt;/h3&gt;&lt;h5 id=&#34;資源類型&#34;&gt;&lt;a href=&#34;#資源類型&#34; class=&#34;headerlink&#34; title=&#34;資源類型&#34;&gt;&lt;/a&gt;資源類型&lt;/h5&gt;&lt;p&gt;通常都會設定 &lt;strong&gt;A 類型&lt;/strong&gt;以設定網址（url）指向，例如 mailgun 的寄信功能。&lt;/p&gt;
&lt;h5 id=&#34;防堵資安問題&#34;&gt;&lt;a href=&#34;#防堵資安問題&#34; class=&#34;headerlink&#34; title=&#34;防堵資安問題&#34;&gt;&lt;/a&gt;防堵資安問題&lt;/h5&gt;&lt;p&gt;cloudflare 設定其中一樣可以開啟 ddos -&amp;gt; under Attack 來保護網站資源。&lt;br&gt;也可以手動清除特定檔案，例如圖片的 cache 來重新抓取檔案。&lt;/p&gt;
&lt;h1 id=&#34;第四步-掛載-wordpress&#34;&gt;&lt;a href=&#34;#第四步-掛載-wordpress&#34; class=&#34;headerlink&#34; title=&#34;第四步 - 掛載 wordpress&#34;&gt;&lt;/a&gt;第四步 - 掛載 wordpress&lt;/h1&gt;&lt;p&gt;wordpress 可以當作是一個 php 建構而成的後端框架應用，串接方式有兩種：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接使用 wordpress hook 來渲染資料（前後端合併）。&lt;/li&gt;
&lt;li&gt;撰寫自己的前端框架（例如 vue），撰寫自己的 API（前後端分離）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;建立步驟&#34;&gt;&lt;a href=&#34;#建立步驟&#34; class=&#34;headerlink&#34; title=&#34;建立步驟&#34;&gt;&lt;/a&gt;建立步驟&lt;/h3&gt;&lt;p&gt;到  &lt;a href=&#34;https://tw.wordpress.org/download/&#34;&gt;wordpress&lt;/a&gt; 官方網站下載檔案，上傳到自己的網域 server。&lt;/p&gt;
&lt;img src=&#34;/images/wordpress-get-started/14.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;wordpress-download&#34;&gt;
&lt;p&gt;上傳後打開網站，會有一個 UI 介面可以直接設定 wordpress 與網站資料，config 需要設定資料庫帳號密碼：&lt;/p&gt;
&lt;p&gt;要注意的是 wordpress 權限身分須從 root 改成 www-data，才能變成網站系統管理員使用 wordpress 後台。&lt;/p&gt;
&lt;!-- 行情 $ 25000 (使用佈景主題)
客製化算一頁
定時備份以免網站被駭客
租 GCP 靜態硬碟 
google 硬碟版本管理 資源回收桶保留30 天
flicker

設定 config 檔案 
比較好的後台c panel 要錢
dns 代管要 https 要使用 flexible SSL for cloudflare

一類有分類的文章 slug 需要代稱(英文的)
獨立頁面 客製化
siteliner 檢查有沒有壞掉的連結與重複的內容
duplicate page
報價高一點
附加的css
減少做重複的事情
在 wordpress 上做前後端分離 --&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="wordpress" />
        <category term="dns" />
        <category term="cdn" />
        <updated>2022-08-07T02:02:29.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/05/zh-tw/hexo-rss/</id>
        <title>Hexo RSS 自動產生器</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/05/zh-tw/hexo-rss/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;RSS 訂閱功能越來越夯，可以即時通知訂閱戶更新的文章內容，增加回流的流量與網站的熱度，chrome 也有提供 RSS reader 的外掛功能直接讀取 RSS 檔案。&lt;br&gt;既然建立好了自己的部落格怎麼可以沒有 RSS XD?&lt;/p&gt;
&lt;p&gt;先前在專案包嘗試使用 hexo-generator-feed 套件，但是建立出來的 atom.xml 檔案會出現亂碼，後來找到一個套件甚至支援 json 與 rss 格式：&lt;/p&gt;
&lt;h1 id=&#34;安裝-Hexo-seed-套件&#34;&gt;&lt;a href=&#34;#安裝-Hexo-seed-套件&#34; class=&#34;headerlink&#34; title=&#34;安裝 Hexo seed 套件&#34;&gt;&lt;/a&gt;安裝 Hexo seed 套件&lt;/h1&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install --save hexo-feed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;檔案格式&#34;&gt;&lt;a href=&#34;#檔案格式&#34; class=&#34;headerlink&#34; title=&#34;檔案格式&#34;&gt;&lt;/a&gt;檔案格式&lt;/h3&gt;&lt;p&gt;hexo-feed 可以設定三種文件格式：atom、json 還有 rss，建立的模板可以透過專案包根目錄的 _config.yml 去設定模板的 path（template）：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;_config.yml&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;feed&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;limit&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;order_by&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;-date&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;tag_dir&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;tag&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;category_dir&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;category&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;rss&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;enable&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;themes/layout/template/rss.ejs&#34;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;output&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;rss.xml&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;atom&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;enable&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;themes/layout/template/atom.ejs&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;output&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;atom.xml&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;jsonFeed&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;enable&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;themes/layout/template/json.ejs&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;output&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#34;feed.json&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;模板內容&#34;&gt;&lt;a href=&#34;#模板內容&#34; class=&#34;headerlink&#34; title=&#34;模板內容&#34;&gt;&lt;/a&gt;模板內容&lt;/h3&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;atom&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&#34;1.0&#34;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;feed&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;http://www.w3.org/2005/Atom&#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;%= config.url %&amp;gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;%= config.title %&amp;gt;&amp;lt;%= tag ? ` • Posts by &#34;${tag}&#34; tag` : &#39;&#39; %&amp;gt;&amp;lt;%= category ? ` • Posts by &#34;${category}&#34; category` : &#39;&#39; %&amp;gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;lt;%= config.url %&amp;gt;&#34;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;updated&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;%= moment(lastBuildDate).toISOString() %&amp;gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;updated&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &amp;lt;%_ for (const { name } of (tags || [])) { _%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;category&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;term&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;lt;%= name %&amp;gt;&#34;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &amp;lt;%_ } _%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &amp;lt;%_ for (const post of posts) { _%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;%= post.permalink %&amp;gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;%= post.title %&amp;gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;rel&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;alternate&#34;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;lt;%= post.permalink %&amp;gt;&#34;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;html&#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;%= post.content %&amp;gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;content&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &amp;lt;%_ for (const { name } of (post.tags ? post.tags.toArray() : [])) { _%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;category&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;term&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;lt;%= name %&amp;gt;&#34;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &amp;lt;%_ } _%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;updated&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;%= moment(post.date).toISOString() %&amp;gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;updated&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;    &amp;lt;%_ } _%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;feed&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;</content>
        <category term="hexo" />
        <category term="rss" />
        <updated>2022-08-05T07:39:34.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/08/02/zh-tw/hello-world/</id>
        <title>感謝您的閱讀</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/08/02/zh-tw/hello-world/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;這裡撰寫的都是一些自己在前端之路上每天一小步的學習，希望透過記錄與陳述來加強學習成效以及融會貫通的能力，文章內有任何問題歡迎一起討論呦!&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-08-01T16:03:26.680Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-value/</id>
        <title>克服 Javascript 的奇怪部分 原始型別</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-value/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-value/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-primitive-type&#34;&gt;
&lt;p&gt;只要不是物件型別的值都可以看做是原始型別，例如：&lt;/p&gt;
&lt;h1 id=&#34;undefined&#34;&gt;&lt;a href=&#34;#undefined&#34; class=&#34;headerlink&#34; title=&#34;undefined&#34;&gt;&lt;/a&gt;undefined&lt;/h1&gt;&lt;p&gt;當一個變數還未指派任何值之前，記憶體位置會被賦予一個 undefied 的值，通常是 Javascript 引擎指派的，應該避免將任何值的預設值設定為 undefined，避免與 Hoisting 行為混淆了。&lt;/p&gt;
&lt;h1 id=&#34;null&#34;&gt;&lt;a href=&#34;#null&#34; class=&#34;headerlink&#34; title=&#34;null&#34;&gt;&lt;/a&gt;null&lt;/h1&gt;&lt;p&gt;若需要再資料回來之前給予判斷，可以將變數設定為 null 來表示該變數還未拿到任何值，也非 Javascript 引擎指派的值。&lt;/p&gt;
&lt;h1 id=&#34;boolean&#34;&gt;&lt;a href=&#34;#boolean&#34; class=&#34;headerlink&#34; title=&#34;boolean&#34;&gt;&lt;/a&gt;boolean&lt;/h1&gt;&lt;p&gt;true 或 false 的判斷型別，值得注意的是當值存在 localstorage 或者 cookie 時應避免儲存 true 或 false，轉換過程會強制變成 string 而造成錯誤的判斷。&lt;/p&gt;
&lt;h1 id=&#34;number&#34;&gt;&lt;a href=&#34;#number&#34; class=&#34;headerlink&#34; title=&#34;number&#34;&gt;&lt;/a&gt;number&lt;/h1&gt;&lt;p&gt;唯一的數字型別（numeric），不同於其他語言可能具有細緻的數字型別，例如 interger 或是 demicals，Javascript 只有一個 number type，為&lt;strong&gt;浮點運算（floating point number）&lt;/strong&gt;，這種運算法為一個有效數字加上冪數來表示，電腦本身的二進制無法實現十進制的數字精確性，會造成數字計算上浮點位數的不正確，只能計算出近似值而已。&lt;/p&gt;
&lt;h1 id=&#34;string&#34;&gt;&lt;a href=&#34;#string&#34; class=&#34;headerlink&#34; title=&#34;string&#34;&gt;&lt;/a&gt;string&lt;/h1&gt;&lt;p&gt;字串型別，一串使用雙引號或單引號標記起來的文字。&lt;/p&gt;
&lt;h1 id=&#34;symbol&#34;&gt;&lt;a href=&#34;#symbol&#34; class=&#34;headerlink&#34; title=&#34;symbol&#34;&gt;&lt;/a&gt;symbol&lt;/h1&gt;&lt;p&gt;ES6 引入的新原始型別，用來表示一個獨一無二的值。產生的原因來自於物件的屬性通常都是字串（property），這樣容易造就重複的屬性而衝突，新的符號型別（symbol）於是誕生，兩個 symbol 永遠不會相等，是絕對的獨一無二。ES6 允許使用表達式 (expression) 作為屬性的名稱，語法是將 expression 放在中括號 [ ] 裡面：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;symbol&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; s = &lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; obj = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [s]: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <category term="type" />
        <updated>2022-07-30T09:08:20.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-types/</id>
        <title>克服 Javascript 的奇怪部分 型別</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-types/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-dynamic-typing/0.png&#34; class=&#34;&#34; title=&#34;dynamic-typing&#34;&gt;
&lt;h1 id=&#34;Dynamic-Typing&#34;&gt;&lt;a href=&#34;#Dynamic-Typing&#34; class=&#34;headerlink&#34; title=&#34;Dynamic Typing&#34;&gt;&lt;/a&gt;Dynamic Typing&lt;/h1&gt;&lt;p&gt;Javascript 的型別為動態型別（Dynamic Typing），不同於 C# 等強型別語言的靜態型別（Static Typing），無須指派型別而是在引擎執行的階段（at runtime）辨認變數記憶體內的型別為何：&lt;/p&gt;
&lt;blockquote class=&#34;colorquote info&#34;&gt;&lt;p&gt;Dynamically-typed languages are those (like JavaScript) where the interpreter assigns variables a type at runtime based on the variable’s value at the time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這有可能導致一個變數在每次程式執行的結果都產生不同的型別（例如 == 型別隱式轉換），而造成不如預期的結果，所以使用三等號是比較良好的撰寫習慣。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <category term="type" />
        <updated>2022-07-30T08:35:45.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/07/24/zh-tw/js-weird-parts-asynchronous/</id>
        <title>克服 Javascript 的奇怪部分 如何執行非同步</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/07/24/zh-tw/js-weird-parts-asynchronous/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-asynchronous/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;asynchronous&#34;&gt;

&lt;p&gt;瀏覽器在運作的時候有三大功能要執行：render engine 畫面渲染 -&amp;gt; JavaScript 引擎 -&amp;gt; Http Request。&lt;/p&gt;
&lt;blockquote class=&#34;colorquote info&#34;&gt;&lt;p&gt;A browser engine (also known as a layout engine or rendering engine) is a core software component of every major web browser. The primary job of a browser engine is to &lt;strong&gt;transform HTML documents and other resources of a web page into an interactive visual representation on a user’s device&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;雖然名詞解釋上為非同步，但在 JavaScript 運作上實際仍是 line by line，而且具有先後順序的，對瀏覽器而言以下三項機制才是同時運作（asynchronous）：&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-asynchronous/1.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;asynchronous&#34;&gt;

&lt;h1 id=&#34;Http-request-amp-response&#34;&gt;&lt;a href=&#34;#Http-request-amp-response&#34; class=&#34;headerlink&#34; title=&#34;Http request &amp;amp; response&#34;&gt;&lt;/a&gt;Http request &amp;amp; response&lt;/h1&gt;&lt;p&gt;客戶端發送了頁面請求後，&lt;strong&gt;Http 機制&lt;/strong&gt;開始運行收發請求與回應網路資源的文本協定，建立瀏覽器與伺服器的溝通橋樑，作為 TCP/IP 的應用層，並且將資料回應提供給 JavaScript 來處理。&lt;/p&gt;
&lt;h1 id=&#34;Javascript&#34;&gt;&lt;a href=&#34;#Javascript&#34; class=&#34;headerlink&#34; title=&#34;Javascript&#34;&gt;&lt;/a&gt;Javascript&lt;/h1&gt;&lt;p&gt;一旦提及非同步就不可埋沒一大功臣，JavaScript 引擎中的&lt;strong&gt;事件佇列（Event Queue）&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;事件佇列（Event-Queue）&#34;&gt;&lt;a href=&#34;#事件佇列（Event-Queue）&#34; class=&#34;headerlink&#34; title=&#34;事件佇列（Event Queue）&#34;&gt;&lt;/a&gt;事件佇列（Event Queue）&lt;/h4&gt;&lt;p&gt;當 Javascript 引擎執行完執行佇列（Execution Stack）的內容後，也就是執行佇列已經清空後，會定期（periodic）來檢視事件佇列（Event Queue）的事件排序並且執行，例如 Click 事件的回呼函式，或者是 API 收發資料的任務，才會被放置到執行佇列（Execution Stack）然後執行。在 Javascript 中的運作仍是同步的，並沒有非同步在執行程式。&lt;/p&gt;
&lt;h4 id=&#34;微任務與宏任務&#34;&gt;&lt;a href=&#34;#微任務與宏任務&#34; class=&#34;headerlink&#34; title=&#34;微任務與宏任務&#34;&gt;&lt;/a&gt;微任務與宏任務&lt;/h4&gt;&lt;p&gt;部分的執行任務會被放置在事件佇列中，待執行佇列（Execution Stack）所有任務完成後才會開始執行，例如 SetTimeout（宏任務） 或是 promise（微任務） 等。&lt;/p&gt;
&lt;h1 id=&#34;Render-engine&#34;&gt;&lt;a href=&#34;#Render-engine&#34; class=&#34;headerlink&#34; title=&#34;Render engine&#34;&gt;&lt;/a&gt;Render engine&lt;/h1&gt;&lt;p&gt;JavaScript 的必須仰賴瀏覽器的引擎，當瀏覽器讀取一個頁面時， JavaScript 具有觸發畫面渲染的鉤子促使&lt;strong&gt;渲染引擎（Render Engine）&lt;/strong&gt;來改變畫面。&lt;/p&gt;
&lt;blockquote class=&#34;colorquote danger&#34;&gt;&lt;p&gt;Asynchronous means that the rendering engine, the javascript engine and the HTTP requests are running asynchrounously inside the browser, what’s happening just inside the javascript is synchrounous.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-07-24T08:56:25.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/07/24/zh-tw/js-weird-parts-ES6/</id>
        <title>克服 Javascript 的奇怪部分 ES6</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/07/24/zh-tw/js-weird-parts-ES6/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-let/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;ES6-let&#34;&gt;
&lt;h1 id=&#34;ES6-let&#34;&gt;&lt;a href=&#34;#ES6-let&#34; class=&#34;headerlink&#34; title=&#34;ES6 let&#34;&gt;&lt;/a&gt;ES6 let&lt;/h1&gt;&lt;p&gt;不同於 var 的宣告方式，let 宣告的變數在宣告時會出現暫時性死區不可取用，沒有 hoisting 現象，且變數的作用域只存在於 block 區塊中，例如 if 陳述句，而 var 則是函式作用域，若撰寫在 if 陳述句內外部仍可取用。&lt;br&gt;最經典的應用就是 for 迴圈，可以在每一次的 console 正確印出數值：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;for loop&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;()=&amp;gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  },&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-07-24T08:30:58.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/07/10/zh-tw/js-weird-parts-scope-chain/</id>
        <title>克服 Javascript 的奇怪部分 範圍鍊</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/07/10/zh-tw/js-weird-parts-scope-chain/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-scope-chain/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;scope-chain&#34;&gt;

&lt;p&gt;以下探討的幾個議題都離不開函式（function）本身：&lt;/p&gt;
&lt;h1 id=&#34;環境變數&#34;&gt;&lt;a href=&#34;#環境變數&#34; class=&#34;headerlink&#34; title=&#34;環境變數&#34;&gt;&lt;/a&gt;環境變數&lt;/h1&gt;&lt;p&gt;每個執行環境（execution context）都有屬於其中的變數，可以把執行環境想作是一個&lt;strong&gt;空間範圍&lt;/strong&gt;，而環境變數都附著在其中，例如全域變數（global variable）會附著在全域物件下，瀏覽器的全域執行環境則是屬於 window 物件，宣告在其中的變數都會隸屬於全域執行環境。&lt;/p&gt;
&lt;h1 id=&#34;函式變數&#34;&gt;&lt;a href=&#34;#函式變數&#34; class=&#34;headerlink&#34; title=&#34;函式變數&#34;&gt;&lt;/a&gt;函式變數&lt;/h1&gt;&lt;p&gt;函式變數在函式被呼叫並觸發後創造了一個獨特的函式執行環境，該函式內有自己的變數，此變數式在函式內&lt;strong&gt;宣告（declaration）&lt;/strong&gt;並且創造的，只能在該函式執行環境中可以取得，稱為區域變數（scoped variable），而變數可取用的範圍稱之作用域（scope）。&lt;/p&gt;
&lt;h1 id=&#34;範圍鍊&#34;&gt;&lt;a href=&#34;#範圍鍊&#34; class=&#34;headerlink&#34; title=&#34;範圍鍊&#34;&gt;&lt;/a&gt;範圍鍊&lt;/h1&gt;&lt;p&gt;根據函式的靜態作用域、詞法作用域，也就是坐落的物理位置來向外查找可用的變數（accessible variables），而非呼叫的位置；每個函式的執行環境（execution context）都是獨立的執行堆疊（execution stack），並且都指向外部的執行環境（outer environment），一層一層的鏈結稱為範圍鍊（scope chain）。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-scope-chain/4.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;scope-chain&#34;&gt;
&lt;blockquote class=&#34;colorquote info&#34;&gt;&lt;p&gt;值得注意的一點：函式 b 是在函式 a 呼叫並且執行之後才建立了函式 b 的執行環境。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;</content>
        <updated>2022-07-10T07:57:42.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/06/05/zh-tw/js-weird-parts-III/</id>
        <title>克服 Javascript 的奇怪部分 單執行緒與同步執行</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/06/05/zh-tw/js-weird-parts-III/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-single-threaded/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-single-threaded&#34;&gt;
&lt;p&gt;這一個章節要來講解 JavaScript 的幾個觀念。&lt;/p&gt;
&lt;h1 id=&#34;單執行緒（Single-Threaded）&#34;&gt;&lt;a href=&#34;#單執行緒（Single-Threaded）&#34; class=&#34;headerlink&#34; title=&#34;單執行緒（Single Threaded）&#34;&gt;&lt;/a&gt;單執行緒（Single Threaded）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;一次一件事&lt;/strong&gt;是重點。&lt;br&gt;這個特性不是瀏覽器的特性，瀏覽器一次可能同時處理多件事情，JavaScript 引擎則是單執行緒的，就像排隊買早餐，老闆娘一次只能處理一位客人，而 JavaScript 也是一次只處理一項指令。&lt;/p&gt;
&lt;h1 id=&#34;同步執行（Synchronous）&#34;&gt;&lt;a href=&#34;#同步執行（Synchronous）&#34; class=&#34;headerlink&#34; title=&#34;同步執行（Synchronous）&#34;&gt;&lt;/a&gt;同步執行（Synchronous）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;順序&lt;/strong&gt;是重點。&lt;br&gt;事情有先後順序，按照順序執行，一次執行一行（或者說一個單元的程式碼，可能是一個陳述式或表達式）。&lt;/p&gt;
&lt;h1 id=&#34;呼叫函式（Function-Invocation）&#34;&gt;&lt;a href=&#34;#呼叫函式（Function-Invocation）&#34; class=&#34;headerlink&#34; title=&#34;呼叫函式（Function Invocation）&#34;&gt;&lt;/a&gt;呼叫函式（Function Invocation）&lt;/h1&gt;&lt;p&gt;觸發或執行一個函式，使用的符號為大括號（parenthesis）。&lt;br&gt;JavaScript 引擎在執行函式呼叫時，會發生幾件事情延續前面的章節：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;呼叫函式&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;b&lt;/span&gt; () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;a&lt;/span&gt; () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;b&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;a&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;創造階段&#34;&gt;&lt;a href=&#34;#創造階段&#34; class=&#34;headerlink&#34; title=&#34;創造階段&#34;&gt;&lt;/a&gt;創造階段&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;全域執行環境（Global Execution Context）首先被創造。&lt;/li&gt;
&lt;li&gt;全域物件（Global object）被創造。&lt;/li&gt;
&lt;li&gt;全域 this 被創造。&lt;/li&gt;
&lt;li&gt;開始編譯階段（Parsing），編譯器巡過一遍所有程式碼發現了函式 b 與 a，在記憶體創造兩個函式的空間並且存放整個函式內容。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;/images/js-weird-parts-III/1.png&#34; class=&#34;&#34; width=&#34;400&#34; height=&#34;200&#34; title=&#34;js-weird-parts-III&#34;&gt;

&lt;h2 id=&#34;執行階段&#34;&gt;&lt;a href=&#34;#執行階段&#34; class=&#34;headerlink&#34; title=&#34;執行階段&#34;&gt;&lt;/a&gt;執行階段&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;整個程式碼的記憶體準備完畢後，開始執行程式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;編譯器解析到&lt;strong&gt;函式 a&lt;/strong&gt;被呼叫，立即於全域執行環境上方，產生並堆疊一個函式 a 的執行環境（Execution Context），放進&lt;strong&gt;執行佇列堆（Execution Stack）&lt;/strong&gt;中，每個執行環境都有自己得記憶體空間存放著變數或函式。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-III/2.png&#34; class=&#34;&#34; width=&#34;400&#34; height=&#34;200&#34; title=&#34;js-weird-parts-III&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最上方的執行佇列會優先執行，進入函式 a 的執行環境（Execution Context）並且解析到函式 b，程序暫停，立即於函式 a 的執行環境上方，產生並堆疊一個函式 b 的執行環境（Execution Context），放進&lt;strong&gt;執行佇列堆（Execution Stack）&lt;/strong&gt;中。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-III/3.png&#34; class=&#34;&#34; width=&#34;400&#34; height=&#34;200&#34; title=&#34;js-weird-parts-III&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上執行階段也可以拆分成好幾個創造（執行環境），與執行（執行佇列堆最上方的執行環境）階段，在當下的執行環境執行過程中，只要觸發另一個函式，執行暫停然後創造（執行環境）、與執行（執行佇列堆最上方的執行環境），而下方的程式碼不會被解析，除非該執行環境執行完畢並且離開執行佇列堆（Execution Stack）後才會繼續逐行執行。&lt;/p&gt;
&lt;blockquote class=&#34;colorquote Info&#34;&gt;&lt;p&gt;Everytime a function is called, a new execution context is created for that function, the &lt;code&gt;this&lt;/code&gt; variable is created for that function, the variables in it were set up in the creation phase, then the code is executed line by line.&lt;br&gt;whatever is on the top of the execution stack, is currently running synchronously.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;重點整理：&lt;br&gt;當一個函式被觸發或是呼叫，JS 引擎會創造一個屬於該函式的執行環境（execution context）並且放置在執行緒的最上方等待被執行，而該堆疊中具有該函式獨有的執行環境與 This，開始執行並且完成後離開堆疊中（pop out）繼續執行下一個堆疊，只要解析到新的函式被呼叫就會反覆以上行為，直到堆疊不斷（pop out）剩下全域執行環境本身為止。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="Javascript" />
        <updated>2022-06-05T08:31:07.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/06/04/zh-tw/js-weird-parts-II/</id>
        <title>克服 Javascript 的奇怪部分 Hoisting</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/06/04/zh-tw/js-weird-parts-II/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-II/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-II&#34;&gt;
&lt;p&gt;課程作者提到，&lt;strong&gt;Hoisting&lt;/strong&gt; 大約是 JavaScript 裡最奇怪的行為了，而且是其他語言無法做到的特性，來了解一下怎麼回事吧！&lt;/p&gt;
&lt;h1 id=&#34;Hoisting&#34;&gt;&lt;a href=&#34;#Hoisting&#34; class=&#34;headerlink&#34; title=&#34;Hoisting&#34;&gt;&lt;/a&gt;Hoisting&lt;/h1&gt;&lt;p&gt;這一段程式碼若在其他語言執行可是會發生錯誤的！但是在 JavaScript 裡卻可以安然無恙：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;b&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;hljs-string&#34;&gt;&#39;123&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;b&lt;/span&gt; () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;b is called!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;/images/js-weird-parts-II/1.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-II&#34;&gt;
&lt;p&gt;a 竟然在還未被宣告以前使用，會回傳 undefined；b 函式正常運作。&lt;br&gt;這就是 JavaScript 的 Hoisting 在搞鬼，但不要被 Hoisting 的提升之意混淆了，該現象並非程式碼被靜態的（physically）提升到最上方，我們來解析一下編譯器是如何執行這一段程式碼：&lt;/p&gt;
&lt;h1 id=&#34;執行環境執行的兩階段&#34;&gt;&lt;a href=&#34;#執行環境執行的兩階段&#34; class=&#34;headerlink&#34; title=&#34;執行環境執行的兩階段&#34;&gt;&lt;/a&gt;執行環境執行的兩階段&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;There are two phases when it came to the execution context within the Javacript engine:&lt;br&gt;The first phase was the creation phase, when it sets up the variables and functions in memory. And the second phase was the execution phase, all those things already being set up, so now it runs your code line by line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;創造階段&#34;&gt;&lt;a href=&#34;#創造階段&#34; class=&#34;headerlink&#34; title=&#34;創造階段&#34;&gt;&lt;/a&gt;創造階段&lt;/h2&gt;&lt;p&gt;在第一個章節有提到，Javascript 並非是完全直譯的語言，其中一個佐證就是 Hoisting 的行為，如果程式碼真的是逐行翻譯然後執行，它是怎麼知道變數 a 與函式 b 會被創建的呢？&lt;/p&gt;
&lt;p&gt;這裡就能理解編譯器在執行程式以前仍存在一段&lt;strong&gt;編譯完成才執行&lt;/strong&gt;的過程：&lt;br&gt;Javascript 引擎先將整個程式碼審視一遍，找出所有具有名稱（variable name）、&lt;strong&gt;並非&lt;/strong&gt;透過區塊作用域（Block scope）的關鍵字 const 與 let ，而是 var 所宣告的的值或函式找出來，然後歸納：誰是變數就給予一個記憶體空間，存放著未定義的值（undefined）；誰是函式就給予一個記憶體空間，存放著整個函式的內容。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-II/2.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-II&#34;&gt;

&lt;p&gt;也就是說創造階段可以這樣理解：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;b&lt;/span&gt; () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;b is called!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;變數 a 與函式 b 都各自被建立一個記憶體空間，接著存放著對應的值，變數 a 的記憶體空間內存放了 &lt;code&gt;undefined&lt;/code&gt;，函式 b 的記憶體空間則直接放置整個函式內容。&lt;br&gt;關鍵就在變數的創造階段，只是&lt;strong&gt;宣告（declared）&lt;/strong&gt;而已，這個階段 JavaScript 引擎並不清楚變數 a 將來的值會是甚麼，直到執行階段才會被&lt;strong&gt;指派（assigned）&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;undefined-不等於-not-defined&#34;&gt;&lt;a href=&#34;#undefined-不等於-not-defined&#34; class=&#34;headerlink&#34; title=&#34;undefined 不等於 not defined&#34;&gt;&lt;/a&gt;undefined 不等於 not defined&lt;/h2&gt;&lt;p&gt;當變數通過 var 關鍵字宣告，記憶體就被建立並且放入 &lt;code&gt;undefined&lt;/code&gt; 的值，如果變數未宣告就使用，則瀏覽器會噴錯誤訊息：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Uncaught ReferenceError: a is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這是瀏覽器表示：嘿！我在任何記憶體都找不到這個名稱的參照，甚至連 &lt;code&gt;undefined&lt;/code&gt; 都不是。&lt;/p&gt;
&lt;h3 id=&#34;小知識&#34;&gt;&lt;a href=&#34;#小知識&#34; class=&#34;headerlink&#34; title=&#34;小知識&#34;&gt;&lt;/a&gt;小知識&lt;/h3&gt;&lt;blockquote class=&#34;colorquote info&#34;&gt;&lt;p&gt;Since undefined is a longer string than null, the JIT compiler has to save 4 bytes more to memory when using undefined instead of null while parsing. Consider that memory aswell.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; 並非不存在的值，它是 Javacript 中的原始型別，也是純值的一種，甚至占了記憶體 4 個 bytes ，比空值&lt;code&gt;null&lt;/code&gt;還要多。&lt;/p&gt;
&lt;h2 id=&#34;良好的-coding-習慣&#34;&gt;&lt;a href=&#34;#良好的-coding-習慣&#34; class=&#34;headerlink&#34; title=&#34;良好的 coding 習慣&#34;&gt;&lt;/a&gt;良好的 coding 習慣&lt;/h2&gt;&lt;h4 id=&#34;X-在宣告以前使用變數&#34;&gt;&lt;a href=&#34;#X-在宣告以前使用變數&#34; class=&#34;headerlink&#34; title=&#34;(X)在宣告以前使用變數&#34;&gt;&lt;/a&gt;(X)在宣告以前使用變數&lt;/h4&gt;&lt;p&gt;為了避免在執行過程被 Hoisting 汙染，最好養成先宣告後調用或賦值的習慣，可以避免一些錯誤發生，這也是為什麼 Eslint 或 Airbnb 等大宗規範都建議的撰寫規則。&lt;/p&gt;
&lt;h4 id=&#34;X-將變數賦值為-undefined&#34;&gt;&lt;a href=&#34;#X-將變數賦值為-undefined&#34; class=&#34;headerlink&#34; title=&#34;(X)將變數賦值為 undefined&#34;&gt;&lt;/a&gt;(X)將變數賦值為 undefined&lt;/h4&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;倘若你這麼做了，會在除錯的時候難以辨認是 Javacript 引擎設定的還是後來你撰寫的程式所賦值的。&lt;/p&gt;
&lt;h1 id=&#34;結論&#34;&gt;&lt;a href=&#34;#結論&#34; class=&#34;headerlink&#34; title=&#34;結論&#34;&gt;&lt;/a&gt;結論&lt;/h1&gt;&lt;p&gt;若要將 Hoisting 給予一個較好的解釋，我想就是「創建初始化」，給予一個初始的值以便後續利用：函式就直接賦值，變數的則填補上執行等號（=）以後的值，不過那已經是下一個&lt;strong&gt;執行階段&lt;/strong&gt;的任務了。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <updated>2022-06-04T08:28:20.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/06/04/zh-tw/js-weird-parts-parsing/</id>
        <title>克服 Javascript 的奇怪部分 名詞解釋篇</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/06/04/zh-tw/js-weird-parts-parsing/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-I/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-I&#34;&gt;
&lt;p&gt;先前滿常看到別人推薦的 Udemy 課程：克服JS的奇怪部分，原來自己已經購買且塵封在閱讀清單已久XD&lt;br&gt;馬上來匹乓一下吧！&lt;/p&gt;
&lt;h1 id=&#34;執行篇&#34;&gt;&lt;a href=&#34;#執行篇&#34; class=&#34;headerlink&#34; title=&#34;執行篇&#34;&gt;&lt;/a&gt;執行篇&lt;/h1&gt;&lt;h2 id=&#34;語法解析器（Syntax-Parser）&#34;&gt;&lt;a href=&#34;#語法解析器（Syntax-Parser）&#34; class=&#34;headerlink&#34; title=&#34;語法解析器（Syntax Parser）&#34;&gt;&lt;/a&gt;語法解析器（Syntax Parser）&lt;/h2&gt;&lt;p&gt;將你撰寫的 Javascript 編譯成電腦可以理解的一套程式語言（program），並且決定語法執行的方式以及是否合乎規範的角色，也與直譯（interprets）、轉譯（Compiler）概念雷同，其中直譯的編譯方式為逐字編譯後由電腦執行，大部分的 Javascript 程式都是直譯的，但並非全部情況。&lt;br&gt;編譯的過程會將 Javascript 拆解分類，依變數、函式等轉換成電腦硬體可以閱讀的語言，然後執行。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-I/1.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-I&#34;&gt;
&lt;p&gt;可以想像成生產線上的作業員，持有原料工序可以生產產品。&lt;/p&gt;
&lt;h2 id=&#34;靜態詞法作用域（Lexical-Environments）&#34;&gt;&lt;a href=&#34;#靜態詞法作用域（Lexical-Environments）&#34; class=&#34;headerlink&#34; title=&#34;靜態詞法作用域（Lexical Environments）&#34;&gt;&lt;/a&gt;靜態詞法作用域（Lexical Environments）&lt;/h2&gt;&lt;blockquote class=&#34;colorquote info&#34;&gt;&lt;p&gt;Where something &lt;strong&gt;sits physically&lt;/strong&gt; in the code you write,&lt;br&gt;determines how it interacts with other elements in the program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;撰寫&lt;/strong&gt;的時候決定如何運作。&lt;br&gt;你撰寫語法的靜態物理位置，決定了該對象（變數、函式等）與其他對象的互動與執行關係，並且被直譯器透過這個物理關係，或者說詞彙或文法關係來統整歸坐落在硬體記憶體中的位置，但須注意的是並非所有語言皆如此（java、C# 等為動態作用域）。&lt;br&gt;這有助於上方的語法解析器來決定程式怎麼運作，你撰寫 code 的位置在哪？周圍有甚麼、被甚麼包圍都很重要！&lt;br&gt;可以想像成生產線上的主管，歸納好產品的原料工序與存放倉庫的規則。&lt;/p&gt;
&lt;h2 id=&#34;執行環境（Execution-Context）&#34;&gt;&lt;a href=&#34;#執行環境（Execution-Context）&#34; class=&#34;headerlink&#34; title=&#34;執行環境（Execution Context）&#34;&gt;&lt;/a&gt;執行環境（Execution Context）&lt;/h2&gt;&lt;blockquote class=&#34;colorquote info&#34;&gt;&lt;p&gt;&lt;strong&gt;A wrapper&lt;/strong&gt; to help manage the code that is running.&lt;br&gt;There are lots of lexical environments, which one is currently running is managed via execution context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;執行&lt;/strong&gt;的時候決定如何運作。&lt;br&gt;靜態作用域很多，但是執行的當下順序則是由執行環境決定，也可以稱為上下文，最常見的就是每個函式建立之後產生的&lt;code&gt;this&lt;/code&gt; keyword，通常為 block 作用域所包覆，在呼叫的時候決定 this 對象。&lt;br&gt;而執行環境不是只有與你撰寫的程式碼相關而已，也包含其他東西，例如上述的 this 就是執行函式當下的編譯過程動態產生的，編譯器在幫你翻譯給電腦讀懂以前，加油添醋了一些程序使程式碼更完整、具有前後順序給電腦執行。&lt;br&gt;可以想像成工廠的老闆，決定好哪批產品先出後出、出到哪裡。&lt;/p&gt;
&lt;h1 id=&#34;變數篇&#34;&gt;&lt;a href=&#34;#變數篇&#34; class=&#34;headerlink&#34; title=&#34;變數篇&#34;&gt;&lt;/a&gt;變數篇&lt;/h1&gt;&lt;h2 id=&#34;一個名稱對應一個值&#34;&gt;&lt;a href=&#34;#一個名稱對應一個值&#34; class=&#34;headerlink&#34; title=&#34;一個名稱對應一個值&#34;&gt;&lt;/a&gt;一個名稱對應一個值&lt;/h2&gt;&lt;p&gt;一個變數名可以更改很多次，但都只會包含一個值，而一個值裡面是更多的鍵值對。&lt;/p&gt;
&lt;h2 id=&#34;物件&#34;&gt;&lt;a href=&#34;#物件&#34; class=&#34;headerlink&#34; title=&#34;物件&#34;&gt;&lt;/a&gt;物件&lt;/h2&gt;&lt;p&gt;更多鍵值對（key-value pairs）的集合。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-I/2.png&#34; class=&#34;&#34; width=&#34;400&#34; height=&#34;200&#34; title=&#34;js-weird-parts-I&#34;&gt;

&lt;h1 id=&#34;全域物件與全域環境篇（Global）&#34;&gt;&lt;a href=&#34;#全域物件與全域環境篇（Global）&#34; class=&#34;headerlink&#34; title=&#34;全域物件與全域環境篇（Global）&#34;&gt;&lt;/a&gt;全域物件與全域環境篇（Global）&lt;/h1&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;info&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;The&lt;/span&gt; base execution context is your &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt; execution context.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Things&lt;/span&gt; that are accessible everywhere to everything to your code.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;And&lt;/span&gt; it creates &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; things that you don&lt;span class=&#34;hljs-string&#34;&gt;&#39;t have to write about:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;1. Global object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;2. this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;全域執行環境&#34;&gt;&lt;a href=&#34;#全域執行環境&#34; class=&#34;headerlink&#34; title=&#34;全域執行環境&#34;&gt;&lt;/a&gt;全域執行環境&lt;/h2&gt;&lt;p&gt;全域執行環境是所有 Javascript code 執行的基礎，所有的執行起點都存在於該環境內（being wrapped）。並且 Javascript 引擎會在執行初始建立兩個對象：全域物件與 this，即使你沒有撰寫任何程式碼，Javascript 引擎仍會自動產生。&lt;/p&gt;
&lt;h2 id=&#34;this&#34;&gt;&lt;a href=&#34;#this&#34; class=&#34;headerlink&#34; title=&#34;this&#34;&gt;&lt;/a&gt;this&lt;/h2&gt;&lt;p&gt;其中全域執行環境中，瀏覽器底下的 this 就是指向 &lt;strong&gt;window&lt;/strong&gt; (Global Object)。&lt;br&gt;weird-parts-I/3.png 600 200 js-weird-parts-I %}&lt;/p&gt;
&lt;h2 id=&#34;全域物件&#34;&gt;&lt;a href=&#34;#全域物件&#34; class=&#34;headerlink&#34; title=&#34;全域物件&#34;&gt;&lt;/a&gt;全域物件&lt;/h2&gt;&lt;p&gt;若 Javascript 引擎是在後端執行，例如 node.js，則 全域物件就不會是 window。&lt;br&gt;當你在全域執行環境下靜態的撰寫變數或函式，並且詞法作用域上開放而沒有撰寫在其他函式內，就會自動附著（attached to）在全物域物件底下，全域物件意味著整個 Javascript 中的任何其他詞法作用域或者任何對象乃至整個檔案，都可以取用（accessible）這些資料。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-I/5.png&#34; class=&#34;&#34; width=&#34;400&#34; height=&#34;200&#34; title=&#34;js-weird-parts-I&#34;&gt;
&lt;img src=&#34;/images/js-weird-parts-I/6.png&#34; class=&#34;&#34; width=&#34;500&#34; height=&#34;200&#34; title=&#34;js-weird-parts-I&#34;&gt;

&lt;p&gt;以下都是指向同一個記憶體位置、同一個值：&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-I/7.png&#34; class=&#34;&#34; width=&#34;500&#34; height=&#34;200&#34; title=&#34;js-weird-parts-I&#34;&gt;

&lt;p&gt;在執行環境中，還有一個&lt;strong&gt;外部環境（Outer Environment）&lt;/strong&gt;沒有提到，而在全域執行環境的層級中，外部環境是 null，因為全域本身就是最外層的 wrapper，沒有更外層的環境了。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-I/8.png&#34; class=&#34;&#34; width=&#34;700&#34; height=&#34;200&#34; title=&#34;js-weird-parts-I&#34;&gt;

&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <updated>2022-06-04T03:07:31.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/05/14/zh-tw/constructor-vs-instance/</id>
        <title>建構子方法與實例化方法</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/05/14/zh-tw/constructor-vs-instance/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/constructor-vs-instance/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;constructor-vs-instance&#34;&gt;

&lt;p&gt;在某天好奇想了解 Vue 3 的 defineProperty 原理搜尋了 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 這個方法時，看見以下說明：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;靜態方法 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 會直接對一個物件定義、或是修改現有的屬性。執行後會回傳定義完的物件。&lt;br&gt;備註：這個方法會直接針對 Object 呼叫建構子（constructor），而不是 Object 型別的實例。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;MDN&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&#34;&gt;Object.defineProperty()&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;其中的&lt;strong&gt;直接針對 Object 呼叫建構子（constructor），而不是 Object 型別的實例&lt;/strong&gt;這句話突然讓我驚醒了，以前一直不能理解 javascript 中呼叫原生方法時，為何會有以下的區別：&lt;/p&gt;
&lt;h2 id=&#34;透過建構器呼叫&#34;&gt;&lt;a href=&#34;#透過建構器呼叫&#34; class=&#34;headerlink&#34; title=&#34;透過建構器呼叫&#34;&gt;&lt;/a&gt;透過建構器呼叫&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Object.methods(objInstance)&lt;/code&gt; -&amp;gt; 例如 Object.keys(someObj)&lt;br&gt;這裡的 Object 是建構函式本身，未實例的藍圖（constructor）。&lt;/p&gt;
&lt;h2 id=&#34;透過實例呼叫&#34;&gt;&lt;a href=&#34;#透過實例呼叫&#34; class=&#34;headerlink&#34; title=&#34;透過實例呼叫&#34;&gt;&lt;/a&gt;透過實例呼叫&lt;/h2&gt;&lt;p&gt;&lt;code&gt;objInstance.methods(parameters)&lt;/code&gt; -&amp;gt; 例如 someObj.hasOwnProperty(‘prop’)&lt;br&gt;這裡的 Object 是實例化的物件（instance）。&lt;/p&gt;
&lt;h2 id=&#34;Constructor-Static-Methods&#34;&gt;&lt;a href=&#34;#Constructor-Static-Methods&#34; class=&#34;headerlink&#34; title=&#34;Constructor Static Methods&#34;&gt;&lt;/a&gt;Constructor Static Methods&lt;/h2&gt;&lt;h4 id=&#34;構造器-靜態方法&#34;&gt;&lt;a href=&#34;#構造器-靜態方法&#34; class=&#34;headerlink&#34; title=&#34;構造器 靜態方法&#34;&gt;&lt;/a&gt;構造器 靜態方法&lt;/h4&gt;&lt;p&gt;以下的例子是呼叫 Object 建構子中的原生 keys 方法，而不需要 new 一個物件實例就可以使用，靜態方法的特色是無需使用任何建構子中的 this 資料就可以直接使用。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;建構子方法&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; someone = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;carrer&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#39;teacher&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;sex&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#39;male&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; dataKeys = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(someone);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(dataKeys);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// [&#34;name&#34;,&#34;carrer&#34;,&#34;sex&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Instance-methods&#34;&gt;&lt;a href=&#34;#Instance-methods&#34; class=&#34;headerlink&#34; title=&#34;Instance methods&#34;&gt;&lt;/a&gt;Instance methods&lt;/h3&gt;&lt;h4 id=&#34;等號賦值-實例化方法&#34;&gt;&lt;a href=&#34;#等號賦值-實例化方法&#34; class=&#34;headerlink&#34; title=&#34;等號賦值 實例化方法&#34;&gt;&lt;/a&gt;等號賦值 實例化方法&lt;/h4&gt;&lt;p&gt;以下則是呼叫 Array 的實例化 push 方法，雖然也不是透過 new 來建立一個陣列，卻也是使用賦值一個陣列來建立陣列的實例，並且使用原生 push 方法。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;實例化方法 - 賦值&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; friends = [ &lt;span class=&#34;hljs-string&#34;&gt;&#39;Cally&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;Donna&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;Jell&#39;&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;friends.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;Liang&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(friends);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// [&#34;Cally&#34;,&#34;Donna&#34;,&#34;Jell&#34;,&#34;Liang&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;建構器-實例化方法&#34;&gt;&lt;a href=&#34;#建構器-實例化方法&#34; class=&#34;headerlink&#34; title=&#34;建構器 實例化方法&#34;&gt;&lt;/a&gt;建構器 實例化方法&lt;/h4&gt;&lt;p&gt;透過 new 來建立一個陣列。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;實例化方法 - 構造器&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; animals = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;bunny&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;cat&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;puppy&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;hamster&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;animals.&lt;span class=&#34;title function_&#34;&gt;unshift&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;bird&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(animals);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// [&#34;bird&#34;,&#34;bunny&#34;,&#34;cat&#34;,&#34;puppy&#34;,&#34;hamster&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;構造器靜態方法補充&#34;&gt;&lt;a href=&#34;#構造器靜態方法補充&#34; class=&#34;headerlink&#34; title=&#34;構造器靜態方法補充&#34;&gt;&lt;/a&gt;構造器靜態方法補充&lt;/h2&gt;&lt;h4 id=&#34;無法取得構造器的this資料&#34;&gt;&lt;a href=&#34;#無法取得構造器的this資料&#34; class=&#34;headerlink&#34; title=&#34;無法取得構造器的this資料&#34;&gt;&lt;/a&gt;無法取得構造器的this資料&lt;/h4&gt;&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;The static method also cannot see the instance variable state so if we try to call the nonstatic method from the static method compiler will complain.&lt;/li&gt;
&lt;li&gt;The static method can be used to create utility functions.&lt;br&gt;&lt;a href=&#34;https://www.educba.com/javascript-static-method/&#34;&gt;https://www.educba.com/javascript-static-method/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;從上述可以得知靜態方法是不能取用構造器建構子（constructor）內的變數的（this binding），通常會撰寫純函式（pure function）以保持無狀態的特性，如同 Math 方法。&lt;br&gt;靜態方法適合用來當作全局複用的函式，適合較無副作用的邏輯。&lt;/p&gt;
&lt;h2 id=&#34;兩種方法的原型鍊關係&#34;&gt;&lt;a href=&#34;#兩種方法的原型鍊關係&#34; class=&#34;headerlink&#34; title=&#34;兩種方法的原型鍊關係&#34;&gt;&lt;/a&gt;兩種方法的原型鍊關係&lt;/h2&gt;&lt;p&gt;若展開一個實例化的物件，會發現：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建構器方法存在於建構子物件中（constructor），且只能透過建構器呼叫，例如 Object.assign()；&lt;/li&gt;
&lt;li&gt;實例化方法則存在於原型上（prototype），需要實例化之後才能呼叫，例如 objInstance.toLocaleString()&lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <category term="constructor" />
        <category term="instance" />
        <category term="methods" />
        <updated>2022-05-14T13:37:03.000Z</updated>
    </entry>
</feed>