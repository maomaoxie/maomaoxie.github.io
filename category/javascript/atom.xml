<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://maomaoxie.github.io</id>
    <title>Mawchu 貓奴前端的天空 • Posts by &#34;javascript&#34; category</title>
    <link href="http://maomaoxie.github.io" />
    <updated>2022-09-23T14:31:26.000Z</updated>
    <category term="javascript" />
    <category term="constructor" />
    <category term="instance" />
    <category term="methods" />
    <category term="AMP" />
    <category term="css" />
    <category term="grid" />
    <category term="backEnd" />
    <category term="node" />
    <category term="express" />
    <category term="router" />
    <category term="git" />
    <category term="github" />
    <category term="sourceTree" />
    <category term="hexo" />
    <category term="submodule" />
    <category term="Google Analytics" />
    <category term="GA" />
    <category term="GA4" />
    <category term="Google Tag Manager" />
    <category term="GTM" />
    <category term="api" />
    <category term="graphQL" />
    <category term="facebook" />
    <category term="rss" />
    <category term="http" />
    <category term="httpHeader" />
    <category term="request" />
    <category term="response" />
    <category term="https" />
    <category term="httpMethods" />
    <category term="status" />
    <category term="Javascript" />
    <category term="type" />
    <category term="laravel" />
    <category term="blade" />
    <category term="layout" />
    <category term="php" />
    <category term="linux" />
    <category term="wsl2" />
    <category term="migration" />
    <category term="sql" />
    <category term="public" />
    <category term="static" />
    <category term="tailwind" />
    <category term="less" />
    <category term="processors" />
    <category term="env" />
    <category term="process" />
    <category term="dotenv" />
    <category term="safari" />
    <category term="javaScript" />
    <category term="preventDefault" />
    <category term="ios" />
    <category term="mobile" />
    <category term="webService" />
    <category term="restfulApi" />
    <category term="shortCircuit" />
    <category term="optionalChaining" />
    <category term="tricks" />
    <category term="vue" />
    <category term="vue3" />
    <category term="compositionAPI" />
    <category term="vite" />
    <category term="typescript" />
    <category term="compositionApi" />
    <category term="setup" />
    <category term="ref" />
    <category term="reactive" />
    <category term="WebSocket" />
    <category term="WebHook" />
    <category term="vuetify" />
    <category term="html" />
    <category term="wordpress" />
    <category term="dns" />
    <category term="cdn" />
    <entry>
        <id>http://maomaoxie.github.io/2022/09/23/zh-tw/js-weird-parts-coercion/</id>
        <title>克服 Javascript 的奇怪部分 動態型別</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/09/23/zh-tw/js-weird-parts-coercion/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;運算過程中由於 Javascript 是弱型別，沒有辦法強制規範型別，所以會在運算過程中發生隱式（動態）型別轉換，稱之為 Corecion。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Converting a value from one type to another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;算術運算子的隱式轉換&#34;&gt;&lt;a href=&#34;#算術運算子的隱式轉換&#34; class=&#34;headerlink&#34; title=&#34;算術運算子的隱式轉換&#34;&gt;&lt;/a&gt;算術運算子的隱式轉換&lt;/h1&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; + &lt;span class=&#34;hljs-string&#34;&gt;&#39;2&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a); &lt;span class=&#34;hljs-comment&#34;&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上方範例可以印證 Javascript 引擎將數字 &lt;code&gt;1&lt;/code&gt; 與字串 &lt;code&gt;2&lt;/code&gt; 相加的過程中產生的動態型別的轉換，獲得了字串 &lt;code&gt;12&lt;/code&gt;。&lt;br&gt;在某些強型別的語言中，這樣做是會噴 error 的，但 Javascript 不會，這也造成開發過程時常會發生不如預期的結果。&lt;/p&gt;
&lt;h1 id=&#34;比較運算子的隱式轉換&#34;&gt;&lt;a href=&#34;#比較運算子的隱式轉換&#34; class=&#34;headerlink&#34; title=&#34;比較運算子的隱式轉換&#34;&gt;&lt;/a&gt;比較運算子的隱式轉換&lt;/h1&gt;&lt;p&gt;從以下的範例我們可以很自然地獲得 true 的結果：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而以下的範例卻出乎意料之外也獲得了 true：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這也是動態型別的轉換在作怪，一一拆解一下過程是這樣的，比較運算子 &lt;code&gt;&amp;lt;&lt;/code&gt; 在前一篇的相依性有提到：&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-coercion/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-coercion&#34;&gt;
&lt;p&gt;當運算子相同時會採用相依性的方向來決定計算次序，比較運算子 &lt;code&gt;&amp;lt;&lt;/code&gt; 是左相依性（left-to-right associactivity），&lt;br&gt;所以背後的 Javascript 引擎會如是計算：&lt;br&gt;&lt;code&gt;3 &amp;lt; 2&lt;/code&gt; 獲得 false，&lt;code&gt;false &amp;lt; 1&lt;/code&gt; 由於型別不同 Javascript 引擎強制將 false 使用數字包裹器轉換為數字型別：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;)); &lt;span class=&#34;hljs-comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;0 &amp;lt; 1&lt;/code&gt; 獲得 true。&lt;/p&gt;
&lt;h1 id=&#34;強制型轉&#34;&gt;&lt;a href=&#34;#強制型轉&#34; class=&#34;headerlink&#34; title=&#34;強制型轉&#34;&gt;&lt;/a&gt;強制型轉&lt;/h1&gt;&lt;p&gt;型轉分為主動式強制型轉（Explicit Coercion）與被動式隱式型轉（Implicit Coercion），強制型轉有幾個基本型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;toString&lt;/li&gt;
&lt;li&gt;toNumber&lt;/li&gt;
&lt;li&gt;toBoolean&lt;/li&gt;
&lt;li&gt;toPrimitive&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;toNumber-數字型轉範例&#34;&gt;&lt;a href=&#34;#toNumber-數字型轉範例&#34; class=&#34;headerlink&#34; title=&#34;toNumber 數字型轉範例&#34;&gt;&lt;/a&gt;toNumber 數字型轉範例&lt;/h3&gt;&lt;p&gt;以下是幾個特殊的案例：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Undefined&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;雙等號型轉的悲劇&#34;&gt;&lt;a href=&#34;#雙等號型轉的悲劇&#34; class=&#34;headerlink&#34; title=&#34;雙等號型轉的悲劇&#34;&gt;&lt;/a&gt;雙等號型轉的悲劇&lt;/h3&gt;&lt;p&gt;雙等號（double Equality）會造成嚴重的動態型別轉換，引發不可預期的後果，例如以下的範例：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt; == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#34;&#34;&lt;/span&gt; == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#34;&#34;&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;動態型別呼叫的包裹器？&#34;&gt;&lt;a href=&#34;#動態型別呼叫的包裹器？&#34; class=&#34;headerlink&#34; title=&#34;動態型別呼叫的包裹器？&#34;&gt;&lt;/a&gt;動態型別呼叫的包裹器？&lt;/h4&gt;&lt;p&gt;Javascript 引擎在型別轉換背後做了許多事情，但也非沒有規則可循，&lt;br&gt;以下的範例是 JavaScript 最難以理解的一部分型別轉換：&lt;/p&gt;
&lt;h5 id=&#34;比較運算子呼叫-toString&#34;&gt;&lt;a href=&#34;#比較運算子呼叫-toString&#34; class=&#34;headerlink&#34; title=&#34;比較運算子呼叫 toString&#34;&gt;&lt;/a&gt;比較運算子呼叫 toString&lt;/h5&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[] == &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Boolean&lt;/span&gt;([]); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;這實在是太詭異了!!不過理解一下背後的原理，「當 Array 拿去比較 value 的時候，toString 包裹器會被呼叫，而不是透過　Boolean 轉換」：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;([]); &lt;span class=&#34;hljs-comment&#34;&gt;// &#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&lt;/span&gt; == &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;有趣的-object-object&#34;&gt;&lt;a href=&#34;#有趣的-object-object&#34; class=&#34;headerlink&#34; title=&#34;有趣的 [object object]&#34;&gt;&lt;/a&gt;有趣的 [object object]&lt;/h3&gt;&lt;p&gt;在開發過程查詢 error 或其他型轉情境經常會看見或 alert 噴出 &lt;code&gt;[object object]&lt;/code&gt; 這類特殊的值，剖析一下出現的原理：&lt;/p&gt;
&lt;h4 id=&#34;型轉造成的-object-object&#34;&gt;&lt;a href=&#34;#型轉造成的-object-object&#34; class=&#34;headerlink&#34; title=&#34;型轉造成的 [object object]&#34;&gt;&lt;/a&gt;型轉造成的 [object object]&lt;/h4&gt;&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[] + {}; &lt;span class=&#34;hljs-comment&#34;&gt;// &#39;[object object]&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{} + []; &lt;span class=&#34;hljs-comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一個例子 &lt;code&gt;[] + {};&lt;/code&gt;，這是由於 &lt;code&gt;[]&lt;/code&gt; + 號型轉為空字串 &lt;code&gt;&#39;&#39;&lt;/code&gt;，而 &lt;code&gt;{}&lt;/code&gt; + 號型轉為 ‘[object object]’ 了；String() 直接調用 &lt;code&gt;.toString&lt;/code&gt; 方法來轉換 &lt;code&gt;[]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;第二個例子 &lt;code&gt;{} + []&lt;/code&gt; 中， &lt;code&gt;{}&lt;/code&gt;被當作空區塊無作用，只會運算後方的 &lt;code&gt; + []&lt;/code&gt; 調用 &lt;code&gt;Number([])&lt;/code&gt;，&lt;br&gt;依據型轉規則，陣列屬於物件型別所以型轉數字時會調用 toString 方法來型轉成空字串 &lt;code&gt;String([])&lt;/code&gt; 獲得 &lt;code&gt;&#39;&#39;&lt;/code&gt;，也就是 Number(‘’)，&lt;br&gt;而獲得 0 的結果。&lt;/p&gt;
&lt;blockquote class=&#34;colorquote danger&#34;&gt;&lt;p&gt;值得注意的是 block &lt;code&gt;{}&lt;/code&gt; 放置在最前方會被為 Javascript 引擎視作作用域而非空物件!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;善用嚴格等式（Tripple-Equality）&#34;&gt;&lt;a href=&#34;#善用嚴格等式（Tripple-Equality）&#34; class=&#34;headerlink&#34; title=&#34;善用嚴格等式（Tripple Equality）&#34;&gt;&lt;/a&gt;善用嚴格等式（Tripple Equality）&lt;/h3&gt;&lt;p&gt;不同於雙等號造成的型轉悲劇，三等號可以確保最後獲得的比較結果不會被型轉，也能達到預期的值做開發判斷，是比較良好的開發習慣。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="Javascript" />
        <updated>2022-09-23T14:31:26.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/09/21/zh-tw/js-weird-parts-operators-precendence-and-associactivity/</id>
        <title>克服 Javascript 的奇怪部分 運算子的相依性與優先性</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/09/21/zh-tw/js-weird-parts-operators-precendence-and-associactivity/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在了解以下的特性以前需要知道，JavaScript 是 syncrounous 同步在執行一個表達式的，&lt;br&gt;所以一次只能執行一個片段的程式碼，也就是一個表達式，一個表達式只能包含一個運算子與兩個參數，所以需要決定執行的次序．&lt;/p&gt;
&lt;h1 id=&#34;優先性（precendence）&#34;&gt;&lt;a href=&#34;#優先性（precendence）&#34; class=&#34;headerlink&#34; title=&#34;優先性（precendence）&#34;&gt;&lt;/a&gt;優先性（precendence）&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;When there is more than one operators in one executable code, which operator will be called in order of precedence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當某片段的執行碼具有多個運算子時，那個先執行取決於優先性（precendence）&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; + &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a); &lt;span class=&#34;hljs-comment&#34;&gt;// 23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;從以下圖表可以檢視優先性：&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-operators-precendence-and-associactivity/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-operators-precendence-and-associactivity&#34;&gt;
&lt;p&gt;由於 * 運算子的優先性大於 + 運算子，所以 Javacript 會優先執行 &lt;code&gt;4 * 5&lt;/code&gt; 爾後執行 &lt;code&gt;20 + 3&lt;/code&gt;；&lt;br&gt;等號的優先性只有 2，所以會最後執行 &lt;code&gt;a = 23&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;相依性（Associativity）&#34;&gt;&lt;a href=&#34;#相依性（Associativity）&#34; class=&#34;headerlink&#34; title=&#34;相依性（Associativity）&#34;&gt;&lt;/a&gt;相依性（Associativity）&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;The Associativity is the percedence that determines the operators being called from left to right,&lt;br&gt;or right to left when the percedence are all the same.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當某片段程式碼中所有的運算子優先性相同時，由相依性來決定執行次序為左相依性還是右相依性：&lt;br&gt;左相依性（Left Associativity）表示由左到右執行；右相依性（Right Associativity）表示由右到左執行。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, b = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, c = &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = b = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a); &lt;span class=&#34;hljs-comment&#34;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(b); &lt;span class=&#34;hljs-comment&#34;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(c); &lt;span class=&#34;hljs-comment&#34;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;img src=&#34;/images/js-weird-parts-operators-precendence-and-associactivity/1.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-operators-precendence-and-associactivity&#34;&gt;
&lt;p&gt;從上圖可以了解到 = 運算子的相依性是右相依性（right to left, Right Associativity），&lt;br&gt;當運算子的優先性都相同時 Javacript 會優先執行右邊的運算子，然後向左一個一個執行。&lt;br&gt;&lt;code&gt;a = b = c;&lt;/code&gt; 表達式會先執行 &lt;code&gt;b = 4&lt;/code&gt;，並且回傳 4 之後執行 &lt;code&gt;a = 4&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;大括號（parentheses）最優先&#34;&gt;&lt;a href=&#34;#大括號（parentheses）最優先&#34; class=&#34;headerlink&#34; title=&#34;大括號（parentheses）最優先&#34;&gt;&lt;/a&gt;大括號（parentheses）最優先&lt;/h1&gt;&lt;img src=&#34;/images/js-weird-parts-operators-precendence-and-associactivity/2.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-operators-precendence-and-associactivity&#34;&gt;
&lt;p&gt;當一個表達式中具有多個運算子，大括號（parentheses）裡的運算會最優先：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = (&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; + &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) * &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a); &lt;span class=&#34;hljs-comment&#34;&gt;// 35&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;amp-amp-優先性（precedence）比較&#34;&gt;&lt;a href=&#34;#amp-amp-優先性（precedence）比較&#34; class=&#34;headerlink&#34; title=&#34;&amp;amp;&amp;amp; || 優先性（precedence）比較&#34;&gt;&lt;/a&gt;&amp;amp;&amp;amp; || 優先性（precedence）比較&lt;/h1&gt;&lt;img src=&#34;/images/js-weird-parts-operators-precendence-and-associactivity/3.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-operators-precendence-and-associactivity&#34;&gt;
&lt;p&gt;在判斷式中經常同時使用 &amp;amp;&amp;amp;（and）與 ||（or），需要特別注意 &amp;amp;&amp;amp;（and）優先級是大於 ||（or）的，&lt;br&gt;不過若專案中有使用到 eslint 則會提示盡量補上大括號（parentheses），來協助辨認次序唷！&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="Javascript" />
        <updated>2022-09-21T13:58:56.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/06/05/zh-tw/js-weird-parts-III/</id>
        <title>克服 Javascript 的奇怪部分 單執行緒與同步執行</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/06/05/zh-tw/js-weird-parts-III/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-single-threaded/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-weird-parts-single-threaded&#34;&gt;
&lt;p&gt;這一個章節要來講解 JavaScript 的幾個觀念。&lt;/p&gt;
&lt;h1 id=&#34;單執行緒（Single-Threaded）&#34;&gt;&lt;a href=&#34;#單執行緒（Single-Threaded）&#34; class=&#34;headerlink&#34; title=&#34;單執行緒（Single Threaded）&#34;&gt;&lt;/a&gt;單執行緒（Single Threaded）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;一次一件事&lt;/strong&gt;是重點。&lt;br&gt;這個特性不是瀏覽器的特性，瀏覽器一次可能同時處理多件事情，JavaScript 引擎則是單執行緒的，就像排隊買早餐，老闆娘一次只能處理一位客人，而 JavaScript 也是一次只處理一項指令。&lt;/p&gt;
&lt;h1 id=&#34;同步執行（Synchronous）&#34;&gt;&lt;a href=&#34;#同步執行（Synchronous）&#34; class=&#34;headerlink&#34; title=&#34;同步執行（Synchronous）&#34;&gt;&lt;/a&gt;同步執行（Synchronous）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;順序&lt;/strong&gt;是重點。&lt;br&gt;事情有先後順序，按照順序執行，一次執行一行（或者說一個單元的程式碼，可能是一個陳述式或表達式）。&lt;/p&gt;
&lt;h1 id=&#34;呼叫函式（Function-Invocation）&#34;&gt;&lt;a href=&#34;#呼叫函式（Function-Invocation）&#34; class=&#34;headerlink&#34; title=&#34;呼叫函式（Function Invocation）&#34;&gt;&lt;/a&gt;呼叫函式（Function Invocation）&lt;/h1&gt;&lt;p&gt;觸發或執行一個函式，使用的符號為大括號（parenthesis）。&lt;br&gt;JavaScript 引擎在執行函式呼叫時，會發生幾件事情延續前面的章節：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;呼叫函式&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;b&lt;/span&gt; () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;a&lt;/span&gt; () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;b&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;a&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;創造階段&#34;&gt;&lt;a href=&#34;#創造階段&#34; class=&#34;headerlink&#34; title=&#34;創造階段&#34;&gt;&lt;/a&gt;創造階段&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;全域執行環境（Global Execution Context）首先被創造。&lt;/li&gt;
&lt;li&gt;全域物件（Global object）被創造。&lt;/li&gt;
&lt;li&gt;全域 this 被創造。&lt;/li&gt;
&lt;li&gt;開始編譯階段（Parsing），編譯器巡過一遍所有程式碼發現了函式 b 與 a，在記憶體創造兩個函式的空間並且存放整個函式內容。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;/images/js-weird-parts-III/1.png&#34; class=&#34;&#34; width=&#34;400&#34; height=&#34;200&#34; title=&#34;js-weird-parts-III&#34;&gt;

&lt;h2 id=&#34;執行階段&#34;&gt;&lt;a href=&#34;#執行階段&#34; class=&#34;headerlink&#34; title=&#34;執行階段&#34;&gt;&lt;/a&gt;執行階段&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;整個程式碼的記憶體準備完畢後，開始執行程式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;編譯器解析到&lt;strong&gt;函式 a&lt;/strong&gt;被呼叫，立即於全域執行環境上方，產生並堆疊一個函式 a 的執行環境（Execution Context），放進&lt;strong&gt;執行佇列堆（Execution Stack）&lt;/strong&gt;中，每個執行環境都有自己得記憶體空間存放著變數或函式。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-III/2.png&#34; class=&#34;&#34; width=&#34;400&#34; height=&#34;200&#34; title=&#34;js-weird-parts-III&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最上方的執行佇列會優先執行，進入函式 a 的執行環境（Execution Context）並且解析到函式 b，程序暫停，立即於函式 a 的執行環境上方，產生並堆疊一個函式 b 的執行環境（Execution Context），放進&lt;strong&gt;執行佇列堆（Execution Stack）&lt;/strong&gt;中。&lt;/p&gt;
&lt;img src=&#34;/images/js-weird-parts-III/3.png&#34; class=&#34;&#34; width=&#34;400&#34; height=&#34;200&#34; title=&#34;js-weird-parts-III&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上執行階段也可以拆分成好幾個創造（執行環境），與執行（執行佇列堆最上方的執行環境）階段，在當下的執行環境執行過程中，只要觸發另一個函式，執行暫停然後創造（執行環境）、與執行（執行佇列堆最上方的執行環境），而下方的程式碼不會被解析，除非該執行環境執行完畢並且離開執行佇列堆（Execution Stack）後才會繼續逐行執行。&lt;/p&gt;
&lt;blockquote class=&#34;colorquote Info&#34;&gt;&lt;p&gt;Everytime a function is called, a new execution context is created for that function, the &lt;code&gt;this&lt;/code&gt; variable is created for that function, the variables in it were set up in the creation phase, then the code is executed line by line.&lt;br&gt;whatever is on the top of the execution stack, is currently running synchronously.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;重點整理：&lt;br&gt;當一個函式被觸發或是呼叫，JS 引擎會創造一個屬於該函式的執行環境（execution context）並且放置在執行緒的最上方等待被執行，而該堆疊中具有該函式獨有的執行環境與 This，開始執行並且完成後離開堆疊中（pop out）繼續執行下一個堆疊，只要解析到新的函式被呼叫就會反覆以上行為，直到堆疊不斷（pop out）剩下全域執行環境本身為止。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="Javascript" />
        <updated>2022-06-05T15:31:07.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/05/14/zh-tw/constructor-vs-instance/</id>
        <title>建構子方法與實例化方法</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/05/14/zh-tw/constructor-vs-instance/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/constructor-vs-instance/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;constructor-vs-instance&#34;&gt;

&lt;p&gt;在某天好奇想了解 Vue 3 的 defineProperty 原理搜尋了 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 這個方法時，看見以下說明：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;靜態方法 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 會直接對一個物件定義、或是修改現有的屬性。執行後會回傳定義完的物件。&lt;br&gt;備註：這個方法會直接針對 Object 呼叫建構子（constructor），而不是 Object 型別的實例。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;MDN&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&#34;&gt;Object.defineProperty()&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;其中的&lt;strong&gt;直接針對 Object 呼叫建構子（constructor），而不是 Object 型別的實例&lt;/strong&gt;這句話突然讓我驚醒了，以前一直不能理解 javascript 中呼叫原生方法時，為何會有以下的區別：&lt;/p&gt;
&lt;h2 id=&#34;透過建構器呼叫&#34;&gt;&lt;a href=&#34;#透過建構器呼叫&#34; class=&#34;headerlink&#34; title=&#34;透過建構器呼叫&#34;&gt;&lt;/a&gt;透過建構器呼叫&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Object.methods(objInstance)&lt;/code&gt; -&amp;gt; 例如 Object.keys(someObj)&lt;br&gt;這裡的 Object 是建構函式本身，未實例的藍圖（constructor）。&lt;/p&gt;
&lt;h2 id=&#34;透過實例呼叫&#34;&gt;&lt;a href=&#34;#透過實例呼叫&#34; class=&#34;headerlink&#34; title=&#34;透過實例呼叫&#34;&gt;&lt;/a&gt;透過實例呼叫&lt;/h2&gt;&lt;p&gt;&lt;code&gt;objInstance.methods(parameters)&lt;/code&gt; -&amp;gt; 例如 someObj.hasOwnProperty(‘prop’)&lt;br&gt;這裡的 Object 是實例化的物件（instance）。&lt;/p&gt;
&lt;h2 id=&#34;Constructor-Static-Methods&#34;&gt;&lt;a href=&#34;#Constructor-Static-Methods&#34; class=&#34;headerlink&#34; title=&#34;Constructor Static Methods&#34;&gt;&lt;/a&gt;Constructor Static Methods&lt;/h2&gt;&lt;h4 id=&#34;構造器-靜態方法&#34;&gt;&lt;a href=&#34;#構造器-靜態方法&#34; class=&#34;headerlink&#34; title=&#34;構造器 靜態方法&#34;&gt;&lt;/a&gt;構造器 靜態方法&lt;/h4&gt;&lt;p&gt;以下的例子是呼叫 Object 建構子中的原生 keys 方法，而不需要 new 一個物件實例就可以使用，靜態方法的特色是無需使用任何建構子中的 this 資料就可以直接使用。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;建構子方法&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; someone = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;carrer&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#39;teacher&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;sex&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&#39;male&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; dataKeys = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(someone);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(dataKeys);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// [&#34;name&#34;,&#34;carrer&#34;,&#34;sex&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Instance-methods&#34;&gt;&lt;a href=&#34;#Instance-methods&#34; class=&#34;headerlink&#34; title=&#34;Instance methods&#34;&gt;&lt;/a&gt;Instance methods&lt;/h3&gt;&lt;h4 id=&#34;等號賦值-實例化方法&#34;&gt;&lt;a href=&#34;#等號賦值-實例化方法&#34; class=&#34;headerlink&#34; title=&#34;等號賦值 實例化方法&#34;&gt;&lt;/a&gt;等號賦值 實例化方法&lt;/h4&gt;&lt;p&gt;以下則是呼叫 Array 的實例化 push 方法，雖然也不是透過 new 來建立一個陣列，卻也是使用賦值一個陣列來建立陣列的實例，並且使用原生 push 方法。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;實例化方法 - 賦值&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; friends = [ &lt;span class=&#34;hljs-string&#34;&gt;&#39;Cally&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;Donna&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;Jell&#39;&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;friends.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;Liang&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(friends);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// [&#34;Cally&#34;,&#34;Donna&#34;,&#34;Jell&#34;,&#34;Liang&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;建構器-實例化方法&#34;&gt;&lt;a href=&#34;#建構器-實例化方法&#34; class=&#34;headerlink&#34; title=&#34;建構器 實例化方法&#34;&gt;&lt;/a&gt;建構器 實例化方法&lt;/h4&gt;&lt;p&gt;透過 new 來建立一個陣列。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;實例化方法 - 構造器&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; animals = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;bunny&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;cat&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;puppy&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;hamster&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;animals.&lt;span class=&#34;title function_&#34;&gt;unshift&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;bird&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(animals);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// [&#34;bird&#34;,&#34;bunny&#34;,&#34;cat&#34;,&#34;puppy&#34;,&#34;hamster&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;構造器靜態方法補充&#34;&gt;&lt;a href=&#34;#構造器靜態方法補充&#34; class=&#34;headerlink&#34; title=&#34;構造器靜態方法補充&#34;&gt;&lt;/a&gt;構造器靜態方法補充&lt;/h2&gt;&lt;h4 id=&#34;無法取得構造器的this資料&#34;&gt;&lt;a href=&#34;#無法取得構造器的this資料&#34; class=&#34;headerlink&#34; title=&#34;無法取得構造器的this資料&#34;&gt;&lt;/a&gt;無法取得構造器的this資料&lt;/h4&gt;&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;The static method also cannot see the instance variable state so if we try to call the nonstatic method from the static method compiler will complain.&lt;/li&gt;
&lt;li&gt;The static method can be used to create utility functions.&lt;br&gt;&lt;a href=&#34;https://www.educba.com/javascript-static-method/&#34;&gt;https://www.educba.com/javascript-static-method/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;從上述可以得知靜態方法是不能取用構造器建構子（constructor）內的變數的（this binding），通常會撰寫純函式（pure function）以保持無狀態的特性，如同 Math 方法。&lt;br&gt;靜態方法適合用來當作全局複用的函式，適合較無副作用的邏輯。&lt;/p&gt;
&lt;h2 id=&#34;兩種方法的原型鍊關係&#34;&gt;&lt;a href=&#34;#兩種方法的原型鍊關係&#34; class=&#34;headerlink&#34; title=&#34;兩種方法的原型鍊關係&#34;&gt;&lt;/a&gt;兩種方法的原型鍊關係&lt;/h2&gt;&lt;p&gt;若展開一個實例化的物件，會發現：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建構器方法存在於建構子物件中（constructor），且只能透過建構器呼叫，例如 Object.assign()；&lt;/li&gt;
&lt;li&gt;實例化方法則存在於原型上（prototype），需要實例化之後才能呼叫，例如 objInstance.toLocaleString()&lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <category term="constructor" />
        <category term="instance" />
        <category term="methods" />
        <updated>2022-05-14T20:37:03.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/03/12/zh-tw/short-circuit-and-optional-chaining/</id>
        <title>短路解析 &amp; 可選鍊修飾符</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/03/12/zh-tw/short-circuit-and-optional-chaining/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/short-circuit-and-optional-chaining/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;短路解析與可選練修飾符&#34;&gt;
&lt;p&gt;在開發的情境上無論是串接 API 或者是資料判斷，都需要追求便捷而好懂的方式來維護程式碼，以利於當資料判斷變得複雜臃腫時仍可以邏輯清晰。而對於程式新手來說&lt;code&gt;undefined&lt;/code&gt;（未定義）、&lt;code&gt;null&lt;/code&gt;（空值）或者是&lt;code&gt;0&lt;/code&gt;（零）在判斷上是很容易掉進去的陷阱，因為判定的方法了解的不深而陷入困境。&lt;/p&gt;
&lt;h1 id=&#34;理解真假值&#34;&gt;&lt;a href=&#34;#理解真假值&#34; class=&#34;headerlink&#34; title=&#34;理解真假值&#34;&gt;&lt;/a&gt;理解真假值&lt;/h1&gt;&lt;p&gt;先介紹 truthy(真值) 與 falsy(假值)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;truthy：非 falsy 的值，或者是表達式結果為 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;falsy：&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;、非數字 &lt;code&gt;NaN&lt;/code&gt;、數字 &lt;code&gt;0&lt;/code&gt;、數字 &lt;code&gt;-0&lt;/code&gt;、BigInt &lt;code&gt;0n&lt;/code&gt;、空字串&lt;code&gt;&#39;&#39;&lt;/code&gt;(字串長度為 0)，或者是表達式結果為 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下介紹幾種邏輯判斷的捷徑：&lt;/p&gt;
&lt;h1 id=&#34;邏輯運算子-amp-amp&#34;&gt;&lt;a href=&#34;#邏輯運算子-amp-amp&#34; class=&#34;headerlink&#34; title=&#34;邏輯運算子 &amp;amp;&amp;amp; ||&#34;&gt;&lt;/a&gt;邏輯運算子 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;code&gt;||&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;舉個栗子&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;邏輯運算子&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; numberAND = &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; numberOR = -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(numberAND &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt; &amp;amp;&amp;amp; numberAND &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;哎呀&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(numberOR &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt; || numberOR &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;黑唷&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;人類的理解&#34;&gt;&lt;a href=&#34;#人類的理解&#34; class=&#34;headerlink&#34; title=&#34;人類的理解&#34;&gt;&lt;/a&gt;人類的理解&lt;/h3&gt;&lt;p&gt;當 numberAND 大於 5 且&lt;strong&gt;同時&lt;/strong&gt;小於 7 值執行 &lt;code&gt;console.log(&#39;符合 &amp;amp;&amp;amp;&#39;)&lt;/code&gt;；當 numberOR 大於 5 &lt;strong&gt;或者&lt;/strong&gt;小於 7 值執行 &lt;code&gt;console.log(&#39;符合 ||&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;電腦的理解&#34;&gt;&lt;a href=&#34;#電腦的理解&#34; class=&#34;headerlink&#34; title=&#34;電腦的理解&#34;&gt;&lt;/a&gt;電腦的理解&lt;/h3&gt;&lt;p&gt;當左邊的表達式 &lt;code&gt;numberAND &amp;gt; 5&lt;/code&gt; 結果為 &lt;code&gt;false&lt;/code&gt; 則跳過右邊不執行 &lt;code&gt;numberAND &amp;lt; 7&lt;/code&gt;，直接&lt;strong&gt;跳出&lt;/strong&gt;程式。&lt;br&gt;當左邊的表達式 &lt;code&gt;numberOR &amp;gt; 5&lt;/code&gt; 結果為 &lt;code&gt;true&lt;/code&gt; 則跳過右邊不執行 &lt;code&gt;numberAND &amp;lt; 7&lt;/code&gt;，直接&lt;strong&gt;進入&lt;/strong&gt;程式。&lt;/p&gt;
&lt;p&gt;結論為，當左邊的表達式符合條件，&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 的 if 直接跳出；&lt;code&gt;||&lt;/code&gt; 的 if 直接進入。&lt;br&gt;來理一理箇中原由吧！&lt;/p&gt;
&lt;h1 id=&#34;短路解析-Short-Circuit&#34;&gt;&lt;a href=&#34;#短路解析-Short-Circuit&#34; class=&#34;headerlink&#34; title=&#34;短路解析(Short Circuit)&#34;&gt;&lt;/a&gt;短路解析(Short Circuit)&lt;/h1&gt;&lt;p&gt;短路我個人覺得沒有捷徑來得好懂，短路比較讓人聯想為損毀或壞掉的電子產品，而捷徑則代表透過偷吃步或者抄捷徑的方式以取得一樣的結果。這裡的短路較接近後者，js 運行上的偷吃步：&lt;/p&gt;
&lt;h3 id=&#34;amp-amp-的短路解析&#34;&gt;&lt;a href=&#34;#amp-amp-的短路解析&#34; class=&#34;headerlink&#34; title=&#34;&amp;amp;&amp;amp; 的短路解析&#34;&gt;&lt;/a&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 的短路解析&lt;/h3&gt;&lt;p&gt;當左邊的表達式為 &lt;code&gt;false&lt;/code&gt; 就返回左邊的表達式結果，並且&lt;strong&gt;直接忽視&lt;/strong&gt;右邊的表達式結果，反之執行右邊的表達式。&lt;/p&gt;
&lt;h3 id=&#34;的短路解析&#34;&gt;&lt;a href=&#34;#的短路解析&#34; class=&#34;headerlink&#34; title=&#34;|| 的短路解析&#34;&gt;&lt;/a&gt;&lt;code&gt;||&lt;/code&gt; 的短路解析&lt;/h3&gt;&lt;p&gt;當左邊的表達式為 &lt;code&gt;true&lt;/code&gt; 就返回左邊的表達式結果，並且&lt;strong&gt;直接忽視&lt;/strong&gt;右邊的表達式結果，反之執行右邊的表達式。&lt;/p&gt;
&lt;p&gt;以上可以知道 js 執行完左邊的表達式之後，若符合條件則直接跳過右邊的表達式(不解析亦不執行)，相對來講當開發人員在理解短路解析時就可以按照這樣的邏輯去快速判斷結果。&lt;/p&gt;
&lt;p&gt;速記法：AND&lt;code&gt;false&lt;/code&gt;跳出、OR&lt;code&gt;true&lt;/code&gt;進入(執行)。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;if you use &lt;code&gt;||&lt;/code&gt; to provide some default value to another variable foo, you may encounter unexpected behaviors if you consider some falsy values as usable (e.g., &lt;code&gt;&#39;&#39;&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;可選鍊修飾符-Optional-chaining&#34;&gt;&lt;a href=&#34;#可選鍊修飾符-Optional-chaining&#34; class=&#34;headerlink&#34; title=&#34;可選鍊修飾符(Optional chaining)&#34;&gt;&lt;/a&gt;可選鍊修飾符(Optional chaining)&lt;/h1&gt;&lt;p&gt;舉個栗子&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;可選鍊修飾符&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; user = {};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(user.&lt;span class=&#34;hljs-property&#34;&gt;address&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(user.&lt;span class=&#34;hljs-property&#34;&gt;address&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;street&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(user.&lt;span class=&#34;hljs-property&#34;&gt;address&lt;/span&gt;?.&lt;span class=&#34;hljs-property&#34;&gt;street&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在這個範例中，user 物件的清單中有部分的使用者缺少了 &lt;code&gt;address&lt;/code&gt; 這個屬性，但是大部分的使用者都具有該屬性時，就可以使用可選鍊修飾符來避免程式噴錯而中斷，但是需注意避免&lt;strong&gt;過度使用&lt;/strong&gt;可選鍊修飾符&lt;/p&gt;
&lt;h1 id=&#34;空值合併運算子-Nullish-coalescing-operator&#34;&gt;&lt;a href=&#34;#空值合併運算子-Nullish-coalescing-operator&#34; class=&#34;headerlink&#34; title=&#34;空值合併運算子(Nullish coalescing operator) ??&#34;&gt;&lt;/a&gt;空值合併運算子(Nullish coalescing operator) &lt;code&gt;??&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;舉個栗子&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;空值合併運算子&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;notNullish&lt;/span&gt; (a, b) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a ?? b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;notNullish (&lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;notNullish (&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;notNullish (&lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;notNullish (&lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// &#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;ES2020（ES11）提供的「空值合併運算子」，支援度需要搭配 babel 套件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;??&lt;/code&gt;常常與邏輯運算子 &lt;code&gt;||&lt;/code&gt; 比較，前者返回非 &lt;code&gt;undefined&lt;/code&gt; 與 &lt;code&gt;null&lt;/code&gt; 的表達式，後者返回非 falsy 的表達式。過濾的條件上有區別，可以依照需求使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;的短路解析-1&#34;&gt;&lt;a href=&#34;#的短路解析-1&#34; class=&#34;headerlink&#34; title=&#34;?? 的短路解析&#34;&gt;&lt;/a&gt;&lt;code&gt;??&lt;/code&gt; 的短路解析&lt;/h3&gt;&lt;p&gt;當左邊的表達式為 非 &lt;code&gt;undefined&lt;/code&gt; 與 &lt;code&gt;null&lt;/code&gt; 就返回左邊的表達式結果，並且&lt;strong&gt;直接忽視&lt;/strong&gt;右邊的表達式結果，反之執行右邊的表達式。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <category term="shortCircuit" />
        <category term="optionalChaining" />
        <category term="tricks" />
        <updated>2022-03-12T13:55:02.000Z</updated>
    </entry>
</feed>