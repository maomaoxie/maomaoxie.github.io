{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"api\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/02/28/zh-tw/http-methods/",
            "url": "http://maomaoxie.github.io/2022/02/28/zh-tw/http-methods/",
            "title": "HTTP Methods 介紹",
            "date_published": "2022-02-28T03:03:47.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/http-methods/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"[http-methods [http-methods]]\">\n<p>圖片來源：<a href=\"https://www.jianshu.com/p/ac29da71601d\">https://www.jianshu.com/p/ac29da71601d</a></p>\n<p>身為技術人不可不知的技術事：其實你每天都在使用 HTTP 的 Methods，但你不知道而已。<br>當你在瀏覽器輸入一串網址並且按下 enter 或者是按下一個 google 搜尋的超連結，就已經完成一個 HTTP <code>GET</code> Methods 的流程了！<br>Client 端網路資料的傳輸，按照功能屬性分為幾個類別：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Methods</th>\n<th align=\"left\">目的</th>\n<th align=\"left\">說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GET</td>\n<td align=\"left\">取得資料</td>\n<td align=\"left\">經常會搭配 query string 參數使用，使用者可以在 URL 看到資料</td>\n</tr>\n<tr>\n<td align=\"left\">POST</td>\n<td align=\"left\">傳送資料</td>\n<td align=\"left\">可以將要求內容隱藏在 body 中，使用者看不見</td>\n</tr>\n<tr>\n<td align=\"left\">PUT</td>\n<td align=\"left\">更改整筆資料</td>\n<td align=\"left\">通常是一個註冊表單提供第一次來訪的使用者填寫，server 端會整筆更新</td>\n</tr>\n<tr>\n<td align=\"left\">PATCH</td>\n<td align=\"left\">更改部分資料</td>\n<td align=\"left\">可能是會員中心的部分資料修改，例如地址或手機，server 端會只更新修改的部分</td>\n</tr>\n<tr>\n<td align=\"left\">DELETE</td>\n<td align=\"left\">刪除資料</td>\n<td align=\"left\">比較單純的功能，就是刪除資料</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"GET-方法（READ）\"><a href=\"#GET-方法（READ）\" class=\"headerlink\" title=\"GET 方法（READ）\"></a>GET 方法（READ）</h1><img src=\"/images/http-methods/1.png\" class=\"\" width=\"500\" height=\"200\" title=\"[http-methods [http-methods]]\">\n<p>圖片來源：hiskio 課程 API 整合實戰｜RESTful 第三方串接應用</p>\n<p>GET 取得資料（read）的條件是寫在 query string 的<code>?</code>後方，key-value 的鍵值對來代表欄位跟內容。<br>例如 <code>?name=jobe&amp;email=jobe</code>，<code>name</code> 對應<code>form</code> 表單裡面的 input <code>name</code> ，為欄位名稱，等號後方的值就是使用者自己填寫的 value 內容：</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"hljs-string\">\"http://localhost:4000\"</span>&gt;</span><br><span class=\"line\">  <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"email\"</span>&gt;</span>Email<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>送出<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/http-methods/2.png\" class=\"\" width=\"500\" height=\"200\" title=\"[http-methods [http-methods]]\">\n<img src=\"/images/http-methods/3.png\" class=\"\" width=\"500\" height=\"200\" title=\"[http-methods [http-methods]]\">\n<blockquote class=\"colorquote info\"><p><code>GET</code> 網址最多只能兩千多個字，包含參數等。</p>\n</blockquote>\n<blockquote class=\"colorquote info\"><p>URL 的萬國編碼機制需要經過 <code>encodeURI()</code>、<code>encodeURIcomponent()</code> 等方法解密過才可閱讀。</p>\n</blockquote>\n\n<hr>\n<h1 id=\"POST-方法（CREATE）\"><a href=\"#POST-方法（CREATE）\" class=\"headerlink\" title=\"POST 方法（CREATE）\"></a>POST 方法（CREATE）</h1><img src=\"/images/http-methods/4.png\" class=\"\" width=\"500\" height=\"200\" title=\"[http-methods [http-methods]]\">\n<p>圖片來源：hiskio 課程 API 整合實戰｜RESTful 第三方串接應用</p>\n<p><code>POST</code> 方法旨在創造一筆新的資料，發送到 Origin server 接收，可以將資料隱藏在 <code>body</code> 中避免被使用窺視，使用者在網頁 URL 看起來也乾淨簡潔。</p>\n<blockquote class=\"colorquote info\"><p><code>POST</code> 方法可傳送的資料量基本沒有限制，端看 server 這邊的程式是否有特別限制多少 mb。</p>\n</blockquote>\n\n<hr>\n<h1 id=\"PUT-amp-PATCH（UPDATE）\"><a href=\"#PUT-amp-PATCH（UPDATE）\" class=\"headerlink\" title=\"PUT &amp; PATCH（UPDATE）\"></a>PUT &amp; PATCH（UPDATE）</h1><p>這兩個方法旨在更新現有的資料內容：<br><code>PUT</code>會將整個表單內容根據填寫的資料全部更新，有空白沒填的地方照樣更新成空白的狀態，適合用在第一次填寫資料的訪客，例如註冊會員、初診的病患要掛號。<br><code>PATCH</code>則是只更新部分內容而已，沒有變動的地方維持原樣，適合用在填寫過完整資料而只想部分更改的情境，例如修改會員寄送地址、復診的病患要掛號等。</p>\n<p>這兩個方法並非 HTTP 創造的，而是方便網站開發人員依據自己的資料取向需求來設計表單欄位給訪客填寫，再選擇適合的 HTTP Methods。</p>\n<hr>\n<h1 id=\"DELETE（DELETE）\"><a href=\"#DELETE（DELETE）\" class=\"headerlink\" title=\"DELETE（DELETE）\"></a>DELETE（DELETE）</h1><p>由於刪除是一個不能回頭的行為，雖然有的網站在後端機制不會真的讓使用者刪除，只是讓你看不到而已，不過刪除的要求還是被特別獨立出來，警示開發人員慎用這個方法。</p>\n<hr>\n<blockquote><p>圖片來源：hiskio 課程 API 整合實戰｜RESTful 第三方串接應用</p>\n</blockquote></body></html>",
            "tags": [
                "api",
                "http",
                "request",
                "response",
                "httpMethods"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/02/25/zh-tw/web-socket-and-web-hook/",
            "url": "http://maomaoxie.github.io/2022/02/25/zh-tw/web-socket-and-web-hook/",
            "title": "Web Socket v.s Web Hook",
            "date_published": "2022-02-25T03:29:08.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/web-socket-and-web-hook/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"[web-socket-and-web-hook [web-socket-and-web-hook]]\">\n<p>API 的形式有兩大宗：<br>Web Hook 與 Web Socket，而他們有甚麼差異呢？</p>\n<h1 id=\"被動式-Web-Hook\"><a href=\"#被動式-Web-Hook\" class=\"headerlink\" title=\"被動式 Web Hook\"></a>被動式 Web Hook</h1><p>例如 Line Bot，server 會先預測使用者的動作與需求（events），設計出相對的程式並維護，等待使用者發出要求才動作。</p>\n<h1 id=\"主動式-Web-Socket\"><a href=\"#主動式-Web-Socket\" class=\"headerlink\" title=\"主動式 Web Socket\"></a>主動式 Web Socket</h1><p>兩方的資料交互，例如 client 與 server、server 與 server。<br>應用場景如聊天功能：facebook messenger 或 Line 等，Web Socket 的技術可以「即時的」(real time)做出資料傳遞。<br>當你打開 facebook messenger 的視窗，Web Socket server 就會與 client 瀏覽器端 handshake 保持通訊暢通，持續監聽對話要求並回應(opened and persistent connection)</p>\n<p>參考資料：</p>\n<blockquote><p>hiskio 課程 API 整合實戰｜RESTful 第三方串接應用</p>\n</blockquote></body></html>",
            "tags": [
                "api",
                "WebSocket",
                "WebHook"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/02/25/zh-tw/graph-ql-api/",
            "url": "http://maomaoxie.github.io/2022/02/25/zh-tw/graph-ql-api/",
            "title": "Graph QL 新世代 API",
            "date_published": "2022-02-25T02:48:36.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/graph-ql-api/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"[css-less [css-less]]\">\n<p>隨著行動裝置越來越多元，服務與資料需求越來越錯綜複雜，因應這樣背景的 Graph QL API 就誕生啦！</p>\n<p>2012 年 facebook 內部研發出來的新形態 API，2015 年提出發表，特點是前端可以直接進資料庫，不需要透過後端查詢撈取資料。<br>概念有一點類似用前端語言操作 <code>MySQL</code>。前端也擁有更彈性的空間來制定查詢資料的規則與方式，有更大話語權，但相對來講也增加資料設計的難度，在思考的維度上需要更廣更深才能靈活應付多變的資料需求。</p>\n<h1 id=\"Graph-QL-操作概念\"><a href=\"#Graph-QL-操作概念\" class=\"headerlink\" title=\"Graph QL 操作概念\"></a>Graph QL 操作概念</h1><img src=\"/images/graph-ql-api/1.png\" class=\"\" width=\"800\" height=\"200\" title=\"[css-less [css-less]]\">\n<blockquote>\n<p>使用者透過輸入定義好的語法，取得所需的資料 (如 <code>SELECT</code>) 或是修改指定的資料 (如 <code>CREATE</code> 、 <code>UPDATE</code>)。</p>\n</blockquote>\n<h2 id=\"資料的格式\"><a href=\"#資料的格式\" class=\"headerlink\" title=\"資料的格式\"></a>資料的格式</h2><h4 id=\"前端-request-長相\"><a href=\"#前端-request-長相\" class=\"headerlink\" title=\"前端 request 長相\"></a>前端 request 長相</h4><figure class=\"highlight javascript hljs\"><figcaption><span>example</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query {</span><br><span class=\"line\">  <span class=\"title class_\">User</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'aefk34kasl9'</span>) {</span><br><span class=\"line\">    name</span><br><span class=\"line\">    posts{</span><br><span class=\"line\">      title</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"title function_\">followers</span>(<span class=\"hljs-params\">last: <span class=\"hljs-number\">3</span></span>){</span><br><span class=\"line\">      name</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"資料庫-response-長相\"><a href=\"#資料庫-response-長相\" class=\"headerlink\" title=\"資料庫 response 長相\"></a>資料庫 response 長相</h4><figure class=\"highlight javascript hljs\"><figcaption><span>example</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"hljs-string\">\"data\"</span>: {</span><br><span class=\"line\">    <span class=\"hljs-string\">\"User\"</span>: {</span><br><span class=\"line\">      <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Mawchu\"</span></span><br><span class=\"line\">      <span class=\"hljs-string\">\"posts\"</span>:[</span><br><span class=\"line\">        { <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"喵喵的一天\"</span> }</span><br><span class=\"line\">      ]</span><br><span class=\"line\">      <span class=\"hljs-string\">\"followers\"</span>: [</span><br><span class=\"line\">        { <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Cally\"</span> },</span><br><span class=\"line\">        { <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Donna\"</span> },</span><br><span class=\"line\">        { <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Jell\"</span> },</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h1><blockquote>\n<p>Schema，香港和中國大陸翻譯為模式或架構，在資料庫系統中是形式語言描述的一種結構，是對象的集合，可包含各種對象如：表、欄位、關係模型、視圖、索引、包、存儲過程、子程序、隊列、觸發器、數據類型、序列、物化視圖、同義詞（synonym）、database link、directory、XML schema等。</p>\n</blockquote>\n<p>參考資料：</p>\n<blockquote><p>hiskio 課程 API 整合實戰｜RESTful 第三方串接應用<br><a href=\"https://ithelp.ithome.com.tw/articles/10200678\">https://ithelp.ithome.com.tw/articles/10200678</a></p>\n</blockquote></body></html>",
            "tags": [
                "api",
                "graphQL",
                "facebook"
            ]
        }
    ]
}