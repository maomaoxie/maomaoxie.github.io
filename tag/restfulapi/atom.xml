<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://maomaoxie.github.io</id>
    <title>Mawchu 貓奴前端的天空 • Posts by &#34;restfulapi&#34; tag</title>
    <link href="http://maomaoxie.github.io" />
    <updated>2022-02-24T15:20:50.000Z</updated>
    <category term="safari" />
    <category term="javaScript" />
    <category term="preventDefault" />
    <category term="ios" />
    <category term="mobile" />
    <category term="javascript" />
    <category term="constructor" />
    <category term="instance" />
    <category term="methods" />
    <category term="git" />
    <category term="github" />
    <category term="sourceTree" />
    <category term="api" />
    <category term="graphQL" />
    <category term="facebook" />
    <category term="hexo" />
    <category term="submodule" />
    <category term="rss" />
    <category term="backEnd" />
    <category term="node" />
    <category term="express" />
    <category term="router" />
    <category term="http" />
    <category term="httpHeader" />
    <category term="request" />
    <category term="response" />
    <category term="https" />
    <category term="status" />
    <category term="httpMethods" />
    <category term="Javascript" />
    <category term="type" />
    <category term="laravel" />
    <category term="php" />
    <category term="linux" />
    <category term="blade" />
    <category term="wsl2" />
    <category term="layout" />
    <category term="migration" />
    <category term="sql" />
    <category term="public" />
    <category term="static" />
    <category term="tailwind" />
    <category term="css" />
    <category term="less" />
    <category term="processors" />
    <category term="env" />
    <category term="process" />
    <category term="dotenv" />
    <category term="webService" />
    <category term="restfulApi" />
    <category term="shortCircuit" />
    <category term="optionalChaining" />
    <category term="tricks" />
    <category term="vue" />
    <category term="vue3" />
    <category term="compositionAPI" />
    <category term="vite" />
    <category term="typescript" />
    <category term="vuetify" />
    <category term="html" />
    <category term="WebSocket" />
    <category term="WebHook" />
    <category term="wordpress" />
    <category term="dns" />
    <category term="cdn" />
    <entry>
        <id>http://maomaoxie.github.io/2022/02/24/zh-tw/restful-api-and-web-service/</id>
        <title>初探 Web service</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/02/24/zh-tw/restful-api-and-web-service/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/restful-api-and-web-service/0.png&#34; class=&#34;&#34; width=&#34;600&#34; height=&#34;200&#34; title=&#34;restful-api-and-web-service&#34;&gt;
&lt;p&gt;圖片來源：hiskio 課程 API 整合實戰｜RESTful 第三方串接應用&lt;/p&gt;
&lt;p&gt;串接 API 是前後端分離的框架興盛之後最重要的課題之一啦！但是對初探網頁程式領域的菜菜子來說這個世界太廣太深，讓人望之卻步，萬事起頭難，就先來理解一下 API 武林世界裡的的兩大流派吧！&lt;/p&gt;
&lt;h1 id=&#34;SOAP-amp-XML&#34;&gt;&lt;a href=&#34;#SOAP-amp-XML&#34; class=&#34;headerlink&#34; title=&#34;SOAP &amp;amp; XML&#34;&gt;&lt;/a&gt;SOAP &amp;amp; XML&lt;/h1&gt;&lt;h4 id=&#34;企業類型&#34;&gt;&lt;a href=&#34;#企業類型&#34; class=&#34;headerlink&#34; title=&#34;企業類型&#34;&gt;&lt;/a&gt;企業類型&lt;/h4&gt;&lt;p&gt;成立已久的正宗流派，有許多資深企業的系統愛用的 API 串接方式，例如政府機構或是建案公司等老牌廠商。&lt;/p&gt;
&lt;h4 id=&#34;資料格式&#34;&gt;&lt;a href=&#34;#資料格式&#34; class=&#34;headerlink&#34; title=&#34;資料格式&#34;&gt;&lt;/a&gt;資料格式&lt;/h4&gt;&lt;p&gt;傳遞資料多為較嚴謹與複雜的 &lt;code&gt;SOAP&lt;/code&gt;﹑&lt;code&gt;Xml&lt;/code&gt; 格式，由於規範的細節較多而且有一定的流程要走完，容易造成程式的肥大與艱澀，當用在小型專案時往往會有殺雞焉用牛刀之感，在準備期會比較漫長且學習曲線高，但是對於大型系統的整合還是有其優點。&lt;/p&gt;
&lt;h4 id=&#34;程式取向&#34;&gt;&lt;a href=&#34;#程式取向&#34; class=&#34;headerlink&#34; title=&#34;程式取向&#34;&gt;&lt;/a&gt;程式取向&lt;/h4&gt;&lt;p&gt;當初由微軟所開發，所以程式取向多限制在 IIS 微軟開發體系，例如 &lt;code&gt;.net&lt;/code&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;RESTful-API&#34;&gt;&lt;a href=&#34;#RESTful-API&#34; class=&#34;headerlink&#34; title=&#34;RESTful API&#34;&gt;&lt;/a&gt;RESTful API&lt;/h1&gt;&lt;h4 id=&#34;企業類型-1&#34;&gt;&lt;a href=&#34;#企業類型-1&#34; class=&#34;headerlink&#34; title=&#34;企業類型&#34;&gt;&lt;/a&gt;企業類型&lt;/h4&gt;&lt;p&gt;新興產業或新創公司等現代化的企業偏愛的 API 串接方式，為求快速開發多選用輕量的 &lt;code&gt;RESTful API&lt;/code&gt; 以求在競爭激烈的市場上異軍突起。&lt;/p&gt;
&lt;h4 id=&#34;資料格式-1&#34;&gt;&lt;a href=&#34;#資料格式-1&#34; class=&#34;headerlink&#34; title=&#34;資料格式&#34;&gt;&lt;/a&gt;資料格式&lt;/h4&gt;&lt;p&gt;傳遞資料多為簡單易懂的 &lt;code&gt;Json&lt;/code&gt;，開發程式也容易快速，可以靈活地符合大或小的資料需求．不過相對來講規範與細節也比較粗糙與鬆散，需要在準備期規範好 API 的命名規則與資料邏輯，不然容易導致 API 很多但功能性重複等問題。&lt;/p&gt;
&lt;h4 id=&#34;程式取向-1&#34;&gt;&lt;a href=&#34;#程式取向-1&#34; class=&#34;headerlink&#34; title=&#34;程式取向&#34;&gt;&lt;/a&gt;程式取向&lt;/h4&gt;&lt;p&gt;任何程式語言都可以開發出來的 API．不侷限於哪種體系的程式，例如 &lt;code&gt;python&lt;/code&gt;﹑&lt;code&gt;php&lt;/code&gt;﹑&lt;code&gt;ruby&lt;/code&gt;﹑&lt;code&gt;node.js&lt;/code&gt;等等。&lt;/p&gt;
&lt;p&gt;而今的開發環境裡新興的流派已經逐漸為 RESTful API 所佔有，資深或金融機構也逐步轉型為輕量的 API 資料交換方式。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;SOAP-v-s-REST&#34;&gt;&lt;a href=&#34;#SOAP-v-s-REST&#34; class=&#34;headerlink&#34; title=&#34;SOAP v.s REST&#34;&gt;&lt;/a&gt;SOAP v.s REST&lt;/h1&gt;&lt;h4 id=&#34;REST-優於-SOAP&#34;&gt;&lt;a href=&#34;#REST-優於-SOAP&#34; class=&#34;headerlink&#34; title=&#34;REST 優於 SOAP&#34;&gt;&lt;/a&gt;REST 優於 SOAP&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;REST 提供更多元資料格式。SOAP 只有 XML。&lt;br&gt;基於 JSON，REST 被公認是易於處理的。&lt;br&gt;基於 JSON，REST 提供對瀏覽器更好的支援。&lt;br&gt;REST 提供優越的性能。特別指快取資料。&lt;br&gt;世界級大公司主要服務協定。&lt;br&gt;REST 一般而言比較快且省頻寬。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;SOAP-優於-REST&#34;&gt;&lt;a href=&#34;#SOAP-優於-REST&#34; class=&#34;headerlink&#34; title=&#34;SOAP 優於 REST&#34;&gt;&lt;/a&gt;SOAP 優於 REST&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;SOAP 是標準 HTTP 協定，能更方便通過防火牆和Proxy而不對協定本身進行修改。&lt;br&gt;如果你需要處理 ACID 交易，那麼 SOAP 是不錯的方向。&lt;br&gt;SOAP 擁有各種 WS- 擴充服務，擁有高可擴充性。&lt;br&gt;B2B 的世界，安全與穩定重於一切。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;&lt;p&gt;Bruce 的一些心得&lt;/p&gt;
&lt;p&gt;青菜蘿蔔各有所好，並不一樣是 REST 完勝，例如，之前有一陣子在忙的 B2B Biztalk 專案，在加解密(安全)部分，基於 XML 的 SOAP 就比 REST 更為合適。但基於 XML 的協定有個很明顯的缺點，就是當來源資料量成長一些些，產出的 XML 資料量會明顯成長很多。資料解析下，拜 JSON.NET 之類的框架(如之前介紹過的 Jil)幫忙，JSON 格式的處理是非常簡單的。但如果有一天，你真的碰到要處理 XML，那麼不要忘記 LINQ to XML 這個技術就好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;參考資料：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.kkbruce.net/2018/04/soap-with-rest-good-parts.html#.YheofuhBxPY&#34;&gt;https://blog.kkbruce.net/2018/04/soap-with-rest-good-parts.html#.YheofuhBxPY&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="webService" />
        <category term="restfulApi" />
        <updated>2022-02-24T15:20:50.000Z</updated>
    </entry>
</feed>