{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"restfulapi\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/02/24/zh-tw/restful-api-and-web-service/",
            "url": "http://maomaoxie.github.io/2022/02/24/zh-tw/restful-api-and-web-service/",
            "title": "初探 Web service",
            "date_published": "2022-02-24T23:20:50.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/restful-api-and-web-service/0.png\" class=\"\" width=\"600\" height=\"200\" title=\"restful-api-and-web-service\">\n<p>圖片來源：hiskio 課程 API 整合實戰｜RESTful 第三方串接應用</p>\n<p>串接 API 是前後端分離的框架興盛之後最重要的課題之一啦！但是對初探網頁程式領域的菜菜子來說這個世界太廣太深，讓人望之卻步，萬事起頭難，就先來理解一下 API 武林世界裡的的兩大流派吧！</p>\n<h1 id=\"SOAP-amp-XML\"><a href=\"#SOAP-amp-XML\" class=\"headerlink\" title=\"SOAP &amp; XML\"></a>SOAP &amp; XML</h1><h4 id=\"企業類型\"><a href=\"#企業類型\" class=\"headerlink\" title=\"企業類型\"></a>企業類型</h4><p>成立已久的正宗流派，有許多資深企業的系統愛用的 API 串接方式，例如政府機構或是建案公司等老牌廠商。</p>\n<h4 id=\"資料格式\"><a href=\"#資料格式\" class=\"headerlink\" title=\"資料格式\"></a>資料格式</h4><p>傳遞資料多為較嚴謹與複雜的 <code>SOAP</code>﹑<code>Xml</code> 格式，由於規範的細節較多而且有一定的流程要走完，容易造成程式的肥大與艱澀，當用在小型專案時往往會有殺雞焉用牛刀之感，在準備期會比較漫長且學習曲線高，但是對於大型系統的整合還是有其優點。</p>\n<h4 id=\"程式取向\"><a href=\"#程式取向\" class=\"headerlink\" title=\"程式取向\"></a>程式取向</h4><p>當初由微軟所開發，所以程式取向多限制在 IIS 微軟開發體系，例如 <code>.net</code>。</p>\n<hr>\n<h1 id=\"RESTful-API\"><a href=\"#RESTful-API\" class=\"headerlink\" title=\"RESTful API\"></a>RESTful API</h1><h4 id=\"企業類型-1\"><a href=\"#企業類型-1\" class=\"headerlink\" title=\"企業類型\"></a>企業類型</h4><p>新興產業或新創公司等現代化的企業偏愛的 API 串接方式，為求快速開發多選用輕量的 <code>RESTful API</code> 以求在競爭激烈的市場上異軍突起。</p>\n<h4 id=\"資料格式-1\"><a href=\"#資料格式-1\" class=\"headerlink\" title=\"資料格式\"></a>資料格式</h4><p>傳遞資料多為簡單易懂的 <code>Json</code>，開發程式也容易快速，可以靈活地符合大或小的資料需求．不過相對來講規範與細節也比較粗糙與鬆散，需要在準備期規範好 API 的命名規則與資料邏輯，不然容易導致 API 很多但功能性重複等問題。</p>\n<h4 id=\"程式取向-1\"><a href=\"#程式取向-1\" class=\"headerlink\" title=\"程式取向\"></a>程式取向</h4><p>任何程式語言都可以開發出來的 API．不侷限於哪種體系的程式，例如 <code>python</code>﹑<code>php</code>﹑<code>ruby</code>﹑<code>node.js</code>等等。</p>\n<p>而今的開發環境裡新興的流派已經逐漸為 RESTful API 所佔有，資深或金融機構也逐步轉型為輕量的 API 資料交換方式。</p>\n<hr>\n<h1 id=\"SOAP-v-s-REST\"><a href=\"#SOAP-v-s-REST\" class=\"headerlink\" title=\"SOAP v.s REST\"></a>SOAP v.s REST</h1><h4 id=\"REST-優於-SOAP\"><a href=\"#REST-優於-SOAP\" class=\"headerlink\" title=\"REST 優於 SOAP\"></a>REST 優於 SOAP</h4><blockquote><p>REST 提供更多元資料格式。SOAP 只有 XML。<br>基於 JSON，REST 被公認是易於處理的。<br>基於 JSON，REST 提供對瀏覽器更好的支援。<br>REST 提供優越的性能。特別指快取資料。<br>世界級大公司主要服務協定。<br>REST 一般而言比較快且省頻寬。</p>\n</blockquote>\n\n<h3 id=\"SOAP-優於-REST\"><a href=\"#SOAP-優於-REST\" class=\"headerlink\" title=\"SOAP 優於 REST\"></a>SOAP 優於 REST</h3><blockquote><p>SOAP 是標準 HTTP 協定，能更方便通過防火牆和Proxy而不對協定本身進行修改。<br>如果你需要處理 ACID 交易，那麼 SOAP 是不錯的方向。<br>SOAP 擁有各種 WS- 擴充服務，擁有高可擴充性。<br>B2B 的世界，安全與穩定重於一切。</p>\n</blockquote>\n<hr>\n<blockquote><p>Bruce 的一些心得</p>\n<p>青菜蘿蔔各有所好，並不一樣是 REST 完勝，例如，之前有一陣子在忙的 B2B Biztalk 專案，在加解密(安全)部分，基於 XML 的 SOAP 就比 REST 更為合適。但基於 XML 的協定有個很明顯的缺點，就是當來源資料量成長一些些，產出的 XML 資料量會明顯成長很多。資料解析下，拜 JSON.NET 之類的框架(如之前介紹過的 Jil)幫忙，JSON 格式的處理是非常簡單的。但如果有一天，你真的碰到要處理 XML，那麼不要忘記 LINQ to XML 這個技術就好。</p>\n</blockquote>\n\n<p>參考資料：</p>\n<blockquote>\n<p><a href=\"https://blog.kkbruce.net/2018/04/soap-with-rest-good-parts.html#.YheofuhBxPY\">https://blog.kkbruce.net/2018/04/soap-with-rest-good-parts.html#.YheofuhBxPY</a></p>\n</blockquote>\n</body></html>",
            "tags": [
                "webService",
                "restfulApi"
            ]
        }
    ]
}