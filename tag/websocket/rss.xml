<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Mawchu 貓奴前端的天空 • Posts by &#34;websocket&#34; tag</title>
        <link>http://maomaoxie.github.io</link>
        <description>Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習</description>
        <language>zh-tw,en,default</language>
        <pubDate>Fri, 25 Feb 2022 11:29:08 +0800</pubDate>
        <lastBuildDate>Fri, 25 Feb 2022 11:29:08 +0800</lastBuildDate>
        <category>Google Analytics</category>
        <category>GA</category>
        <category>GA4</category>
        <category>Google Tag Manager</category>
        <category>GTM</category>
        <category>Javascript</category>
        <category>javascript</category>
        <category>constructor</category>
        <category>instance</category>
        <category>methods</category>
        <category>backEnd</category>
        <category>node</category>
        <category>express</category>
        <category>router</category>
        <category>git</category>
        <category>github</category>
        <category>sourceTree</category>
        <category>hexo</category>
        <category>submodule</category>
        <category>api</category>
        <category>graphQL</category>
        <category>facebook</category>
        <category>rss</category>
        <category>http</category>
        <category>https</category>
        <category>request</category>
        <category>response</category>
        <category>httpHeader</category>
        <category>httpMethods</category>
        <category>status</category>
        <category>type</category>
        <category>laravel</category>
        <category>php</category>
        <category>linux</category>
        <category>blade</category>
        <category>wsl2</category>
        <category>layout</category>
        <category>migration</category>
        <category>sql</category>
        <category>public</category>
        <category>static</category>
        <category>tailwind</category>
        <category>css</category>
        <category>less</category>
        <category>processors</category>
        <category>env</category>
        <category>process</category>
        <category>dotenv</category>
        <category>webService</category>
        <category>restfulApi</category>
        <category>safari</category>
        <category>javaScript</category>
        <category>preventDefault</category>
        <category>ios</category>
        <category>mobile</category>
        <category>shortCircuit</category>
        <category>optionalChaining</category>
        <category>tricks</category>
        <category>vue</category>
        <category>vue3</category>
        <category>compositionAPI</category>
        <category>vite</category>
        <category>typescript</category>
        <category>vuetify</category>
        <category>html</category>
        <category>WebSocket</category>
        <category>WebHook</category>
        <category>wordpress</category>
        <category>dns</category>
        <category>cdn</category>
        <item>
            <guid isPermalink="true">http://maomaoxie.github.io/2022/02/25/zh-tw/web-socket-and-web-hook/</guid>
            <title>Web Socket v.s Web Hook</title>
            <link>http://maomaoxie.github.io/2022/02/25/zh-tw/web-socket-and-web-hook/</link>
            <category>api</category>
            <category>WebSocket</category>
            <category>WebHook</category>
            <pubDate>Fri, 25 Feb 2022 11:29:08 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/web-socket-and-web-hook/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;[web-socket-and-web-hook [web-socket-and-web-hook]]&#34;&gt;
&lt;p&gt;API 的形式有兩大宗：&lt;br&gt;Web Hook 與 Web Socket，而他們有甚麼差異呢？&lt;/p&gt;
&lt;h1 id=&#34;被動式-Web-Hook&#34;&gt;&lt;a href=&#34;#被動式-Web-Hook&#34; class=&#34;headerlink&#34; title=&#34;被動式 Web Hook&#34;&gt;&lt;/a&gt;被動式 Web Hook&lt;/h1&gt;&lt;p&gt;例如 Line Bot，server 會先預測使用者的動作與需求（events），設計出相對的程式並維護，等待使用者發出要求才動作。&lt;/p&gt;
&lt;h1 id=&#34;主動式-Web-Socket&#34;&gt;&lt;a href=&#34;#主動式-Web-Socket&#34; class=&#34;headerlink&#34; title=&#34;主動式 Web Socket&#34;&gt;&lt;/a&gt;主動式 Web Socket&lt;/h1&gt;&lt;p&gt;兩方的資料交互，例如 client 與 server、server 與 server。&lt;br&gt;應用場景如聊天功能：facebook messenger 或 Line 等，Web Socket 的技術可以「即時的」(real time)做出資料傳遞。&lt;br&gt;當你打開 facebook messenger 的視窗，Web Socket server 就會與 client 瀏覽器端 handshake 保持通訊暢通，持續監聽對話要求並回應(opened and persistent connection)&lt;/p&gt;
&lt;p&gt;參考資料：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;hiskio 課程 API 整合實戰｜RESTful 第三方串接應用&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
    </channel>
</rss>