{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"type\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-value/",
            "url": "http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-value/",
            "title": "克服 Javascript 的奇怪部分 原始型別",
            "date_published": "2022-07-30T09:08:20.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/js-weird-parts-value/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"js-primitive-type\">\n<p>只要不是物件型別的值都可以看做是原始型別，例如：</p>\n<h1 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h1><p>當一個變數還未指派任何值之前，記憶體位置會被賦予一個 undefied 的值，通常是 Javascript 引擎指派的，應該避免將任何值的預設值設定為 undefined，避免與 Hoisting 行為混淆了。</p>\n<h1 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h1><p>若需要再資料回來之前給予判斷，可以將變數設定為 null 來表示該變數還未拿到任何值，也非 Javascript 引擎指派的值。</p>\n<h1 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h1><p>true 或 false 的判斷型別，值得注意的是當值存在 localstorage 或者 cookie 時應避免儲存 true 或 false，轉換過程會強制變成 string 而造成錯誤的判斷。</p>\n<h1 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h1><p>唯一的數字型別（numeric），不同於其他語言可能具有細緻的數字型別，例如 interger 或是 demicals，Javascript 只有一個 number type，為<strong>浮點運算（floating point number）</strong>，這種運算法為一個有效數字加上冪數來表示，電腦本身的二進制無法實現十進制的數字精確性，會造成數字計算上浮點位數的不正確，只能計算出近似值而已。</p>\n<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><p>字串型別，一串使用雙引號或單引號標記起來的文字。</p>\n<h1 id=\"symbol\"><a href=\"#symbol\" class=\"headerlink\" title=\"symbol\"></a>symbol</h1><p>ES6 引入的新原始型別，用來表示一個獨一無二的值。產生的原因來自於物件的屬性通常都是字串（property），這樣容易造就重複的屬性而衝突，新的符號型別（symbol）於是誕生，兩個 symbol 永遠不會相等，是絕對的獨一無二。ES6 允許使用表達式 (expression) 作為屬性的名稱，語法是將 expression 放在中括號 [ ] 裡面：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>symbol</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> obj = {</span><br><span class=\"line\">    [s]: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {}</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "javascript",
                "type"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-types/",
            "url": "http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-types/",
            "title": "克服 Javascript 的奇怪部分 型別",
            "date_published": "2022-07-30T08:35:45.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/js-weird-parts-dynamic-typing/0.png\" class=\"\" title=\"dynamic-typing\">\n<h1 id=\"Dynamic-Typing\"><a href=\"#Dynamic-Typing\" class=\"headerlink\" title=\"Dynamic Typing\"></a>Dynamic Typing</h1><p>Javascript 的型別為動態型別（Dynamic Typing），不同於 C# 等強型別語言的靜態型別（Static Typing），無須指派型別而是在引擎執行的階段（at runtime）辨認變數記憶體內的型別為何：</p>\n<blockquote class=\"colorquote info\"><p>Dynamically-typed languages are those (like JavaScript) where the interpreter assigns variables a type at runtime based on the variable’s value at the time.</p>\n</blockquote>\n\n<p>這有可能導致一個變數在每次程式執行的結果都產生不同的型別（例如 == 型別隱式轉換），而造成不如預期的結果，所以使用三等號是比較良好的撰寫習慣。</p>\n</body></html>",
            "tags": [
                "javascript",
                "type"
            ]
        }
    ]
}