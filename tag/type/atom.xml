<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://maomaoxie.github.io</id>
    <title>Mawchu 貓奴前端的天空 • Posts by &#34;type&#34; tag</title>
    <link href="http://maomaoxie.github.io" />
    <updated>2022-07-30T09:08:20.000Z</updated>
    <category term="javascript" />
    <category term="constructor" />
    <category term="instance" />
    <category term="methods" />
    <category term="backEnd" />
    <category term="node" />
    <category term="express" />
    <category term="router" />
    <category term="git" />
    <category term="github" />
    <category term="sourceTree" />
    <category term="api" />
    <category term="graphQL" />
    <category term="facebook" />
    <category term="hexo" />
    <category term="submodule" />
    <category term="http" />
    <category term="https" />
    <category term="request" />
    <category term="response" />
    <category term="rss" />
    <category term="httpHeader" />
    <category term="httpMethods" />
    <category term="status" />
    <category term="Javascript" />
    <category term="type" />
    <category term="laravel" />
    <category term="php" />
    <category term="linux" />
    <category term="blade" />
    <category term="wsl2" />
    <category term="public" />
    <category term="static" />
    <category term="migration" />
    <category term="sql" />
    <category term="layout" />
    <category term="tailwind" />
    <category term="css" />
    <category term="less" />
    <category term="processors" />
    <category term="env" />
    <category term="process" />
    <category term="dotenv" />
    <category term="webService" />
    <category term="restfulApi" />
    <category term="safari" />
    <category term="javaScript" />
    <category term="preventDefault" />
    <category term="ios" />
    <category term="mobile" />
    <category term="shortCircuit" />
    <category term="optionalChaining" />
    <category term="tricks" />
    <category term="vue" />
    <category term="vue3" />
    <category term="compositionAPI" />
    <category term="vuetify" />
    <category term="html" />
    <category term="vite" />
    <category term="typescript" />
    <category term="WebSocket" />
    <category term="WebHook" />
    <category term="wordpress" />
    <category term="dns" />
    <category term="cdn" />
    <entry>
        <id>http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-value/</id>
        <title>克服 Javascript 的奇怪部分 原始型別</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-value/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-value/0.png&#34; class=&#34;&#34; width=&#34;800&#34; height=&#34;200&#34; title=&#34;js-primitive-type&#34;&gt;
&lt;p&gt;只要不是物件型別的值都可以看做是原始型別，例如：&lt;/p&gt;
&lt;h1 id=&#34;undefined&#34;&gt;&lt;a href=&#34;#undefined&#34; class=&#34;headerlink&#34; title=&#34;undefined&#34;&gt;&lt;/a&gt;undefined&lt;/h1&gt;&lt;p&gt;當一個變數還未指派任何值之前，記憶體位置會被賦予一個 undefied 的值，通常是 Javascript 引擎指派的，應該避免將任何值的預設值設定為 undefined，避免與 Hoisting 行為混淆了。&lt;/p&gt;
&lt;h1 id=&#34;null&#34;&gt;&lt;a href=&#34;#null&#34; class=&#34;headerlink&#34; title=&#34;null&#34;&gt;&lt;/a&gt;null&lt;/h1&gt;&lt;p&gt;若需要再資料回來之前給予判斷，可以將變數設定為 null 來表示該變數還未拿到任何值，也非 Javascript 引擎指派的值。&lt;/p&gt;
&lt;h1 id=&#34;boolean&#34;&gt;&lt;a href=&#34;#boolean&#34; class=&#34;headerlink&#34; title=&#34;boolean&#34;&gt;&lt;/a&gt;boolean&lt;/h1&gt;&lt;p&gt;true 或 false 的判斷型別，值得注意的是當值存在 localstorage 或者 cookie 時應避免儲存 true 或 false，轉換過程會強制變成 string 而造成錯誤的判斷。&lt;/p&gt;
&lt;h1 id=&#34;number&#34;&gt;&lt;a href=&#34;#number&#34; class=&#34;headerlink&#34; title=&#34;number&#34;&gt;&lt;/a&gt;number&lt;/h1&gt;&lt;p&gt;唯一的數字型別（numeric），不同於其他語言可能具有細緻的數字型別，例如 interger 或是 demicals，Javascript 只有一個 number type，為&lt;strong&gt;浮點運算（floating point number）&lt;/strong&gt;，這種運算法為一個有效數字加上冪數來表示，電腦本身的二進制無法實現十進制的數字精確性，會造成數字計算上浮點位數的不正確，只能計算出近似值而已。&lt;/p&gt;
&lt;h1 id=&#34;string&#34;&gt;&lt;a href=&#34;#string&#34; class=&#34;headerlink&#34; title=&#34;string&#34;&gt;&lt;/a&gt;string&lt;/h1&gt;&lt;p&gt;字串型別，一串使用雙引號或單引號標記起來的文字。&lt;/p&gt;
&lt;h1 id=&#34;symbol&#34;&gt;&lt;a href=&#34;#symbol&#34; class=&#34;headerlink&#34; title=&#34;symbol&#34;&gt;&lt;/a&gt;symbol&lt;/h1&gt;&lt;p&gt;ES6 引入的新原始型別，用來表示一個獨一無二的值。產生的原因來自於物件的屬性通常都是字串（property），這樣容易造就重複的屬性而衝突，新的符號型別（symbol）於是誕生，兩個 symbol 永遠不會相等，是絕對的獨一無二。ES6 允許使用表達式 (expression) 作為屬性的名稱，語法是將 expression 放在中括號 [ ] 裡面：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript hljs&#34;&gt;&lt;figcaption&gt;&lt;span&gt;symbol&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; s = &lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; obj = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [s]: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <category term="type" />
        <updated>2022-07-30T09:08:20.000Z</updated>
    </entry>
    <entry>
        <id>http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-types/</id>
        <title>克服 Javascript 的奇怪部分 型別</title>
        <link rel="alternate" href="http://maomaoxie.github.io/2022/07/30/zh-tw/js-weird-parts-types/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/images/js-weird-parts-dynamic-typing/0.png&#34; class=&#34;&#34; title=&#34;dynamic-typing&#34;&gt;
&lt;h1 id=&#34;Dynamic-Typing&#34;&gt;&lt;a href=&#34;#Dynamic-Typing&#34; class=&#34;headerlink&#34; title=&#34;Dynamic Typing&#34;&gt;&lt;/a&gt;Dynamic Typing&lt;/h1&gt;&lt;p&gt;Javascript 的型別為動態型別（Dynamic Typing），不同於 C# 等強型別語言的靜態型別（Static Typing），無須指派型別而是在引擎執行的階段（at runtime）辨認變數記憶體內的型別為何：&lt;/p&gt;
&lt;blockquote class=&#34;colorquote info&#34;&gt;&lt;p&gt;Dynamically-typed languages are those (like JavaScript) where the interpreter assigns variables a type at runtime based on the variable’s value at the time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這有可能導致一個變數在每次程式執行的結果都產生不同的型別（例如 == 型別隱式轉換），而造成不如預期的結果，所以使用三等號是比較良好的撰寫習慣。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="javascript" />
        <category term="type" />
        <updated>2022-07-30T08:35:45.000Z</updated>
    </entry>
</feed>