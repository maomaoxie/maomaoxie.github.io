{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"compositionapi\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/02/16/zh-tw/vue3-composition-api/",
            "url": "http://maomaoxie.github.io/2022/02/16/zh-tw/vue3-composition-api/",
            "title": "Vue 3 的變革",
            "date_published": "2022-02-16T07:12:05.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/vue3-composition-api/001.png\" class=\"\" width=\"800\" height=\"200\" title=\"vue3-composition-api\">\n<p>本篇尚未完整，持續更新中…</p>\n<p>你還在用 Vue 2 整理那些物件包裹起來的 data、方法與生命週期的鉤子嗎？還在頭痛父子元件之間傳遞資料的複雜寫法嗎？如果想尋找更接近 typescript 易於維護的團隊開發方式，可以考慮無痛升級 Vue 3 唷！特快車來了還不跟上！</p>\n<p>Vue 3 用法隨著版本更新越來越精進與簡潔，尤其是使用漸進式 API 的寫法大大提升了整 code 的整潔與好維護度，以下是一些常用到的整理：</p>\n<!-- - Composition API setup() \n- ref()  v.s. reactive() \n- 減少 this 指向，改用 value 取得實體內的data\n- 自訂的 css 變數 var() \n- Teleport \n- Fragments 省略根元素 div \n- Emits 獨立出來 \n- #fallback 顯示 loading 的內容 \n- ::v-slotted 定義插槽樣式 ::v-global 破除scoped的全域樣式\n- 生命週期 createApp\n- proxy -->\n\n<h1 id=\"Composition-API\"><a href=\"#Composition-API\" class=\"headerlink\" title=\"Composition API\"></a>Composition API</h1><p>Vue3 一項顯著的變革就是 Composition API，提升撰寫每一個元件專屬方法與資料的便利性：</p>\n<blockquote>\n<p>Composition API is a set of APIs that allows us to author Vue components using imported functions instead of declaring options. It is an umbrella term that covers the following APIs.<br>Composition API 使得元件得以直接使用 import 進來的 functions，而不是透過選項來宣告，該特性封裝了以下的 API方法：</p>\n</blockquote>\n<h3 id=\"Reactivity-API\"><a href=\"#Reactivity-API\" class=\"headerlink\" title=\"Reactivity API\"></a>Reactivity API</h3><p>  例如 <code>ref()</code> 和 <code>reactive()</code> 可創造響應式（reactive）、計算式（computed）與監聽（watchers）的資料狀態</p>\n<h3 id=\"Lifecycle-Hooks\"><a href=\"#Lifecycle-Hooks\" class=\"headerlink\" title=\"Lifecycle Hooks\"></a>Lifecycle Hooks</h3><p>  例如 <code>onMounted()</code> 和 <code>onUnmounted()</code>, 容許使用編成方式撰寫元件的生命週期鉤子</p>\n<h3 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h3><p>  例如 <code>provide()</code> and <code>inject()</code>, 提供一個<code>祖父 -&gt; 父(跳過) -&gt; 子</code>元件之間依賴注入（Dependency Injection）的接口，可以更好的分化元件之間的需求，了解更多內容可以詳讀<a href=\"https://penueling.com/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/vue3-%E7%9A%84%E8%B3%87%E6%96%99%E7%8B%80%E6%85%8B%E7%AE%A1%E7%90%86%EF%BC%8Cprovide-inject%E3%80%81vuex/\">這篇</a></p>\n<p>  簡單下個速記法：<br>  provide() 與 inject() 看做是 prop 的昇級版，看個示意圖吧！<br>  <img src=\"/images/vue3-composition-api/002.png\" class=\"\" width=\"800\" height=\"200\" title=\"vue3 composition api\"></p>\n<h3 id=\"Setup-script\"><a href=\"#Setup-script\" class=\"headerlink\" title=\"Setup script\"></a>Setup script</h3><p>Vue 3 將 Composition API 整合在單個元件的 <code>&lt;script setup&gt;</code> 標籤中，可以直接默認寫在裡面的內容都是提升到 <code>created()</code> 和 <code>beforeCreated()</code>的生命週期階段去實踐的</p>\n<blockquote>\n<p>In Vue 3, it is also primarily used together with the <code>&lt;script setup&gt;</code> syntax in Single-File Components.</p>\n</blockquote>\n<figure class=\"highlight javascript hljs\"><figcaption><span>component.vue</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">import</span> { ref, onMounted } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// reactive state</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"hljs-number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// functions that mutate state and trigger updates</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">    count.<span class=\"hljs-property\">value</span>++</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// lifecycle hooks</span></span><br><span class=\"line\">  <span class=\"title function_\">onMounted</span>(<span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">`The initial count is <span class=\"hljs-subst\">${count.value}</span>.`</span>)</span><br><span class=\"line\">  })</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"increment\"</span>&gt;</span>Count is: <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>\n<hr>\n<h1 id=\"Reactivity-API-1\"><a href=\"#Reactivity-API-1\" class=\"headerlink\" title=\"Reactivity API\"></a>Reactivity API</h1><p>多了一層代理（proxy）包裹所有的資料（data），使得 vue3 在處理 data 上有些變革：</p>\n<ul>\n<li>ref() 傳入 primative value </li>\n<li>reactive() 傳入 object value<br>該選擇哪一種可以參考這篇 <a href=\"https://stackoverflow.com/questions/61452458/ref-vs-reactive-in-vue-3\">ref vs reactive in Vue 3?</a>，滿有助益的解釋非常通透呢！</li>\n</ul>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref ()\"></a>ref ()</h3><p>當你需要將資料型態重新賦值（reassign）時可以選用 <code>ref()</code>，其實該方法背後也調用了 <code>reactive()</code> 只是你不知道而已，原始型別非常適合使用此代理包裹，另外當你的物件型別資料並沒有一開始的屬性值，例如空物件或空陣列，也可以考慮使用這個方式。<br>需要特別注意的點就是該方法取值要添加 <code>.value</code> 才能取得。</p>\n<blockquote><p>ref() Use-Case<br>You’ll always use ref() for primitives, but ref() is good for objects that need to be reassigned, like an array.</p>\n</blockquote>\n<blockquote><p>When you write ref([]) it is equivalent to ref(reactive([])).</p>\n</blockquote>\n\n<h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive ()\"></a>reactive ()</h3><p>當需要將物件型別的資料型態其中某個屬性值透過指向參考（dot notation）來修改值的時候可以選用 <code>reactive()</code>，前提在於你知道該物件內容的屬性值有哪些，屬性值彼此之間的牽動關聯性是甚麼，甚至可以直接撰寫 <code>computed()</code> 來決定某屬性值，該方法須注意不能被重新賦值更改指向參考，完全不會理你。</p>\n<blockquote><p>看到透過 reactive 包裝後的資料連 computed 都包裝了進去，是不是覺得非常的方便，不需要再另外切開去寫computed ，在尋找相依性的資料也變簡單。<br><a href=\"https://medium.com/i-am-mike/vue-3-ref-%E8%B7%9F-reactive-%E6%88%91%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%81%B8-2fb6b6735a3c\">https://medium.com/i-am-mike/vue-3-ref-%E8%B7%9F-reactive-%E6%88%91%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%81%B8-2fb6b6735a3c</a></p>\n</blockquote>\n<blockquote><p>reactive() Use-Case<br>A good use-case for reactive() is a group of primitives that belong together:</p>\n</blockquote>\n\n<h1 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h1><h3 id=\"非必要的-props\"><a href=\"#非必要的-props\" class=\"headerlink\" title=\"非必要的 props\"></a>非必要的 props</h3><p>只需要在非必要的 props 加上<code>?</code> 就可以囉！不然 typescript 會一直跳出警語 <code>ts(2322)</code></p>\n<figure class=\"highlight plaintext hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const props = defineProps&lt;{ </span><br><span class=\"line\">  span: number, </span><br><span class=\"line\">  label: string, </span><br><span class=\"line\">  name: string, </span><br><span class=\"line\">  placeholder: string, </span><br><span class=\"line\">  prefix?: {</span><br><span class=\"line\">    type: string,</span><br><span class=\"line\">    default: ''</span><br><span class=\"line\">  }, </span><br><span class=\"line\">  suffix?: {</span><br><span class=\"line\">    type: string,</span><br><span class=\"line\">    default: ''</span><br><span class=\"line\">  }, </span><br><span class=\"line\">}&gt;()</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h3 id=\"toRaw\"><a href=\"#toRaw\" class=\"headerlink\" title=\"toRaw\"></a>toRaw</h3><p>轉換透過vue創造的代理物件為普通物件，可轉換的代理物件有 <code>reactive()</code>, <code>readonly()</code>, <code>shallowReactive()</code> 或 <code>shallowReadonly()</code>。<br>This is an escape hatch that can be used to temporarily read </p>\n<blockquote><p>Returns the raw, original object of a Vue-created proxy.</p>\n</blockquote></body></html>",
            "tags": [
                "vue3",
                "vue",
                "compositionAPI"
            ]
        }
    ]
}