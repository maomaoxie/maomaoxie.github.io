{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"backend\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/02/20/zh-tw/express-router-module/",
            "url": "http://maomaoxie.github.io/2022/02/20/zh-tw/express-router-module/",
            "title": "Express 路由模組化",
            "date_published": "2022-02-20T14:12:53.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/express-router-module/1.png\" class=\"\" width=\"800\" height=\"200\" title=\"express-router-module\">\n<h6 id=\"圖片來源-https-inmywordz-com-archives-504\"><a href=\"#圖片來源-https-inmywordz-com-archives-504\" class=\"headerlink\" title=\"圖片來源: https://inmywordz.com/archives/504\"></a>圖片來源: <a href=\"https://inmywordz.com/archives/504\">https://inmywordz.com/archives/504</a></h6><p>當路由越寫越多變成霍爾的移動城堡一樣雜亂肥大時，自己都看得眼花撩亂啦～考慮使用模組化的概念來統整自己的後端路由是很好的選擇，那麼就來開始吧！</p>\n<hr>\n<h1 id=\"Express-js-4-0-Router-的誕生\"><a href=\"#Express-js-4-0-Router-的誕生\" class=\"headerlink\" title=\"Express.js 4.0 Router 的誕生\"></a>Express.js 4.0 Router 的誕生</h1><p>Express 輕量框架提供很多整理路由的方式，Express.js 4.0 導入了新的 <strong>Router 功能</strong>，可以更彈性的撰寫子路由規則以及中介軟體啦！</p>\n<blockquote><p>Express.js 4.0 有加入一個新的 Router 功能，它就像一個迷你的應用程式，可以讓應用程式內部的路由撰寫更方便、更有彈性。<br>Express.js 在 4.0 版中有許多新的功能，其中一項主要的功能就是 Router，以下我們介紹如何使用 Router 功能來撰寫應用程式。<br><a href=\"https://blog.gtwang.org/programming/learn-to-use-the-new-router-in-expressjs-4/\">https://blog.gtwang.org/programming/learn-to-use-the-new-router-in-expressjs-4/</a></p>\n</blockquote>\n<hr>\n<h1 id=\"app-use-產生父路由與路由頭中介\"><a href=\"#app-use-產生父路由與路由頭中介\" class=\"headerlink\" title=\"app.use() 產生父路由與路由頭中介\"></a>app.use() 產生父路由與路由頭中介</h1><blockquote><p>app.use(); mounts middleware for all routes of the app (or those matching the routes specified if you use app.use(‘/ANYROUTESHERE’, yourMiddleware());).</p>\n</blockquote>\n<p>app.use() 是啟用一個<strong>路由頭（父路由）</strong>，並且只要符合該路由頭的<strong>每一個子路由</strong>，該中介軟體都會啟用，很適合用在登入後驗證是否有登入的會員，是否有訪問路由頁面的權限，以撰寫一些驗證信息。</p>\n<hr>\n<h1 id=\"router-methods-產生子路由\"><a href=\"#router-methods-產生子路由\" class=\"headerlink\" title=\"router.methods() 產生子路由\"></a>router.methods() 產生子路由</h1><h4 id=\"舊的子路由寫法\"><a href=\"#舊的子路由寫法\" class=\"headerlink\" title=\"舊的子路由寫法\"></a>舊的子路由寫法</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">5500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">'舊的寫法：歡迎來到首頁'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">`Example app listening on port <span class=\"hljs-subst\">${port}</span>`</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/express-router-module/2.png\" class=\"\" width=\"380\" height=\"200\" title=\"express-router-module\">\n\n<h4 id=\"新的子路由寫法\"><a href=\"#新的子路由寫法\" class=\"headerlink\" title=\"新的子路由寫法\"></a>新的子路由寫法</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">5500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">'新的寫法：歡迎來到首頁'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/page'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">'新的寫法：歡迎來到分頁'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 制定一個路由頭（父路由）</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"hljs-string\">'/api'</span>, router)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">`Example app listening on port <span class=\"hljs-subst\">${port}</span>`</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/express-router-module/3.png\" class=\"\" width=\"380\" height=\"200\" title=\"express-router-module\">\n<img src=\"/images/express-router-module/4.png\" class=\"\" width=\"478\" height=\"235\" title=\"express-router-module\">\n\n<p>我自己是看不太出來差別，不過文章都是寫道 router 就像一個小型 app 提供你整理路由系統更好的方法，而具體的差異如下：</p>\n<blockquote><p>“A Router doesn’t .listen() for requests on its own”. That might be the main difference.<br>It’s useful for separating your application into multiple modules – creating a Router in each that the app can require() and .use() as middleware. </p>\n</blockquote>\n<ol>\n<li>Router 不能單個路由做 port 監聽 </li>\n<li>Router 可以使用 require() 與 use() 模組化管理子路由<br>  哪一種比較好眾說紛紜，基本上能適合專案模式的都是好方法。</li>\n</ol>\n<blockquote><p>router.use(); mounts middleware for the routes served by the specific router<br>router.get is only for <strong>defining subpaths</strong>.<br>Consider this example:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"hljs-string\">'/first'</span>, router); <span class=\"hljs-comment\">// Mount the router as middleware at path /first</span></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/sud'</span>, smaller);</span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/user'</span>, bigger);</span><br><span class=\"line\">  </span><br></pre></td></tr></tbody></table></figure>\nIf you open /first/sud, then the smaller function will get called.\nIf you open /first/user, then the bigger function will get called.\nIn short, app.use('/first', router) mounts the middleware at path /first, then router.get sets the subpath accordingly.\nhttps://stackoverflow.com/questions/27227650/difference-between-app-use-and-router-use-in-express</blockquote>\n<hr>\n<h1 id=\"router-use-子路由中介\"><a href=\"#router-use-子路由中介\" class=\"headerlink\" title=\"router.use() 子路由中介\"></a>router.use() 子路由中介</h1><p>router.use() 是產生子路由中介（middleware）的方式：</p>\n<blockquote class=\"colorquote info\"><p>在使用 middleware 時必須要注意他的放置位置必須要在 routes 之前，程式在執行的時候會依據 middleware 與 routes 的先後順序來執行，如果不小心將 middleware 放在 routes 之後，那麼在 routes 處理完請求之後就會結束處理的流程，這樣 middleware 就根本不會執行。<br><a href=\"https://blog.gtwang.org/programming/learn-to-use-the-new-router-in-expressjs-4/\">https://blog.gtwang.org/programming/learn-to-use-the-new-router-in-expressjs-4/</a></p>\n</blockquote>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 中介軟體要寫在 router 上面</span></span><br><span class=\"line\">router.<span class=\"title function_\">use</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 輸出記錄訊息至終端機</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${req.protocol}</span>://<span class=\"hljs-subst\">${req.hostname}</span>:<span class=\"hljs-subst\">${port}</span><span class=\"hljs-subst\">${req.baseUrl}</span><span class=\"hljs-subst\">${req.path}</span>`</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url, <span class=\"hljs-string\">'子路由會經過我'</span>);</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 繼續路由處理</span></span><br><span class=\"line\">  <span class=\"title function_\">next</span>();</span><br><span class=\"line\">})</span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">'新的寫法：歡迎來到首頁'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/page'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">'新的寫法：歡迎來到分頁'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/express-router-module/5.png\" class=\"\" width=\"478\" height=\"235\" title=\"express-router-module\">\n<hr>\n<h1 id=\"router-模組化\"><a href=\"#router-模組化\" class=\"headerlink\" title=\"router 模組化\"></a>router 模組化</h1><h4 id=\"子路由模塊\"><a href=\"#子路由模塊\" class=\"headerlink\" title=\"子路由模塊\"></a>子路由模塊</h4><p>將幾個子路徑依功能切開可以更方便的統整路由：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>./routers/cat.js</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">5500</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">use</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 輸出記錄訊息至終端機</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${req.protocol}</span>://<span class=\"hljs-subst\">${req.hostname}</span>:<span class=\"hljs-subst\">${port}</span><span class=\"hljs-subst\">${req.baseUrl}</span><span class=\"hljs-subst\">${req.path}</span>`</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url, <span class=\"hljs-string\">'喵喵子路由會經過我'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"hljs-comment\">// 繼續路由處理</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${req.protocol}</span>://<span class=\"hljs-subst\">${req.hostname}</span>:<span class=\"hljs-subst\">${port}</span><span class=\"hljs-subst\">${req.baseUrl}</span><span class=\"hljs-subst\">${req.path}</span>`</span>;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">'來到喵喵子路由'</span>);</span><br><span class=\"line\">});</span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'/meow'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">'喵喵分頁'</span>);</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = router;</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"引用模塊\"><a href=\"#引用模塊\" class=\"headerlink\" title=\"引用模塊\"></a>引用模塊</h4><p>在入口引入模塊：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>index.js</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> catsRouter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./routes/cat'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">5500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 模組寫法</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"hljs-string\">'/cat'</span>, catsRouter) </span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">`Example app listening on port <span class=\"hljs-subst\">${port}</span>`</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/express-router-module/6.png\" class=\"\" width=\"478\" height=\"235\" title=\"express-router-module\">\n<img src=\"/images/express-router-module/7.png\" class=\"\" width=\"478\" height=\"235\" title=\"express-router-module\">\n<img src=\"/images/express-router-module/8.png\" class=\"\" width=\"478\" height=\"235\" title=\"express-router-module\">\n<hr>\n<p>參考文章：</p>\n<blockquote><p><a href=\"https://stackoverflow.com/questions/27227650/difference-between-app-use-and-router-use-in-express\">https://stackoverflow.com/questions/27227650/difference-between-app-use-and-router-use-in-express</a><br><a href=\"https://blog.gtwang.org/programming/learn-to-use-the-new-router-in-expressjs-4/\">https://blog.gtwang.org/programming/learn-to-use-the-new-router-in-expressjs-4/</a><br><a href=\"http://expressjs.com/zh-tw/api.html#req\">http://expressjs.com/zh-tw/api.html#req</a></p>\n</blockquote></body></html>",
            "tags": [
                "backEnd",
                "node",
                "express",
                "router"
            ]
        }
    ]
}