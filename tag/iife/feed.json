{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"iife\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/11/08/js-weird-parts-closure/",
            "url": "http://maomaoxie.github.io/2022/11/08/js-weird-parts-closure/",
            "title": "克服 Javascript 的奇怪部分 IIFE 與 閉包",
            "date_published": "2022-11-08T03:06:33.000Z",
            "content_html": "<html><head></head><body><h1 id=\"範圍練（scope-chain）\"><a href=\"#範圍練（scope-chain）\" class=\"headerlink\" title=\"範圍練（scope chain）\"></a>範圍練（scope chain）</h1><p>範圍練（scope chain）是立即執行函式（Immediately Invoked Function Expression）與閉包的共同重要觀念，<br>Javascript function 的靜態物理坐落位置（physical position）深深影響著外部環境（outer environments），<br>也取決了那些變數是可以取用（accessible）與共享的。</p>\n<p>經典的面試題目 for 迴圈內的變數 i 因為 var 宣告被提升（hoisting）到作用域頂層，<br>在調用 console.log 的時機點之前就已經不斷被覆蓋，無法呈現預期的結果：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>for loop</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">function</span> <span class=\"title function_\">buildFn</span> () {</span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++) {</span><br><span class=\"line\">    arr.<span class=\"title function_\">push</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">    })</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">return</span> arr;</span><br><span class=\"line\"><span class=\"hljs-comment\">// loop 執行完畢 i 記憶體儲存的是 3</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// var 會共享同一個記憶體然後不斷覆蓋</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> fns = buildFn ();</span><br><span class=\"line\">fns[<span class=\"hljs-number\">0</span>](); <span class=\"hljs-comment\">// 3</span></span><br><span class=\"line\">fns[<span class=\"hljs-number\">1</span>](); <span class=\"hljs-comment\">// 3</span></span><br><span class=\"line\">fns[<span class=\"hljs-number\">2</span>](); <span class=\"hljs-comment\">// 3</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>為了解決記憶體內的值只是不斷被同一個指向覆蓋的問題，勢必需要獨立出每個 i 的值，有兩個做法：</p>\n<ol>\n<li>使用 ES6 Let 更改函式作用域（function scope）為區域作用域（block scope）</li>\n<li>使用 IIFE 的閉包特性，以下詳述</li>\n</ol>\n<h1 id=\"閉包（closure）\"><a href=\"#閉包（closure）\" class=\"headerlink\" title=\"閉包（closure）\"></a>閉包（closure）</h1><p>作用域內的變數可以為閉包所封鎖，結合 IIFE 在創造的當下就呼叫，每跑一次迴圈就產生一個獨立的作用域與執行環境（execution context），<br>將當前的 i 值封鎖住，可以設想為一個迴圈一個 i，並運用閉包的範圍練特性於呼叫的時候查找到正確的記憶體位址：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>IIFE</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">function</span> <span class=\"title function_\">buildFnIIFE</span> () {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++) {</span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> j = i;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">            (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">j</span>) {</span><br><span class=\"line\">                <span class=\"hljs-comment\">// scope chain 查找到閉包立馬執行時封鎖的 i 值</span></span><br><span class=\"line\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }(i))</span><br><span class=\"line\">        )</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> arr; <span class=\"hljs-comment\">// loop 執行完畢 i 記憶體儲存的是 3</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> fnsIIFE = buildFnIIFE ();</span><br><span class=\"line\">fnsIIFE[<span class=\"hljs-number\">0</span>](); <span class=\"hljs-comment\">// 0</span></span><br><span class=\"line\">fnsIIFE[<span class=\"hljs-number\">1</span>](); <span class=\"hljs-comment\">// 1</span></span><br><span class=\"line\">fnsIIFE[<span class=\"hljs-number\">2</span>](); <span class=\"hljs-comment\">// 2</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"變數共享\"><a href=\"#變數共享\" class=\"headerlink\" title=\"變數共享\"></a>變數共享</h1><p>閉包很常搭配工廠函式使用，藉助於閉包的變數共享特色，讓範圍練可以查找到儲存在記憶體位置的值，<br>即便外層的函式已經執行完畢並且離開執行序，仍會遺留變數的記憶體位置提供子函式使用：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>closure</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">function</span> <span class=\"title function_\">createGal</span> (name) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> toyBox = [];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...toy</span>) {</span><br><span class=\"line\">        toyBox.<span class=\"title function_\">push</span>(toy);</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> toys = [...toyBox];</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">`女孩<span class=\"hljs-subst\">${name}</span>喜歡<span class=\"hljs-subst\">${toys}</span>`</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> buyToyToGalMary = createGal (<span class=\"hljs-string\">'Mary'</span>);</span><br><span class=\"line\"><span class=\"title function_\">buyToyToGalMary</span>(<span class=\"hljs-string\">'玩具熊'</span>); </span><br><span class=\"line\"><span class=\"title function_\">buyToyToGalMary</span>(<span class=\"hljs-string\">'洋娃娃'</span>);</span><br><span class=\"line\"><span class=\"title function_\">buyToyToGalMary</span>(<span class=\"hljs-string\">'吹泡泡'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> buyToyToGalAda = createGal (<span class=\"hljs-string\">'Ada'</span>);</span><br><span class=\"line\"><span class=\"title function_\">buyToyToGalAda</span>(<span class=\"hljs-string\">'小火車'</span>);</span><br><span class=\"line\"><span class=\"title function_\">buyToyToGalAda</span>(<span class=\"hljs-string\">'佩佩豬'</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>執行結果：</p>\n<img src=\"/images/js-weird-parts-closure/1.png\" class=\"\" width=\"350\" height=\"200\" title=\"js-weird-parts-closure\"></body></html>",
            "tags": [
                "javascript",
                "closure",
                "IIFE"
            ]
        }
    ]
}