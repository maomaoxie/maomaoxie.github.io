{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"git\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/02/21/zh-tw/git-command-line/",
            "url": "http://maomaoxie.github.io/2022/02/21/zh-tw/git-command-line/",
            "title": "Git 常用的指令",
            "date_published": "2022-02-21T09:14:05.000Z",
            "content_html": "<html><head></head><body><p>這裡記錄一些工作上會用到的 git 指令，太容易忘記了阿（扶額</p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"遠端-URL\"><a href=\"#遠端-URL\" class=\"headerlink\" title=\"遠端 URL\"></a>遠端 URL</h1><h3 id=\"更換遠端-URL\"><a href=\"#更換遠端-URL\" class=\"headerlink\" title=\"更換遠端 URL\"></a>更換遠端 URL</h3><p>因應 PAT 新制，remote origin 格式必須更改如下：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://&lt;USERNAME&gt;:&lt;TOKEN&gt;@&lt;GIT_URL&gt;.git</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"查看遠端-URL\"><a href=\"#查看遠端-URL\" class=\"headerlink\" title=\"查看遠端 URL\"></a>查看遠端 URL</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"將專案推上去遠端-URL\"><a href=\"#將專案推上去遠端-URL\" class=\"headerlink\" title=\"將專案推上去遠端 URL\"></a>將專案推上去遠端 URL</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "git",
                "github"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/02/21/zh-tw/node-process-env/",
            "url": "http://maomaoxie.github.io/2022/02/21/zh-tw/node-process-env/",
            "title": "Node如何設置.env環境檔",
            "date_published": "2022-02-21T06:48:33.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/node-process-env/1.png\" class=\"\" width=\"800\" height=\"200\" title=\"node-process-env\">\n<p>圖片來源:<a href=\"https://dev.to/aadilraza339/what-is-env-file-in-node-js-3h6c\">https://dev.to/aadilraza339/what-is-env-file-in-node-js-3h6c</a></p>\n<p>開發專案的時候機密文件如何保存很重要，可以保護不被有心人士竊取，像是 API 金鑰、client-ID 與 client-secret 等可以呼叫遠端資料的通關密碼都需要妥善保存不暴露到網站上。<br>這邊來說明一下怎麼設置專案裡的環境檔案，並且讀取機密資料：</p>\n<h1 id=\"創建-env-檔案\"><a href=\"#創建-env-檔案\" class=\"headerlink\" title=\"創建 .env 檔案\"></a>創建 .env 檔案</h1><p>首先在跟目錄新增一個 .env 檔案，甚至可以設置以下幾種檔案來撰寫想要的環境模式腳本：</p>\n<h3 id=\"根據環境模式建立\"><a href=\"#根據環境模式建立\" class=\"headerlink\" title=\"根據環境模式建立\"></a>根據環境模式建立</h3><ul>\n<li>全局環境檔：.env</li>\n<li>開發環境檔：.env.dev</li>\n<li>測試環境檔：.env.sit</li>\n<li>生產環境檔：.env.prod</li>\n</ul>\n<h3 id=\"環境檔變數\"><a href=\"#環境檔變數\" class=\"headerlink\" title=\"環境檔變數\"></a>環境檔變數</h3><p>內容很簡單，都是鍵值對（key-value）的方式撰寫變數：</p>\n<figure class=\"highlight plaintext hljs\"><figcaption><span>.env</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YOUR_VARAIBLE_NAME=VALUE</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Node-js-process\"><a href=\"#Node-js-process\" class=\"headerlink\" title=\"Node.js process\"></a>Node.js process</h1><p>Node 提供了一個全局可使用的模組 process 記錄了所有關於目前 Node.js 程式的資訊，不需要 require()　就可以使用，棒棒的。</p>\n<blockquote>\n<p>The process object is a global that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using require().</p>\n</blockquote>\n<h3 id=\"process-env\"><a href=\"#process-env\" class=\"headerlink\" title=\"process.env\"></a>process.env</h3><p>process.env 則提供了關於使用者的環境物件，而腳本檔案需要的資訊都可以放在這個物件中。<br>該物件中的資料會自動轉換成字串（string）。<br>在 windows 作業系統中環境變數的大小寫是不敏感的。</p>\n<blockquote>\n<p>The process.env property returns an object containing the user environment.<br>See environ(7). Assigning a property on process.env will implicitly convert the value to a string.<br>On Windows operating systems, environment variables are case-insensitive.</p>\n</blockquote>\n<h1 id=\"npm-dotenv\"><a href=\"#npm-dotenv\" class=\"headerlink\" title=\"npm dotenv\"></a>npm dotenv</h1><p>光有全局的 process.env 是不夠的，還需要使用一個神人創造的 <strong>npm 套件 <a href=\"https://www.npmjs.com/package/dotenv\">dotenv</a></strong> 才能無痛讀取自己創建的 .env 資料唷！</p>\n<figure class=\"highlight plaintext hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i dotenv --save</span><br></pre></td></tr></tbody></table></figure>\n<p>在專案引用該套件：</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dotenv'</span>).<span class=\"title function_\">config</span>()</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'db'</span>)</span><br><span class=\"line\">db.<span class=\"title function_\">connect</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">host</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DB_HOST</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">username</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DB_USER</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">password</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DB_PASS</span></span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//dev.to/aadilraza339/what-is-env-file-in-node-js-3h6c</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"善用-gitignore\"><a href=\"#善用-gitignore\" class=\"headerlink\" title=\"善用 .gitignore\"></a>善用 .gitignore</h1><p>通常搭配 git 使用時會放置在 env 檔中並且 .gitignore 避免 commit 到公開環境中。<br>使用方式很簡單，在跟目錄創建一個 .gitignore 檔案之後，撰寫需要被 git 略過不被 commit 以及 push 的檔案類型：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>.gitignore</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"hljs-property\">env</span></span><br><span class=\"line\">.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">dev</span></span><br><span class=\"line\">.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">sit</span></span><br><span class=\"line\">.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">prod</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>參考資料：</p>\n<blockquote>\n<p><a href=\"https://dev.to/aadilraza339/what-is-env-file-in-node-js-3h6c\">https://dev.to/aadilraza339/what-is-env-file-in-node-js-3h6c</a><br><a href=\"https://dwatow.github.io/2019/01-26-node-with-env-first/\">https://dwatow.github.io/2019/01-26-node-with-env-first/</a><br><a href=\"https://nodejs.org/docs/latest-v8.x/api/process.html#process_process_env\">https://nodejs.org/docs/latest-v8.x/api/process.html#process_process_env</a></p>\n</blockquote>\n</body></html>",
            "tags": [
                "node",
                "git",
                "env",
                "process",
                "dotenv"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/02/17/zh-tw/git-main-branch/",
            "url": "http://maomaoxie.github.io/2022/02/17/zh-tw/git-main-branch/",
            "title": "Github 主分支更名 master 為 main",
            "date_published": "2022-02-17T12:59:44.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/git-main-branch/1.png\" class=\"\" width=\"800\" height=\"200\" title=\"git-main-branch\">\n<p>每每 github 搞了一些新招就得重新適應一次（菸</p>\n<p>這兩天在做小專案 git init 之後準備推上去 github 時，執行以下的老樣子：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/mawchu/baby-bill.git</span><br></pre></td></tr></tbody></table></figure>\n<p>看到這裡不免疑惑了一下，不是印象中的 branch 名字呀：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -M main </span><br></pre></td></tr></tbody></table></figure>\n<p>果然執行之後出現噴錯的內容：</p>\n<blockquote class=\"colorquote danger\"><p>error: refname refs/heads/master not found<br>fatal: Branch rename failed</p>\n</blockquote>\n\n<p>這個 main 分支從哪裡冒出來的？暗暗覺得這個行為很雞肋= =？</p>\n<blockquote class=\"colorquote info\"><p>為響應黑人平權運動，GitHub宣布從10月1日起改變新Git儲存庫的預設命名，以main來取代原本的master。<br>受到年中佛洛依德（George Floyd）遭警方執法過當死亡，引發的黑人平權抗議風潮影響，美國科技界也相繼思考去除慣用名稱中有種族歧視色彩的字眼，例如不要使用master/slave、blacklist/whitelist。GitHub執行長Nat Friedman也決定進行相關改變。</p>\n<p>開發人員也可以不要變更，隨時到設定區，把個人、組織和公司的新儲存庫預設命名從main改成別的。<br>GitHub呼籲用戶可以先保持不動，到了年底會再釋出新工具以協助現有branch改成新的預設名稱。<br>在支持黑人平權風潮下，包括Google、微軟、IBM、Red Hat、甲骨文下的MySQL及Linux社群都相繼變更了軟體流程的命名。本月微軟也提案修改Chromium中black/whitelist為較中性的blocklist/allowlist。<br><a href=\"https://www.ithome.com.tw/news/140094\">https://www.ithome.com.tw/news/140094</a></p>\n</blockquote>\n<p>查看了一下網路說明，原來是美國的政治與歷史因素，生活跟科技真是息息相關呢，自己的見識尚淺默默反省了一下XD<br>科普了一會怎麼切換現今的分支變成 main：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"hljs-string\">\"要推的備註內容\"</span></span><br></pre></td></tr></tbody></table></figure>\n<p>都 OK 就可以推上去囉！</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin main</span><br></pre></td></tr></tbody></table></figure>\n<p>推上去發現自己忘了切換帳號又噴錯啦！</p>\n<blockquote class=\"colorquote danger\"><p>remote: Permission to mawchu/baby-bill.git denied to maomaoxie.<br>fatal: unable to access ‘<a href=\"https://github.com/mawchu/baby-bill.git/'\">https://github.com/mawchu/baby-bill.git/'</a>: The requested URL returned error: 403</p>\n</blockquote>\n<p>由於 git bash 切換帳戶不是那麼方便，就偷吃步一下重複 <a href=\"http://maomaoxie.github.io/2022/02/10/zh-tw/git-pat/\">Github 登入新制 PAT X Sourcetree</a> 這篇的步驟就可以囉！</p>\n<p>參考文章：</p>\n<blockquote><p><a href=\"https://blog.csdn.net/taoshihan/article/details/116824815?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=1\">https://blog.csdn.net/taoshihan/article/details/116824815?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=1</a></p>\n</blockquote></body></html>",
            "tags": [
                "git",
                "github",
                "sourceTree"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/02/10/zh-tw/git-pat/",
            "url": "http://maomaoxie.github.io/2022/02/10/zh-tw/git-pat/",
            "title": "Github 登入新制 PAT X Sourcetree",
            "date_published": "2022-02-10T04:31:14.000Z",
            "content_html": "<html><head></head><body><p>在2022年某天，嘗試使用 sourcetree 推上去新 code 時，在 Github 時出現了以下錯誤訊息：</p>\n<blockquote class=\"colorquote danger\"><p>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see <a href=\"https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/\">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a> for more information.<br>fatal: unable to access “…” : The requested URL returned error: 403</p>\n</blockquote>\n\n<p>以上說明大概就是 Github 已經不支援密碼登入的方式，從 2021/08/13 開始必須替換為 PAT 的 token 登入方式進行認證。</p>\n<p>這個過程採了一些小坑，為了避免自己忘記趕緊的筆記一下：</p>\n<h1 id=\"Github-創建-token\"><a href=\"#Github-創建-token\" class=\"headerlink\" title=\"Github 創建 token\"></a>Github 創建 token</h1>  <blockquote><p>From your GitHub account, go to Settings =&gt; Developer Settings =&gt; Personal Access Token =&gt; Generate New Token (Give your password) =&gt; Fillup the form =&gt; click Generate token =&gt; Copy the generated Token, it will be something like ghp_sFhFsSHhTzMDreGRLjmks4Tzuzgthdvfsrta</p>\n</blockquote>\n<ol>\n<li>按下右上角頭像，選取 settings  <img src=\"/images/github-pat/github-pat1.png\" class=\"\" width=\"800\" height=\"100\" title=\"[title text [alt text]]\"></li>\n<li>按下 developer settings  <img src=\"/images/github-pat/github-pat2.png\" class=\"\" width=\"800\" height=\"200\" title=\"[title text [alt text]]\"></li>\n<li>點選 personal accesss token  <img src=\"/images/github-pat/github-pat2-1.png\" class=\"\" width=\"800\" height=\"200\" title=\"[title text [alt text]]\"></li>\n<li>填寫 token 用途與勾選 token 權限之後，申請一個 token 並且妥善保存  <img src=\"/images/github-pat/github-pat2-2.png\" class=\"\" width=\"800\" height=\"200\" title=\"[title text [alt text]]\"></li>\n</ol>\n<h1 id=\"sourceTree-修改遠端-URL\"><a href=\"#sourceTree-修改遠端-URL\" class=\"headerlink\" title=\"sourceTree 修改遠端 URL\"></a>sourceTree 修改遠端 URL</h1><p>  專案的 repo 點選 settings 修改 remote URL 的格式如下，<br>  </p><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://&lt;USERNAME&gt;:&lt;TOKEN&gt;@&lt;GIT_URL&gt;.git</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>  查詢 GIT_URL 可以透過這個指令：<br>  </p><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --get remote.origin.url</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>  並且記得 GIT_URL 要刪除 https:// 的部分才不會出錯，類似這樣<br>  </p><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://mawchu:&lt;你的Github token&gt;@github.com/mawchu/mawchu.github.io.git</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h1 id=\"驗證-Sourcetree-的身分\"><a href=\"#驗證-Sourcetree-的身分\" class=\"headerlink\" title=\"驗證 Sourcetree 的身分\"></a>驗證 Sourcetree 的身分</h1>  <img src=\"/images/github-pat/github-pat3.png\" class=\"\" width=\"800\" height=\"200\" title=\"[title text [alt text]]\">\n  <img src=\"/images/github-pat/github-pat3-1.png\" class=\"\" width=\"800\" height=\"200\" title=\"[title text [alt text]]\">\n\n<p>  切換 OAuth 為 Basic 驗證方式，輸入方才申請好的 token 密碼<br>  <img src=\"/images/github-pat/github-pat4.png\" class=\"\" width=\"800\" height=\"200\" title=\"[title text [alt text]]\"></p>\n<p>  驗證 OK 就可以推上去囉！</p>\n<p>參考文章：</p>\n<blockquote><p><a href=\"https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to\">https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to</a><br><a href=\"https://stackoverflow.com/questions/68191968/source-tree-fix-for-git-password-authentication-is-temporarily-disabled-as-part\">https://stackoverflow.com/questions/68191968/source-tree-fix-for-git-password-authentication-is-temporarily-disabled-as-part</a><br><a href=\"https://stackoverflow.com/questions/4089430/how-can-i-determine-the-url-that-a-local-git-repository-was-originally-cloned-fr\">https://stackoverflow.com/questions/4089430/how-can-i-determine-the-url-that-a-local-git-repository-was-originally-cloned-fr</a></p>\n</blockquote>\n</body></html>",
            "tags": [
                "git",
                "github",
                "sourceTree"
            ]
        }
    ]
}