{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"php\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/04/10/zh-tw/laravel-routes-namespace/",
            "url": "http://maomaoxie.github.io/2022/04/10/zh-tw/laravel-routes-namespace/",
            "title": "Laravel 命名路由",
            "date_published": "2022-04-10T17:42:15.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/laravel-routes-namespace/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"Laravel 命名路由\">\n<p>當路由越來越多，也越複雜甚至有巢狀結構的時候，相對路徑就會變得複雜不直覺，這時候可以借用 laravel 的命名路由工具，以及 blade 引擎的 <code>route 方法</code> 來輕鬆渲染路由：</p>\n<h1 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h1><p>在路由檔案 <code>routes/web.php</code> 中訪問 <code>name</code> 屬性方法並傳入制定好的路由專屬名稱：</p>\n<figure class=\"highlight php hljs\"><figcaption><span>web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/'</span>, [home<span class=\"title class_\">Controller</span>::<span class=\"variable language_\">class</span>, <span class=\"hljs-string\">'index'</span>])-&gt;<span class=\"title function_ invoke__\">name</span>(<span class=\"hljs-string\">'index.index'</span>);</span><br><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/about/about'</span>, [home<span class=\"title class_\">Controller</span>::<span class=\"variable language_\">class</span>, <span class=\"hljs-string\">'about'</span>])-&gt;<span class=\"title function_ invoke__\">name</span>(<span class=\"hljs-string\">'index.about'</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h1 id=\"blade-檔案渲染路由\"><a href=\"#blade-檔案渲染路由\" class=\"headerlink\" title=\"blade 檔案渲染路由\"></a>blade 檔案渲染路由</h1><p>將制定好的路由名稱由 name 方法傳入、blade 引擎透過 route 方法接收：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>layout/layout.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;a href=<span class=\"hljs-string\">\"{{ route('index.index') }}\"</span> <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"underline\"</span>&gt;<span class=\"title class_\">Home</span>&lt;/a&gt;|</span><br><span class=\"line\"><span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{{ route('index.about') }}\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"underline\"</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span></span><br><span class=\"line\">...</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-routes-namespace/1.png\" class=\"\" width=\"800\" height=\"200\" title=\"Laravel 命名路由\">\n\n<p>修改路由結構測試抓取的正確性：</p>\n<figure class=\"highlight php hljs\"><figcaption><span>web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/'</span>, [home<span class=\"title class_\">Controller</span>::<span class=\"variable language_\">class</span>, <span class=\"hljs-string\">'index'</span>])-&gt;<span class=\"title function_ invoke__\">name</span>(<span class=\"hljs-string\">'index.index'</span>);</span><br><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/about'</span>, [home<span class=\"title class_\">Controller</span>::<span class=\"variable language_\">class</span>, <span class=\"hljs-string\">'about'</span>])-&gt;<span class=\"title function_ invoke__\">name</span>(<span class=\"hljs-string\">'index.about'</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>可以看到渲染結果如預期更新了：</p>\n<img src=\"/images/laravel-routes-namespace/2.png\" class=\"\" width=\"800\" height=\"200\" title=\"Laravel 命名路由\">\n\n<p>透過 blade 引擎封裝的 <code>route 方法</code> 解決了在腦中思考相對路徑結構的煩惱，棒！</p>\n</body></html>",
            "tags": [
                "laravel",
                "php"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/04/10/zh-tw/php-basic-knowledge/",
            "url": "http://maomaoxie.github.io/2022/04/10/zh-tw/php-basic-knowledge/",
            "title": "Php 基礎知識",
            "date_published": "2022-04-10T17:10:18.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/php-basic-knowledge/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"php 基礎知識\">\n<p>在 javascript 裡面訪問屬性的方式很單純，都是使用 <code>.</code> 來進入傳參考的對象記憶體中存放的值、訪問類中的屬性還有創立物件內的 key 與 value，然而在 php 中則用三種不同的符號來達成不同目的：</p>\n<h3 id=\"範圍解析操作符\"><a href=\"#範圍解析操作符\" class=\"headerlink\" title=\":: 範圍解析操作符\"></a>:: 範圍解析操作符</h3><p>用來訪問類（class）底下的對象。</p>\n<figure class=\"highlight php hljs\"><figcaption><span>layout/layout.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$classname</span>::<span class=\"variable constant_\">CONST_VALUE</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"gt-指向符號（瘦箭頭）\"><a href=\"#gt-指向符號（瘦箭頭）\" class=\"headerlink\" title=\"-> 指向符號（瘦箭頭）\"></a>-&gt; 指向符號（瘦箭頭）</h3><p>用來訪問物件內某類別的值，類似 javascript 裡頭的 <code>.</code>。 </p>\n<figure class=\"highlight php hljs\"><figcaption><span>layout/layout.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$object</span>-&gt;property=<span class=\"hljs-string\">'value'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"x3D-gt-指向符號（胖箭頭）\"><a href=\"#x3D-gt-指向符號（胖箭頭）\" class=\"headerlink\" title=\"=> 指向符號（胖箭頭）\"></a>=&gt; 指向符號（胖箭頭）</h3><p>用來創建物件內的鍵值對，一個 key 對上一個 value，類似 javascript 裡頭的 <code>:</code>。 </p>\n<figure class=\"highlight php hljs\"><figcaption><span>layout/layout.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$array</span> = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"key\"</span> =&gt; <span class=\"hljs-string\">\"value\"</span>);</span><br></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "php"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/04/06/zh-tw/laravel-routes-controller/",
            "url": "http://maomaoxie.github.io/2022/04/06/zh-tw/laravel-routes-controller/",
            "title": "Laravel 認識 controller",
            "date_published": "2022-04-06T20:49:05.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/laravel-routes-controller/0.png\" class=\"laravel-routes\" width=\"800\" height=\"200\" title=\"Laravel路由控制器\">\n<p>當路由越來越多越來越雜亂的時候，express 可以模組化路由以分類各大項目的小路由，Laravel 是基於 MVC 架構的應用程式框架，這個分類工作可以交給 <strong>Controller</strong> 來執行：</p>\n<h1 id=\"init-controller\"><a href=\"#init-controller\" class=\"headerlink\" title=\"init controller\"></a>init controller</h1><p>使用優雅的 <code>artisan cmd</code> 就可以創建一個 Controller class 模板，在 windows powerShell 輸入<code>wsl</code> 即可切換至 Linux WSL 子系統，終端機輸入以下指令可以查詢所有 artisan cmd 的說明，記得 cd 進入專案包內才可使用 artisan 指令：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>terminal</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-routes-controller/1.png\" class=\"laravel-routes\" width=\"800\" height=\"200\" title=\"Laravel路由控制器\">\n\n<p>建立 Controller 模板的 artisan cmd：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>terminal</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan <span class=\"hljs-attr\">make</span>:controller homeController</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-routes-controller/2.png\" class=\"laravel-routes\" width=\"800\" height=\"200\" title=\"Laravel路由控制器\">\n\n<h1 id=\"撰寫-Controller\"><a href=\"#撰寫-Controller\" class=\"headerlink\" title=\"撰寫 Controller\"></a>撰寫 Controller</h1><p>使用<strong>路由名稱</strong>創建 function 並且制定渲染內容，連接 Views：</p>\n<figure class=\"highlight php hljs\"><figcaption><span>App/Https/Controllers/homeController.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">namespace</span> <span class=\"title class_\">App</span>\\<span class=\"title class_\">Http</span>\\<span class=\"title class_\">Controllers</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Illuminate</span>\\<span class=\"hljs-title\">Http</span>\\<span class=\"hljs-title\">Request</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">homeController</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Controller</span></span></span><br><span class=\"line\"><span class=\"hljs-class\"></span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">index</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_ invoke__\">view</span>(<span class=\"hljs-string\">'welcome'</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 參數要記得帶</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dog</span> (<span class=\"hljs-params\"><span class=\"hljs-variable\">$dogName</span></span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-variable\">$datas</span> = [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"name\"</span> =&gt; <span class=\"hljs-string\">\"Abby\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">\"dogName\"</span> =&gt; <span class=\"hljs-variable\">$dogName</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_ invoke__\">view</span>(<span class=\"hljs-string\">'routesTest'</span>, <span class=\"hljs-variable\">$datas</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote class=\"colorquote info\"><p>記得將應用到的動態參數一並移植到 Controller 的 function arguments 中！</p>\n</blockquote>\n\n<h1 id=\"對應-Routes-字串\"><a href=\"#對應-Routes-字串\" class=\"headerlink\" title=\"對應 Routes 字串\"></a>對應 Routes 字串</h1><p>將路由路徑制定好並且傳入陣列參數：</p>\n<ol>\n<li><code>use</code> 剛才創建的 Controller 檔案</li>\n<li>索引<code>[0]</code>放置 <code>ControllerName::class</code></li>\n<li>索引<code>[1]</code>放置對應 <code>function</code>：<figure class=\"highlight php hljs\"><figcaption><span>routes/web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Illuminate</span>\\<span class=\"hljs-title\">Support</span>\\<span class=\"hljs-title\">Facades</span>\\<span class=\"hljs-title\">Route</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">App</span>\\<span class=\"hljs-title\">Http</span>\\<span class=\"hljs-title\">Controllers</span>\\<span class=\"hljs-title\">homeController</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/'</span>, [home<span class=\"title class_\">Controller</span>::<span class=\"variable language_\">class</span>, <span class=\"hljs-string\">'index'</span>]);</span><br><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/dog/{dogName}'</span>, [home<span class=\"title class_\">Controller</span>::<span class=\"variable language_\">class</span>, <span class=\"hljs-string\">'dog'</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure></li>\n</ol>\n<p>渲染結果：</p>\n<img src=\"/images/laravel-routes-controller/3.png\" class=\"laravel-routes\" width=\"800\" height=\"200\" title=\"Laravel路由控制器\">\n<img src=\"/images/laravel-routes-controller/4.png\" class=\"laravel-routes\" width=\"500\" height=\"200\" title=\"Laravel路由控制器\">\n\n<p>以上就是 Controller 的常見功能。</p>\n</body></html>",
            "tags": [
                "laravel",
                "php"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/04/04/zh-tw/laravel-routes/",
            "url": "http://maomaoxie.github.io/2022/04/04/zh-tw/laravel-routes/",
            "title": "Laravel 認識路由",
            "date_published": "2022-04-04T14:41:43.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/laravel-routes/0.png\" class=\"laravel-routes\" width=\"800\" height=\"200\" title=\"Laravel路由介紹\">\n<p>應用程式介面的主要目的就是提供使用者與介面互動（Interaction），其中 URL 可以取得使用者的資訊並且渲染在畫面中，例如 query string，就是透過最基本的 GET request 來獲取信息：</p>\n<hr>\n<h1 id=\"routes\"><a href=\"#routes\" class=\"headerlink\" title=\"routes\"></a>routes</h1><p>在路由頁面設定想要回應到前端的資訊，有幾種方式：</p>\n<h3 id=\"simple-data\"><a href=\"#simple-data\" class=\"headerlink\" title=\"simple data\"></a>simple data</h3><p>回傳簡單的關聯式陣列：</p>\n<blockquote class=\"colorquote info\"><p>關聯式陣列可以想做類似 javascript 的物件一樣，鍵值對（key-value pair）的形式．</p>\n</blockquote>\n\n<figure class=\"highlight php hljs\"><figcaption><span>routes/web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/greetings'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-variable\">$datas</span> = [</span><br><span class=\"line\">    [ </span><br><span class=\"line\">      <span class=\"hljs-string\">\"name\"</span> =&gt; <span class=\"hljs-string\">\"Abby\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$datas</span>;</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-routes/1.png\" class=\"laravel-routes\" width=\"500\" height=\"200\" title=\"Laravel路由介紹\">\n<hr>\n<h3 id=\"Views\"><a href=\"#Views\" class=\"headerlink\" title=\"Views\"></a>Views</h3><p>回傳資料至 <code>blade</code> 模板，渲染 html</p>\n<figure class=\"highlight php hljs\"><figcaption><span>routes/web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/greetings'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-variable\">$datas</span> = [</span><br><span class=\"line\">    [ </span><br><span class=\"line\">      <span class=\"hljs-string\">\"name\"</span> =&gt; <span class=\"hljs-string\">\"Abby\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"title function_ invoke__\">views</span>(<span class=\"hljs-string\">'greetings'</span>, <span class=\"hljs-variable\">$datas</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>直接將傳遞過來的關聯式陣列 key 傳進來當變數名</p>\n<figure class=\"highlight php hljs\"><figcaption><span>resource/views/greetings.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> content=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"hljs-string\">\"viewport\"</span> content=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Greetings&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;h1&gt;Hello! {{ <span class=\"hljs-variable\">$name</span> }}&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"query-string-參數\"><a href=\"#query-string-參數\" class=\"headerlink\" title=\"query string　參數\"></a>query string　參數</h3><p>變數也可以使用既有的 <code>request()</code> 方法承接 URL <code>?</code> 後方的 <strong>key</strong> 來渲染到畫面中，讀取 GET 參數：</p>\n<h4 id=\"request\"><a href=\"#request\" class=\"headerlink\" title=\"request()\"></a>request()</h4><figure class=\"highlight php hljs\"><figcaption><span>routes/web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/cat'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 這裡輸入 params key</span></span><br><span class=\"line\">  <span class=\"hljs-variable\">$catNumbers</span> = <span class=\"title function_ invoke__\">request</span>(<span class=\"hljs-string\">'catNumbers'</span>);</span><br><span class=\"line\">  <span class=\"hljs-variable\">$datas</span> = [</span><br><span class=\"line\">    <span class=\"hljs-string\">\"catNumbers\"</span> =&gt; <span class=\"title function_ invoke__\">strip_tags</span>(<span class=\"hljs-variable\">$catNumbers</span>)</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"hljs-comment\">// return \"這裡有${catNumbers}隻貓\";</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"title function_ invoke__\">view</span>(<span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-variable\">$datas</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight php hljs\"><figcaption><span>resource/views/cat.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> content=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"hljs-string\">\"viewport\"</span> content=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Cat Route&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;h1&gt;這裡有{{ <span class=\"hljs-variable\">$catNumbers</span> }}隻貓&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-routes/3.png\" class=\"laravel-routes\" width=\"500\" height=\"200\" title=\"Laravel路由介紹\">\n\n<blockquote class=\"colorquote danger\"><p>為了避免 XSS 攻擊注入惡意程式到 app 中，可以為你的 request 包覆 <code>strip_tags()</code>，動態路由則不需要。</p>\n</blockquote>\n\n<h4 id=\"設置概覽資料\"><a href=\"#設置概覽資料\" class=\"headerlink\" title=\"設置概覽資料\"></a>設置概覽資料</h4><p>若使用者沒有查詢任何關鍵字（例如衣服），可以設立一個預設顯示的資料（例如展示全部商品）：</p>\n<figure class=\"highlight php hljs\"><figcaption><span>routes/web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/cat'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 這裡輸入 params key</span></span><br><span class=\"line\">  <span class=\"hljs-variable\">$catNumbers</span> = <span class=\"title function_ invoke__\">request</span>(<span class=\"hljs-string\">'catNumbers'</span>);</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 有指定的話顯示</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$catNumbers</span>)) {</span><br><span class=\"line\">    <span class=\"hljs-variable\">$datas</span> = [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"catNumbers\"</span> =&gt; <span class=\"title function_ invoke__\">strip_tags</span>(<span class=\"hljs-variable\">$catNumbers</span>)</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_ invoke__\">view</span>(<span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-variable\">$datas</span>);</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 沒指定的話顯示</span></span><br><span class=\"line\">    <span class=\"hljs-variable\">$datas</span> = [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"catNumbers\"</span> =&gt; <span class=\"hljs-string\">'很多'</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_ invoke__\">view</span>(<span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-variable\">$datas</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-routes/4.png\" class=\"\" width=\"500\" height=\"200\" title=\"laravel路由\">\n\n<blockquote class=\"colorquote info\"><p><code>isset()</code> 方法類似 javascript 的 <code>if (variable === undefined)</code>，判斷某變數是否存在。  </p>\n</blockquote>\n\n<hr>\n<h3 id=\"dynamic-routes\"><a href=\"#dynamic-routes\" class=\"headerlink\" title=\"dynamic routes\"></a>dynamic routes</h3><p>可以渲染使用者輸入的資料，動態路由使用 <code>{}</code> 將路由變數名稱包起，爾後經過 GET URL 的方式取得信息，路由設定需要傳入變數至回呼函式中接收：</p>\n<h4 id=\"範例1-對應的動態路由變數需要傳入回呼函式中\"><a href=\"#範例1-對應的動態路由變數需要傳入回呼函式中\" class=\"headerlink\" title=\"範例1. 對應的動態路由變數需要傳入回呼函式中\"></a>範例1. 對應的動態路由變數需要傳入回呼函式中</h4><figure class=\"highlight php hljs\"><figcaption><span>routes/web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/dog/{dogName}'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-variable\">$dogName</span></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-variable\">$datas</span> = [</span><br><span class=\"line\">    <span class=\"hljs-string\">\"name\"</span> =&gt; <span class=\"hljs-string\">\"Abby\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"dogName\"</span> =&gt; <span class=\"hljs-variable\">$dogName</span></span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"title function_ invoke__\">view</span>(<span class=\"hljs-string\">'routesTest'</span>, <span class=\"hljs-variable\">$datas</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight php hljs\"><figcaption><span>resource/views/greetings.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> content=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"hljs-string\">\"viewport\"</span> content=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Greetings&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;h1&gt;Hello! {{ <span class=\"hljs-variable\">$name</span> }}&lt;/h1&gt;</span><br><span class=\"line\">  &lt;h2&gt;A dog name {{ <span class=\"hljs-variable\">$dogName</span> }}&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-routes/2.png\" class=\"laravel-routes\" width=\"500\" height=\"200\" title=\"Laravel路由介紹\">\n\n<h4 id=\"範例2-傳入多個非必要的動態路由參數\"><a href=\"#範例2-傳入多個非必要的動態路由參數\" class=\"headerlink\" title=\"範例2. 傳入多個非必要的動態路由參數\"></a>範例2. 傳入多個非必要的動態路由參數</h4><figure class=\"highlight php hljs\"><figcaption><span>routes/web.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"hljs-string\">'/shop/{category?}/{item?}'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-variable\">$a</span> = <span class=\"hljs-literal\">null</span>, <span class=\"hljs-variable\">$b</span> = <span class=\"hljs-literal\">null</span></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$a</span>)) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$b</span>)) {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"你正在瀏覽商店${a}分類的${b}品項\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  } </span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'你正在瀏覽商店的所有商品'</span>;</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote class=\"colorquote info\"><p>對應的回呼函式必須接收一樣數量的變數當參數，名稱隨意不過最好與路由同名比較直覺，且位置要按照順序！<br>非必要的路由參數需要設置：</p>\n<ol>\n<li><code>?</code>放置在<code>{}</code>內，表示為可選的。</li>\n<li>非必要路由參數需設置預設值為空<code>null</code>才不會噴錯。</li>\n</ol>\n</blockquote>\n\n<img src=\"/images/laravel-routes/5.png\" class=\"laravel-routes\" width=\"500\" height=\"200\" title=\"Laravel路由介紹\">\n<img src=\"/images/laravel-routes/6.png\" class=\"laravel-routes\" width=\"500\" height=\"200\" title=\"Laravel路由介紹\">\n</body></html>",
            "tags": [
                "laravel",
                "php"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/04/03/zh-tw/laravel-folder-intro/",
            "url": "http://maomaoxie.github.io/2022/04/03/zh-tw/laravel-folder-intro/",
            "title": "Laravel 專案包初探",
            "date_published": "2022-04-03T18:01:30.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/laravel-folder-intro/0.png\" class=\"Laravel-folder-intro\" width=\"800\" height=\"200\" title=\"Laravel 專案包初探\">\n<p>Laravel 專案包建立好之後，有以下幾個主要的資料夾，一一介紹其作用：</p>\n<blockquote class=\"colorquote info\"><p>先打預防針，其實整個 Larevel 專案包預設並沒有任何 UI 框架，此專案包內名為 bootstrap 的檔案都跟該框架無半點毛關係！不要被混淆了。</p>\n<p>知識小學堂：<br><strong>bootstrap</strong> 的意思為鞋帶，衍生的動詞涵義是<strong>啟動機制</strong>，符合 Laravel 框架中用來充當 <strong>glue</strong> 黏著任何相關檔案或 app 啟動機制的程序。</p>\n</blockquote>\n\n<h1 id=\"vendor\"><a href=\"#vendor\" class=\"headerlink\" title=\"vendor\"></a>vendor</h1><p>Composer 相依套件的目錄，類似 node modules。</p>\n<h1 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h1><p>核心的 code 會放在這裡，大部分的類別（class）程式放置處，重要的 MVC 架構中的 <code>Controller</code> 類別會放在 Http/Controllers 資料夾中，以處理 View 與 Model 中間的繫結處理器。</p>\n<h1 id=\"bootstrap\"><a href=\"#bootstrap\" class=\"headerlink\" title=\"bootstrap\"></a>bootstrap</h1><p>這裡的 bootstrap 並非 UI 框架，而是啟動整個 Laravel app 需要使用的元件放置處，增進性能優化的快取設定（cache）會放在這，不需要編寫這邊的檔案。</p>\n<h1 id=\"database\"><a href=\"#database\" class=\"headerlink\" title=\"database\"></a>database</h1><p>Model factories 會放在這裡，亦可處理 database 的遷移。</p>\n<h1 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\"lang\"></a>lang</h1><p>語言的切換檔案。</p>\n<h1 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h1><p>網站的靜態檔案如 js、css 及 images 放置處，以及網站的所有入口點（entry points）<code>index.php</code> 與設定自動加載（autoloading）的地方。</p>\n<h1 id=\"resource\"><a href=\"#resource\" class=\"headerlink\" title=\"resource\"></a>resource</h1><p>MVC 架構中的 <code>Views</code> 類別會放在這裡，通常是 <code>blade</code> 模板檔案，也存放一些初胚的、未經壓縮與處理的 js、css 檔案，在網站打包之後會被壓縮並且優化性能，需要 loader 去編譯的檔案可以放在這裡，例如 less 或 sass。</p>\n<h3 id=\"resource-x2F-bootstrap-js\"><a href=\"#resource-x2F-bootstrap-js\" class=\"headerlink\" title=\"resource/bootstrap.js\"></a>resource/bootstrap.js</h3><p>該文件夾底下的 <code>bootstrap.js</code> 檔案並非 UI 框架，而是放置 <code>CSRF Token</code> 自動夾帶在 header 的程序，並且使用 <code>$axios</code> 發送 request 出去，以<strong>避免 XSRF 跨站偽造攻擊</strong>之用！</p>\n<blockquote class=\"colorquote danger\"><p>警告：不想整個 app 掛掉的話請不要亂動我！</p>\n</blockquote>\n\n<h1 id=\"routes\"><a href=\"#routes\" class=\"headerlink\" title=\"routes\"></a>routes</h1><p>路由檔案，預設會有 <code>web.php</code>, <code>api.php</code>, <code>console.php</code>, and <code>channels.php</code> 幾支提供設定，也可以使用 app 裡面的 Controller Class 來渲染路由對應的 view 檔。</p>\n<h3 id=\"routes-x2F-web-php\"><a href=\"#routes-x2F-web-php\" class=\"headerlink\" title=\"routes/web.php\"></a>routes/web.php</h3><p>提供 session state、CSRF 保護與 cookie 加密，可以放置除了 server 提供的 RESTful API 以外的網頁路由設定。</p>\n<h3 id=\"routes-x2F-api-php\"><a href=\"#routes-x2F-api-php\" class=\"headerlink\" title=\"routes/api.php\"></a>routes/api.php</h3><p>API 中介軟體的設定處，是無狀態（stateless）的，所有進入該介面的路由都需要攜帶 Token 認證且無法隨意進入。</p>\n<h3 id=\"routes-x2F-console-php\"><a href=\"#routes-x2F-console-php\" class=\"headerlink\" title=\"routes/console.php\"></a>routes/console.php</h3><p>可以將自定義的指令碼撰寫在這，例如 Artisan 的相關指令。</p>\n<h3 id=\"routes-x2F-channels-php\"><a href=\"#routes-x2F-channels-php\" class=\"headerlink\" title=\"routes/channels.php\"></a>routes/channels.php</h3><p>定義授權請求監聽的邏輯，以註冊相應的回呼函式。</p>\n<h1 id=\"storage\"><a href=\"#storage\" class=\"headerlink\" title=\"storage\"></a>storage</h1><p>放置經過編譯的 blade php 模板，以及快取與其他框架處理過後的檔案，其中<code>storage/app/public</code>路徑放置使用者操作後產生的檔案，例如頭像圖片。</p>\n<h1 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h1><p>整個網站應用程式的設定檔案，建議熟讀並且活用其中的多樣選擇。可以把一些全域使用的環境變數放置其中。</p>\n<p>參考文章：</p>\n<blockquote><p><a href=\"https://laravel.com/docs/9.x/structure\">https://laravel.com/docs/9.x/structure</a></p>\n</blockquote>\n</body></html>",
            "tags": [
                "laravel",
                "blade",
                "php",
                "linux",
                "wsl2"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/02/12/zh-tw/laravel-installation/",
            "url": "http://maomaoxie.github.io/2022/02/12/zh-tw/laravel-installation/",
            "title": "Windows 搭建 Laravel 環境的各種跌坑",
            "date_published": "2022-02-12T16:36:34.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/laravel-installation/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>使用 Window 10 搭建 Laravel 框架的過程採了一堆大坑 QQ，經過幾番努力終於成功！<br>千萬不要認為裝套件都是敲一敲指令就可以了，工程師的路從來都沒有那麼好走，是天堂路阿孩子！<br>工欲善其事，必先利其器，先將裝備整頓好才能打 BOSS：</p>\n<h1 id=\"安裝-Composer\"><a href=\"#安裝-Composer\" class=\"headerlink\" title=\"安裝 Composer\"></a>安裝 <a href=\"https://getcomposer.org/\">Composer</a></h1><p>簡單介紹一下 composer 的用處，npm 是用來安裝 node.js 的套件管理工具，那麼 composer 就是用來安裝 php 套件的管理工具。<br>windows 這一步很簡單，按這裡就可以下載，設定那些一路按下去就好。</p>\n<img src=\"/images/laravel-installation/1.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<img src=\"/images/laravel-installation/2.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h1 id=\"安裝-Ubuntu-amp-Windows-terminal\"><a href=\"#安裝-Ubuntu-amp-Windows-terminal\" class=\"headerlink\" title=\"安裝 Ubuntu &amp; Windows terminal\"></a>安裝 Ubuntu &amp; Windows terminal</h1><p>兩個都可以到 Microsoft store 下載。</p>\n<img src=\"/images/laravel-installation/6.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<img src=\"/images/laravel-installation/7.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h1 id=\"安裝-WSL2\"><a href=\"#安裝-WSL2\" class=\"headerlink\" title=\"安裝 WSL2\"></a>安裝 WSL2</h1><p>Laravel 環境有要求：</p>\n<blockquote class=\"colorquote info\"><p>在新建 Laravel 應用前，請確保你的 Windows 電腦已經安裝了 Docker Desktop。<br>之後，請確保已經安裝並啟用了適用於 <strong>Linux 的 Windows 子系統 2（WSL2）</strong>。<br>WSL 允許你在 Windows 10 上執行 Linux 二進位制檔案。<br>關於如何安裝並啟用 WSL2，請參閱微軟 開發者環境檔案。</p>\n</blockquote>\n<p>補充一下 WSL2 在幹嘛，看不懂就略過 XD：</p>\n<blockquote><p>WSL 1 使用了一個轉譯層（translation layer）來轉換 Linux 與 Windows 底層的系統呼叫（system calls），而 WSL 2 已經不再需要這個轉譯層，因為它有了自己的 Linux 核心，而這個核心是執行於一個輕巧版本的 Hyper-V hypervisor 之上。</p>\n</blockquote>\n<p>看一下安裝大師這個影片就懂了：</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/wJUHe4iof7w\" frameborder=\"0\" loading=\"lazy\" allowfullscreen=\"\"></iframe></div>\n<p>看完影片可以優先執行以下步驟來安裝 Windows WSL2，注意！要使用 windows powershell 並且以管理員身分來執行指令：</p>\n<img src=\"/images/laravel-installation/5.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"安裝-Linux-子系統-WSL2-步驟-1\"><a href=\"#安裝-Linux-子系統-WSL2-步驟-1\" class=\"headerlink\" title=\"安裝 Linux 子系統 WSL2 步驟 1\"></a>安裝 Linux 子系統 WSL2 步驟 1</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"安裝-Linux-子系統-WSL2-步驟-2\"><a href=\"#安裝-Linux-子系統-WSL2-步驟-2\" class=\"headerlink\" title=\"安裝 Linux 子系統 WSL2 步驟 2\"></a>安裝 Linux 子系統 WSL2 步驟 2</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /enable-feature /featurename:VirutalMachinePlatform /all /norestart</span><br></pre></td></tr></tbody></table></figure>\n<p>重啟電腦後下載影片提供的 Windows 補丁 WSL2 Linux kernel update package for x64 machines 才能執行新的 Linux 子系統 以及 Ubuntu 作業系統！下載之後安裝起來就可以囉！</p>\n<img src=\"/images/laravel-installation/8.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"查看系統版本\"><a href=\"#查看系統版本\" class=\"headerlink\" title=\"查看系統版本\"></a>查看系統版本</h3><img src=\"/images/laravel-installation/12.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h1 id=\"安裝-Docker\"><a href=\"#安裝-Docker\" class=\"headerlink\" title=\"安裝 Docker\"></a>安裝 Docker</h1><p>Docker 4.5.0 版本裝完之後會出現設定區塊不斷讀取轉圈圈的 Bug，這裡在 windows 是一個巨坑！ </p>\n<h3 id=\"問題剖析\"><a href=\"#問題剖析\" class=\"headerlink\" title=\"問題剖析\"></a>問題剖析</h3><p>Docker 轉圈圈類似這樣，借別人的圖來演示一下：</p>\n<img src=\"/images/laravel-installation/3.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>沒有辦法將 Ubuntu 與 WSL2 的設定開起來，讓人從開始就決定放棄 XD<br>你一定在想為什麼還要用到 Ubuntu 與 WSL2？<br>上面有提到，Laravel 框架需要依賴 Linux 的 Windows 子系統 2（WSL2）才能執行，所以安裝 WSL2 在先而 Docker 應該在後，一開始就是順序錯誤踩了大坑跑不起來。<br>查看這一篇 <a href=\"https://github.com/docker/for-win/issues/12545\">Docker does not work after installation #12545</a> 發現我不孤單，這裡有提到可以先降版安裝 4.4.2 的 docker，裝好之後再 update 就可以解決轉圈圈的問題了！</p>\n<blockquote><p>After I downloaded 4.4.2 it worked on the first try (well second try but basically all I did was restart it. There was some different error the first time and i clicked continue or ignore or try again or something. Anyways, it just then started. The WSL2 integration option box was still grayed out but it was selected so I didnt need to change it anyways. Then I did try to update to 4.4.4 but it actually installed 4.5.0. But it worked fine and my container was still there and working fine. So it seems that by installing 4.4.2 and then updating to 4.5.0 worked ok.</p>\n</blockquote>\n\n<h3 id=\"下載降板-Docker-4-4-2\"><a href=\"#下載降板-Docker-4-4-2\" class=\"headerlink\" title=\"下載降板 Docker 4.4.2\"></a>下載降板 Docker 4.4.2</h3><p><a href=\"https://docs.docker.com/desktop/windows/release-notes/#docker-desktop-442\">Docker</a> 官方釋出的版本號裡面下載 4.4.2。</p>\n<img src=\"/images/laravel-installation/4.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"更新-Docker-4-5-0\"><a href=\"#更新-Docker-4-5-0\" class=\"headerlink\" title=\"更新 Docker 4.5.0\"></a>更新 Docker 4.5.0</h3><p>安裝完畢記得到 settings 更新到 Docker 4.5.0 版本。</p>\n<img src=\"/images/laravel-installation/10.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"修改設定\"><a href=\"#修改設定\" class=\"headerlink\" title=\"修改設定\"></a>修改設定</h3><p>更改設定為 WSL2 並且<strong>開啟 Ubuntu</strong></p>\n<img src=\"/images/laravel-installation/11.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>到這裡總算收拾好了一個 windows 才有的大坑阿~（累）</p>\n<h1 id=\"安裝-Laravel-amp-sail\"><a href=\"#安裝-Laravel-amp-sail\" class=\"headerlink\" title=\"安裝 Laravel &amp; sail\"></a>安裝 Laravel &amp; sail</h1><p>瞧瞧這份 <a href=\"https://laravel.com/docs/8.x/installation#getting-started-on-windows\">Laravel</a> 官方安裝文件，<br>我以為在 vscode 命令行輸入這一句就可以搭載 Laravel 了！真的是好傻好天真呀！全忘了剛才安裝的 Ubuntu XD</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s https://laravel.build/example-app | bash</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"使用-Ubuntu-系統-sail-up\"><a href=\"#使用-Ubuntu-系統-sail-up\" class=\"headerlink\" title=\"使用 Ubuntu 系統 sail up\"></a>使用 Ubuntu 系統 sail up</h3><p>在命令行輸入就會發現指令怪怪的，必須要去剛才安裝好的 Windows terminal 點選下拉符號的企鵝（剛剛下載的 Ubuntu作業系統）：</p>\n<img src=\"/images/laravel-installation/9.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>就可以在這裡使用剛才的命令行來安裝 Laravel &amp; sail </p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./vendor/bin/sail up</span><br></pre></td></tr></tbody></table></figure>\n<p>到這裡終於可以啟航啦~（痛哭）<br>啟航沒多久你可以看到很多 Laravel 的專案被啟動，然後就報錯了～（崩潰）</p>\n<h3 id=\"問題剖析-1\"><a href=\"#問題剖析-1\" class=\"headerlink\" title=\"問題剖析\"></a>問題剖析</h3><p>錯誤訊息是這樣的：</p>\n<blockquote class=\"colorquote danger\"><p>docker: Error response from daemon: Ports are not available: listen tcp 0.0.0.0:80: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</p>\n</blockquote>\n<p>也就是我嘗試開啟的 Laravel Port 號被佔用了！指令查看一下 docker 容器列表：<br>後來刪除 80 port 也無法解決問題</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"hljs-built_in\">ls</span></span><br></pre></td></tr></tbody></table></figure>\n<p>在電腦查找了一下，發現是 window 系統執行的某程式（編號4）佔用了</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano | findstr 0.0:80</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-installation/13.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>ctrl + shift + esc 啟動工作管理員 &gt; 詳細資料 &gt; 使用 PID 排序查找是甚麼系統佔用：</p>\n<img src=\"/images/laravel-installation/14.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"修改-Laravel-環境檔\"><a href=\"#修改-Laravel-環境檔\" class=\"headerlink\" title=\"修改 Laravel 環境檔\"></a>修改 Laravel 環境檔</h3><p>不敢亂刪執行的系統背景程式，只好修改 Laravel 本身的 docker port 號，這裡要感謝課堂上的小夥伴們集思廣益查到方法了，參考 <a href=\"https://stackoverflow.com/questions/67053449/unable-to-set-the-app-port-on-env-for-laravel-sail\">Unable to set the APP_PORT on .env for Laravel Sail</a><br>將專案的 .env 加上這一行，關閉在打開：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_PORT=3000</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-installation/15.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail down</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./vendor/bin/sail up</span><br></pre></td></tr></tbody></table></figure>\n<p>就成功了！整個很想大哭一場 QQ</p>\n<img src=\"/images/laravel-installation/16.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"修改指令碼\"><a href=\"#修改指令碼\" class=\"headerlink\" title=\"修改指令碼\"></a>修改指令碼</h3><p>最後修改一下啟動的指令更簡短些：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">alias</span> sail=<span class=\"hljs-string\">'bash vendor/bin/sail'</span></span><br></pre></td></tr></tbody></table></figure>\n<p>就可以不必輸入那麼長的指令啟動 Laravel 啦！</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail up</span><br></pre></td></tr></tbody></table></figure>\n<p>打完收工。</p>\n<p>參考文章：</p>\n<blockquote><p><a href=\"https://forums.docker.com/t/docker-engine-wsl2-stopped-settings-page-doesnt-load/82355\">https://forums.docker.com/t/docker-engine-wsl2-stopped-settings-page-doesnt-load/82355</a><br><a href=\"https://github.com/docker/for-win/issues/12545\">https://github.com/docker/for-win/issues/12545</a><br><a href=\"https://www.youtube.com/watch?v=wJUHe4iof7w\">https://www.youtube.com/watch?v=wJUHe4iof7w</a><br><a href=\"https://ek21.com/news/3/19760/\">https://ek21.com/news/3/19760/</a><br><a href=\"https://stackoverflow.com/questions/67053449/unable-to-set-the-app-port-on-env-for-laravel-sail\">https://stackoverflow.com/questions/67053449/unable-to-set-the-app-port-on-env-for-laravel-sail</a><br>還要感謝課程上的死神老師與許多小夥伴們大力幫忙（跪）</p>\n</blockquote>\n\n<hr>\n<p>2022/04/04 更</p>\n<h1 id=\"Artisan-cmd\"><a href=\"#Artisan-cmd\" class=\"headerlink\" title=\"Artisan cmd\"></a>Artisan cmd</h1><p>Laravel 的 <code>artisan</code> 指令有些需要 <strong>PHP 8 以上版本</strong> 才能支援，需要更新環境的 PHP 版本到 8 以上，並且移除 PHP 7 避免系統指定到舊版本，這樣一來 windows 系統中的 windows terminal 與 ubuntu 企鵝都可以使用各種 artisan 指令，例如自動建立 Controller：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>artisan cmd</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan <span class=\"hljs-attr\">make</span>:controller <span class=\"title class_\">Whatever</span> <span class=\"title class_\">Controller</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>建立完的檔案會自動出現在 app/Http/Controllers 路徑中，結構如下：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>WhateverController.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">  namespace <span class=\"title class_\">App</span>\\<span class=\"title class_\">Http</span>\\<span class=\"title class_\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  use <span class=\"title class_\">Illuminate</span>\\<span class=\"title class_\">Foundation</span>\\<span class=\"title class_\">Auth</span>\\<span class=\"title class_\">Access</span>\\<span class=\"title class_\">AuthorizesRequests</span>;</span><br><span class=\"line\">  use <span class=\"title class_\">Illuminate</span>\\<span class=\"title class_\">Foundation</span>\\<span class=\"title class_\">Bus</span>\\<span class=\"title class_\">DispatchesJobs</span>;</span><br><span class=\"line\">  use <span class=\"title class_\">Illuminate</span>\\<span class=\"title class_\">Foundation</span>\\<span class=\"title class_\">Validation</span>\\<span class=\"title class_\">ValidatesRequests</span>;</span><br><span class=\"line\">  use <span class=\"title class_\">Illuminate</span>\\<span class=\"title class_\">Routing</span>\\<span class=\"title class_\">Controller</span> <span class=\"hljs-keyword\">as</span> <span class=\"title class_\">WhateverController</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">Controller</span> <span class=\"hljs-keyword\">extends</span> <span class=\"title class_ inherited__\">WhateverController</span></span><br><span class=\"line\">  {</span><br><span class=\"line\">      use <span class=\"title class_\">AuthorizesRequests</span>, <span class=\"title class_\">DispatchesJobs</span>, <span class=\"title class_\">ValidatesRequests</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n</body></html>",
            "tags": [
                "laravel",
                "blade",
                "php",
                "linux",
                "wsl2"
            ]
        }
    ]
}