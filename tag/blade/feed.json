{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mawchu 貓奴前端的天空 • All posts by \"blade\" tag",
    "description": "Mawchu 貓奴前端，為熱愛平面設計與貓咪的前端工程師 - 謝佳芳（毛球）的技術部落格，喜歡撰寫技術文章幫助自己在前端之路成長，涉及 Javascript、Vue、Laravel 與其他程式相關的討論與學習",
    "home_page_url": "http://maomaoxie.github.io",
    "items": [
        {
            "id": "http://maomaoxie.github.io/2022/04/10/zh-tw/laravel-layout/",
            "url": "http://maomaoxie.github.io/2022/04/10/zh-tw/laravel-layout/",
            "title": "Laravel 善用 layout 避免重複的模板",
            "date_published": "2022-04-10T06:54:20.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/laravel-layout/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-layout\">\n\n<p>在設計 UI 模板時重複使用的內容屢見不鮮，例如 header、footer 或是 sidebar 等多是網站中分頁裡的標配，這時候重複貼上一樣的模板就顯得有點呆，Laravel MVC 架構中 views 可以創建一個 layout 模板資料夾，重複的 UI 配置可以放置在這裡提供其他分頁的 blade 檔案使用，這樣一來也能省去 layout 修改時相關的檔案都要更改的麻煩事，統一在 layout 裡調整即可：</p>\n<h1 id=\"建立-layout-資料夾\"><a href=\"#建立-layout-資料夾\" class=\"headerlink\" title=\"建立 layout 資料夾\"></a>建立 layout 資料夾</h1><p>此資料夾可以存放共用的模板，例如 header、footer 或是 sidebar 的模板 html。<br>在 project 裡的 <code>resources/views</code> 建立一個 layout 資料夾：</p>\n<img src=\"/images/laravel-layout/1.png\" class=\"\" width=\"300\" height=\"200\" title=\"laravel-layout\">\n<hr>\n<h1 id=\"撰寫模板\"><a href=\"#撰寫模板\" class=\"headerlink\" title=\"撰寫模板\"></a>撰寫模板</h1><p>確立好 controller 中與 views 與 routes 的連結後，就可以著手進行模板的拆分啦！</p>\n<h3 id=\"extends-‘layoutFolder-x2F-layout’\"><a href=\"#extends-‘layoutFolder-x2F-layout’\" class=\"headerlink\" title=\"@extends(‘layoutFolder/layout’)\"></a>@extends(‘layoutFolder/layout’)</h3><p>承接共用模板的其他 views 則使用此語法接收模板，撰寫資料夾路徑方式有兩種：</p>\n<ol>\n<li>斜線</li>\n<li>點</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><figcaption><span>about.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"title function_\">extends</span>(<span class=\"hljs-string\">'layout.layout'</span>)</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight javascript hljs\"><figcaption><span>about.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"title function_\">extends</span>(<span class=\"hljs-string\">'layout/layout'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"yield-‘content’\"><a href=\"#yield-‘content’\" class=\"headerlink\" title=\"@yield(‘content’)\"></a>@yield(‘content’)</h3><p>yield 像是在告訴 php 說我這裡需要挖個洞，待會會丟 html 進來，請認名稱來辨識丟進來的檔案：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>layout/layout.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">很多要共用的 html</span><br><span class=\"line\">...(通常是 header)</span><br><span class=\"line\">@<span class=\"title function_\">yield</span>(<span class=\"hljs-string\">'content'</span>)</span><br><span class=\"line\">很多要共用的 html</span><br><span class=\"line\">...(通常是 footer)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"section-‘content’-…-endsection\"><a href=\"#section-‘content’-…-endsection\" class=\"headerlink\" title=\"@section(‘content’) … @endsection\"></a>@section(‘content’) … @endsection</h3><p>section 類似 vue 的 slot，把其他網頁要替換的內容插入這個插槽中，在通過剛才的 <code>@yield('content')</code> 將page愈替換的內容塞進去共用的模板中：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>page.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"title function_\">extends</span>(<span class=\"hljs-string\">'layout/layout'</span>)</span><br><span class=\"line\">@<span class=\"title function_\">section</span>(<span class=\"hljs-string\">'content'</span>)</span><br><span class=\"line\">  這裡是 page content</span><br><span class=\"line\">  ...</span><br><span class=\"line\">@endsection</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-layout/3.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-layout\">\n<img src=\"/images/laravel-layout/2.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-layout\">\n<hr>\n<h1 id=\"獨立每個頁面的-script\"><a href=\"#獨立每個頁面的-script\" class=\"headerlink\" title=\"獨立每個頁面的 script\"></a>獨立每個頁面的 script</h1><p>插槽的概念同樣可以挖洞給每個獨立頁面放置專屬的 javascript，在 layout 的  之前放置 @yield(‘after_js’) 來承接 page 各自的 <code>&lt;script&gt;...&lt;/script&gt;</code>：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>layout/layout.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  @<span class=\"title function_\">yield</span>(<span class=\"hljs-string\">'after_js'</span>)</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight javascript hljs\"><figcaption><span>page.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"title function_\">section</span>(<span class=\"hljs-string\">'content'</span>)</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"hljs-string\">\"Hey!It's about page.\"</span>);</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">@endsection</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-layout/4.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-layout\">\n<hr>\n<h1 id=\"簡化-section\"><a href=\"#簡化-section\" class=\"headerlink\" title=\"簡化 @section\"></a>簡化 @section</h1><p>每個頁面會有不同的 SEO 內容，例如 <code>title</code> 或是其他的 meta data，這時候 <code>@section</code> 又派上用場了，不同的是<strong>第二個參數</strong>可以傳入文字檔來渲染內容：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>layout/layout.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>@yield('title')<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">    ...</span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight javascript hljs\"><figcaption><span>page.blade.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"title function_\">section</span>(<span class=\"hljs-string\">'title'</span>, <span class=\"hljs-string\">'pageTitle'</span>)</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-layout/5.png\" class=\"\" width=\"300\" height=\"200\" title=\"laravel-layout\">\n<img src=\"/images/laravel-layout/6.png\" class=\"\" width=\"300\" height=\"200\" title=\"laravel-layout\">\n\n<hr>\n<blockquote><p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=AGE3wRKljkw&amp;t=2402s\">https://www.youtube.com/watch?v=AGE3wRKljkw&amp;t=2402s</a></p>\n</blockquote></body></html>",
            "tags": [
                "laravel",
                "blade",
                "layout"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/04/03/zh-tw/laravel-folder-intro/",
            "url": "http://maomaoxie.github.io/2022/04/03/zh-tw/laravel-folder-intro/",
            "title": "Laravel 專案包初探",
            "date_published": "2022-04-03T11:01:30.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/laravel-folder-intro/0.png\" class=\"Laravel-folder-intro\" width=\"800\" height=\"200\" title=\"Laravel 專案包初探\">\n<p>Laravel 專案包建立好之後，有以下幾個主要的資料夾，一一介紹其作用：</p>\n<blockquote class=\"colorquote info\"><p>先打預防針，其實整個 Larevel 專案包預設並沒有任何 UI 框架，此專案包內名為 bootstrap 的檔案都跟該框架無半點毛關係！不要被混淆了。</p>\n<p>知識小學堂：<br><strong>bootstrap</strong> 的意思為鞋帶，衍生的動詞涵義是<strong>啟動機制</strong>，符合 Laravel 框架中用來充當 <strong>glue</strong> 黏著任何相關檔案或 app 啟動機制的程序。</p>\n</blockquote>\n\n<h1 id=\"vendor\"><a href=\"#vendor\" class=\"headerlink\" title=\"vendor\"></a>vendor</h1><p>Composer 相依套件的目錄，類似 node modules。</p>\n<h1 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h1><p>核心的 code 會放在這裡，大部分的類別（class）程式放置處，重要的 MVC 架構中的 <code>Controller</code> 類別會放在 Http/Controllers 資料夾中，以處理 View 與 Model 中間的繫結處理器。</p>\n<h1 id=\"bootstrap\"><a href=\"#bootstrap\" class=\"headerlink\" title=\"bootstrap\"></a>bootstrap</h1><p>這裡的 bootstrap 並非 UI 框架，而是啟動整個 Laravel app 需要使用的元件放置處，增進性能優化的快取設定（cache）會放在這，不需要編寫這邊的檔案。</p>\n<h1 id=\"database\"><a href=\"#database\" class=\"headerlink\" title=\"database\"></a>database</h1><p>Model factories 會放在這裡，亦可處理 database 的遷移。</p>\n<h1 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\"lang\"></a>lang</h1><p>語言的切換檔案。</p>\n<h1 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h1><p>網站的靜態檔案如 js、css 及 images 放置處，以及網站的所有入口點（entry points）<code>index.php</code> 與設定自動加載（autoloading）的地方。</p>\n<h1 id=\"resource\"><a href=\"#resource\" class=\"headerlink\" title=\"resource\"></a>resource</h1><p>MVC 架構中的 <code>Views</code> 類別會放在這裡，通常是 <code>blade</code> 模板檔案，也存放一些初胚的、未經壓縮與處理的 js、css 檔案，在網站打包之後會被壓縮並且優化性能，需要 loader 去編譯的檔案可以放在這裡，例如 less 或 sass。</p>\n<h3 id=\"resource-x2F-bootstrap-js\"><a href=\"#resource-x2F-bootstrap-js\" class=\"headerlink\" title=\"resource/bootstrap.js\"></a>resource/bootstrap.js</h3><p>該文件夾底下的 <code>bootstrap.js</code> 檔案並非 UI 框架，而是放置 <code>CSRF Token</code> 自動夾帶在 header 的程序，並且使用 <code>$axios</code> 發送 request 出去，以<strong>避免 XSRF 跨站偽造攻擊</strong>之用！</p>\n<blockquote class=\"colorquote danger\"><p>警告：不想整個 app 掛掉的話請不要亂動我！</p>\n</blockquote>\n\n<h1 id=\"routes\"><a href=\"#routes\" class=\"headerlink\" title=\"routes\"></a>routes</h1><p>路由檔案，預設會有 <code>web.php</code>, <code>api.php</code>, <code>console.php</code>, and <code>channels.php</code> 幾支提供設定，也可以使用 app 裡面的 Controller Class 來渲染路由對應的 view 檔。</p>\n<h3 id=\"routes-x2F-web-php\"><a href=\"#routes-x2F-web-php\" class=\"headerlink\" title=\"routes/web.php\"></a>routes/web.php</h3><p>提供 session state、CSRF 保護與 cookie 加密，可以放置除了 server 提供的 RESTful API 以外的網頁路由設定。</p>\n<h3 id=\"routes-x2F-api-php\"><a href=\"#routes-x2F-api-php\" class=\"headerlink\" title=\"routes/api.php\"></a>routes/api.php</h3><p>API 中介軟體的設定處，是無狀態（stateless）的，所有進入該介面的路由都需要攜帶 Token 認證且無法隨意進入。</p>\n<h3 id=\"routes-x2F-console-php\"><a href=\"#routes-x2F-console-php\" class=\"headerlink\" title=\"routes/console.php\"></a>routes/console.php</h3><p>可以將自定義的指令碼撰寫在這，例如 Artisan 的相關指令。</p>\n<h3 id=\"routes-x2F-channels-php\"><a href=\"#routes-x2F-channels-php\" class=\"headerlink\" title=\"routes/channels.php\"></a>routes/channels.php</h3><p>定義授權請求監聽的邏輯，以註冊相應的回呼函式。</p>\n<h1 id=\"storage\"><a href=\"#storage\" class=\"headerlink\" title=\"storage\"></a>storage</h1><p>放置經過編譯的 blade php 模板，以及快取與其他框架處理過後的檔案，其中<code>storage/app/public</code>路徑放置使用者操作後產生的檔案，例如頭像圖片。</p>\n<h1 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h1><p>整個網站應用程式的設定檔案，建議熟讀並且活用其中的多樣選擇。可以把一些全域使用的環境變數放置其中。</p>\n<p>參考文章：</p>\n<blockquote><p><a href=\"https://laravel.com/docs/9.x/structure\">https://laravel.com/docs/9.x/structure</a></p>\n</blockquote>\n</body></html>",
            "tags": [
                "laravel",
                "php",
                "linux",
                "blade",
                "wsl2"
            ]
        },
        {
            "id": "http://maomaoxie.github.io/2022/02/12/zh-tw/laravel-installation/",
            "url": "http://maomaoxie.github.io/2022/02/12/zh-tw/laravel-installation/",
            "title": "Windows 搭建 Laravel 環境的各種跌坑",
            "date_published": "2022-02-12T08:36:34.000Z",
            "content_html": "<html><head></head><body><img src=\"/images/laravel-installation/0.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>使用 Window 10 搭建 Laravel 框架的過程採了一堆大坑 QQ，經過幾番努力終於成功！<br>千萬不要認為裝套件都是敲一敲指令就可以了，工程師的路從來都沒有那麼好走，是天堂路阿孩子！<br>工欲善其事，必先利其器，先將裝備整頓好才能打 BOSS：</p>\n<h1 id=\"安裝-Composer\"><a href=\"#安裝-Composer\" class=\"headerlink\" title=\"安裝 Composer\"></a>安裝 <a href=\"https://getcomposer.org/\">Composer</a></h1><p>簡單介紹一下 composer 的用處，npm 是用來安裝 node.js 的套件管理工具，那麼 composer 就是用來安裝 php 套件的管理工具。<br>windows 這一步很簡單，按這裡就可以下載，設定那些一路按下去就好。</p>\n<img src=\"/images/laravel-installation/1.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<img src=\"/images/laravel-installation/2.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h1 id=\"安裝-Ubuntu-amp-Windows-terminal\"><a href=\"#安裝-Ubuntu-amp-Windows-terminal\" class=\"headerlink\" title=\"安裝 Ubuntu &amp; Windows terminal\"></a>安裝 Ubuntu &amp; Windows terminal</h1><p>兩個都可以到 Microsoft store 下載。</p>\n<img src=\"/images/laravel-installation/6.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<img src=\"/images/laravel-installation/7.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h1 id=\"安裝-WSL2\"><a href=\"#安裝-WSL2\" class=\"headerlink\" title=\"安裝 WSL2\"></a>安裝 WSL2</h1><p>Laravel 環境有要求：</p>\n<blockquote class=\"colorquote info\"><p>在新建 Laravel 應用前，請確保你的 Windows 電腦已經安裝了 Docker Desktop。<br>之後，請確保已經安裝並啟用了適用於 <strong>Linux 的 Windows 子系統 2（WSL2）</strong>。<br>WSL 允許你在 Windows 10 上執行 Linux 二進位制檔案。<br>關於如何安裝並啟用 WSL2，請參閱微軟 開發者環境檔案。</p>\n</blockquote>\n<p>補充一下 WSL2 在幹嘛，看不懂就略過 XD：</p>\n<blockquote><p>WSL 1 使用了一個轉譯層（translation layer）來轉換 Linux 與 Windows 底層的系統呼叫（system calls），而 WSL 2 已經不再需要這個轉譯層，因為它有了自己的 Linux 核心，而這個核心是執行於一個輕巧版本的 Hyper-V hypervisor 之上。</p>\n</blockquote>\n<p>看一下安裝大師這個影片就懂了：</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/wJUHe4iof7w\" frameborder=\"0\" loading=\"lazy\" allowfullscreen=\"\"></iframe></div>\n<p>看完影片可以優先執行以下步驟來安裝 Windows WSL2，注意！要使用 windows powershell 並且以管理員身分來執行指令：</p>\n<img src=\"/images/laravel-installation/5.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"安裝-Linux-子系統-WSL2-步驟-1\"><a href=\"#安裝-Linux-子系統-WSL2-步驟-1\" class=\"headerlink\" title=\"安裝 Linux 子系統 WSL2 步驟 1\"></a>安裝 Linux 子系統 WSL2 步驟 1</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"安裝-Linux-子系統-WSL2-步驟-2\"><a href=\"#安裝-Linux-子系統-WSL2-步驟-2\" class=\"headerlink\" title=\"安裝 Linux 子系統 WSL2 步驟 2\"></a>安裝 Linux 子系統 WSL2 步驟 2</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /enable-feature /featurename:VirutalMachinePlatform /all /norestart</span><br></pre></td></tr></tbody></table></figure>\n<p>重啟電腦後下載影片提供的 Windows 補丁 WSL2 Linux kernel update package for x64 machines 才能執行新的 Linux 子系統 以及 Ubuntu 作業系統！下載之後安裝起來就可以囉！</p>\n<img src=\"/images/laravel-installation/8.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"查看系統版本\"><a href=\"#查看系統版本\" class=\"headerlink\" title=\"查看系統版本\"></a>查看系統版本</h3><img src=\"/images/laravel-installation/12.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h1 id=\"安裝-Docker\"><a href=\"#安裝-Docker\" class=\"headerlink\" title=\"安裝 Docker\"></a>安裝 Docker</h1><p>Docker 4.5.0 版本裝完之後會出現設定區塊不斷讀取轉圈圈的 Bug，這裡在 windows 是一個巨坑！ </p>\n<h3 id=\"問題剖析\"><a href=\"#問題剖析\" class=\"headerlink\" title=\"問題剖析\"></a>問題剖析</h3><p>Docker 轉圈圈類似這樣，借別人的圖來演示一下：</p>\n<img src=\"/images/laravel-installation/3.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>沒有辦法將 Ubuntu 與 WSL2 的設定開起來，讓人從開始就決定放棄 XD<br>你一定在想為什麼還要用到 Ubuntu 與 WSL2？<br>上面有提到，Laravel 框架需要依賴 Linux 的 Windows 子系統 2（WSL2）才能執行，所以安裝 WSL2 在先而 Docker 應該在後，一開始就是順序錯誤踩了大坑跑不起來。<br>查看這一篇 <a href=\"https://github.com/docker/for-win/issues/12545\">Docker does not work after installation #12545</a> 發現我不孤單，這裡有提到可以先降版安裝 4.4.2 的 docker，裝好之後再 update 就可以解決轉圈圈的問題了！</p>\n<blockquote><p>After I downloaded 4.4.2 it worked on the first try (well second try but basically all I did was restart it. There was some different error the first time and i clicked continue or ignore or try again or something. Anyways, it just then started. The WSL2 integration option box was still grayed out but it was selected so I didnt need to change it anyways. Then I did try to update to 4.4.4 but it actually installed 4.5.0. But it worked fine and my container was still there and working fine. So it seems that by installing 4.4.2 and then updating to 4.5.0 worked ok.</p>\n</blockquote>\n\n<h3 id=\"下載降板-Docker-4-4-2\"><a href=\"#下載降板-Docker-4-4-2\" class=\"headerlink\" title=\"下載降板 Docker 4.4.2\"></a>下載降板 Docker 4.4.2</h3><p><a href=\"https://docs.docker.com/desktop/windows/release-notes/#docker-desktop-442\">Docker</a> 官方釋出的版本號裡面下載 4.4.2。</p>\n<img src=\"/images/laravel-installation/4.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"更新-Docker-4-5-0\"><a href=\"#更新-Docker-4-5-0\" class=\"headerlink\" title=\"更新 Docker 4.5.0\"></a>更新 Docker 4.5.0</h3><p>安裝完畢記得到 settings 更新到 Docker 4.5.0 版本。</p>\n<img src=\"/images/laravel-installation/10.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"修改設定\"><a href=\"#修改設定\" class=\"headerlink\" title=\"修改設定\"></a>修改設定</h3><p>更改設定為 WSL2 並且<strong>開啟 Ubuntu</strong></p>\n<img src=\"/images/laravel-installation/11.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>到這裡總算收拾好了一個 windows 才有的大坑阿~（累）</p>\n<h1 id=\"安裝-Laravel-amp-sail\"><a href=\"#安裝-Laravel-amp-sail\" class=\"headerlink\" title=\"安裝 Laravel &amp; sail\"></a>安裝 Laravel &amp; sail</h1><p>瞧瞧這份 <a href=\"https://laravel.com/docs/8.x/installation#getting-started-on-windows\">Laravel</a> 官方安裝文件，<br>我以為在 vscode 命令行輸入這一句就可以搭載 Laravel 了！真的是好傻好天真呀！全忘了剛才安裝的 Ubuntu XD</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s https://laravel.build/example-app | bash</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"使用-Ubuntu-系統-sail-up\"><a href=\"#使用-Ubuntu-系統-sail-up\" class=\"headerlink\" title=\"使用 Ubuntu 系統 sail up\"></a>使用 Ubuntu 系統 sail up</h3><p>在命令行輸入就會發現指令怪怪的，必須要去剛才安裝好的 Windows terminal 點選下拉符號的企鵝（剛剛下載的 Ubuntu作業系統）：</p>\n<img src=\"/images/laravel-installation/9.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>就可以在這裡使用剛才的命令行來安裝 Laravel &amp; sail </p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./vendor/bin/sail up</span><br></pre></td></tr></tbody></table></figure>\n<p>到這裡終於可以啟航啦~（痛哭）<br>啟航沒多久你可以看到很多 Laravel 的專案被啟動，然後就報錯了～（崩潰）</p>\n<h3 id=\"問題剖析-1\"><a href=\"#問題剖析-1\" class=\"headerlink\" title=\"問題剖析\"></a>問題剖析</h3><p>錯誤訊息是這樣的：</p>\n<blockquote class=\"colorquote danger\"><p>docker: Error response from daemon: Ports are not available: listen tcp 0.0.0.0:80: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</p>\n</blockquote>\n<p>也就是我嘗試開啟的 Laravel Port 號被佔用了！指令查看一下 docker 容器列表：<br>後來刪除 80 port 也無法解決問題</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"hljs-built_in\">ls</span></span><br></pre></td></tr></tbody></table></figure>\n<p>在電腦查找了一下，發現是 window 系統執行的某程式（編號4）佔用了</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano | findstr 0.0:80</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-installation/13.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<p>ctrl + shift + esc 啟動工作管理員 &gt; 詳細資料 &gt; 使用 PID 排序查找是甚麼系統佔用：</p>\n<img src=\"/images/laravel-installation/14.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"修改-Laravel-環境檔\"><a href=\"#修改-Laravel-環境檔\" class=\"headerlink\" title=\"修改 Laravel 環境檔\"></a>修改 Laravel 環境檔</h3><p>不敢亂刪執行的系統背景程式，只好修改 Laravel 本身的 docker port 號，這裡要感謝課堂上的小夥伴們集思廣益查到方法了，參考 <a href=\"https://stackoverflow.com/questions/67053449/unable-to-set-the-app-port-on-env-for-laravel-sail\">Unable to set the APP_PORT on .env for Laravel Sail</a><br>將專案的 .env 加上這一行，關閉在打開：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_PORT=3000</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"/images/laravel-installation/15.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail down</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./vendor/bin/sail up</span><br></pre></td></tr></tbody></table></figure>\n<p>就成功了！整個很想大哭一場 QQ</p>\n<img src=\"/images/laravel-installation/16.png\" class=\"\" width=\"800\" height=\"200\" title=\"laravel-installation\">\n\n<h3 id=\"修改指令碼\"><a href=\"#修改指令碼\" class=\"headerlink\" title=\"修改指令碼\"></a>修改指令碼</h3><p>最後修改一下啟動的指令更簡短些：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">alias</span> sail=<span class=\"hljs-string\">'bash vendor/bin/sail'</span></span><br></pre></td></tr></tbody></table></figure>\n<p>就可以不必輸入那麼長的指令啟動 Laravel 啦！</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail up</span><br></pre></td></tr></tbody></table></figure>\n<p>打完收工。</p>\n<p>參考文章：</p>\n<blockquote><p><a href=\"https://forums.docker.com/t/docker-engine-wsl2-stopped-settings-page-doesnt-load/82355\">https://forums.docker.com/t/docker-engine-wsl2-stopped-settings-page-doesnt-load/82355</a><br><a href=\"https://github.com/docker/for-win/issues/12545\">https://github.com/docker/for-win/issues/12545</a><br><a href=\"https://www.youtube.com/watch?v=wJUHe4iof7w\">https://www.youtube.com/watch?v=wJUHe4iof7w</a><br><a href=\"https://ek21.com/news/3/19760/\">https://ek21.com/news/3/19760/</a><br><a href=\"https://stackoverflow.com/questions/67053449/unable-to-set-the-app-port-on-env-for-laravel-sail\">https://stackoverflow.com/questions/67053449/unable-to-set-the-app-port-on-env-for-laravel-sail</a><br>還要感謝課程上的死神老師與許多小夥伴們大力幫忙（跪）</p>\n</blockquote>\n\n<hr>\n<p>2022/04/04 更</p>\n<h1 id=\"Artisan-cmd\"><a href=\"#Artisan-cmd\" class=\"headerlink\" title=\"Artisan cmd\"></a>Artisan cmd</h1><p>Laravel 的 <code>artisan</code> 指令有些需要 <strong>PHP 8 以上版本</strong> 才能支援，需要更新環境的 PHP 版本到 8 以上，並且移除 PHP 7 避免系統指定到舊版本，這樣一來 windows 系統中的 windows terminal 與 ubuntu 企鵝都可以使用各種 artisan 指令，例如自動建立 Controller：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>artisan cmd</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan <span class=\"hljs-attr\">make</span>:controller <span class=\"title class_\">Whatever</span> <span class=\"title class_\">Controller</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>建立完的檔案會自動出現在 app/Http/Controllers 路徑中，結構如下：</p>\n<figure class=\"highlight javascript hljs\"><figcaption><span>WhateverController.php</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">  namespace <span class=\"title class_\">App</span>\\<span class=\"title class_\">Http</span>\\<span class=\"title class_\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  use <span class=\"title class_\">Illuminate</span>\\<span class=\"title class_\">Foundation</span>\\<span class=\"title class_\">Auth</span>\\<span class=\"title class_\">Access</span>\\<span class=\"title class_\">AuthorizesRequests</span>;</span><br><span class=\"line\">  use <span class=\"title class_\">Illuminate</span>\\<span class=\"title class_\">Foundation</span>\\<span class=\"title class_\">Bus</span>\\<span class=\"title class_\">DispatchesJobs</span>;</span><br><span class=\"line\">  use <span class=\"title class_\">Illuminate</span>\\<span class=\"title class_\">Foundation</span>\\<span class=\"title class_\">Validation</span>\\<span class=\"title class_\">ValidatesRequests</span>;</span><br><span class=\"line\">  use <span class=\"title class_\">Illuminate</span>\\<span class=\"title class_\">Routing</span>\\<span class=\"title class_\">Controller</span> <span class=\"hljs-keyword\">as</span> <span class=\"title class_\">WhateverController</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">Controller</span> <span class=\"hljs-keyword\">extends</span> <span class=\"title class_ inherited__\">WhateverController</span></span><br><span class=\"line\">  {</span><br><span class=\"line\">      use <span class=\"title class_\">AuthorizesRequests</span>, <span class=\"title class_\">DispatchesJobs</span>, <span class=\"title class_\">ValidatesRequests</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n</body></html>",
            "tags": [
                "laravel",
                "php",
                "linux",
                "blade",
                "wsl2"
            ]
        }
    ]
}